/**
 * generated by Xtext 2.16.0
 */
package br.ufes.inf.nemo.ml2.generator;

import br.ufes.inf.nemo.ml2.generator.ML2OutputConfigurationProvider;
import br.ufes.inf.nemo.ml2.model.ML2Model;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ML2Generator extends AbstractGenerator {
  public void doGenerate(final Resource xtextResource, final Resource xmiResource) {
    try {
      EcoreUtil.resolveAll(xtextResource);
      xmiResource.getContents().add(xtextResource.getContents().get(0));
      xmiResource.save(null);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Override
  public void doGenerate(final Resource xtextResource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    try {
      final ResourceSetImpl rs = new ResourceSetImpl();
      String _replace = IterableExtensions.<String>last(((Iterable<String>)Conversions.doWrapArray(xtextResource.getURI().segments()))).replace(".ml2", "");
      String _plus = ("models\\" + _replace);
      final String fileName = (_plus + ".xmi");
      final Resource xmiResource = rs.createResource(URI.createURI(fileName));
      EcoreUtil2.resolveAll(xtextResource.getResourceSet());
      boolean _isEmpty = xtextResource.getContents().isEmpty();
      if (_isEmpty) {
        return;
      }
      EObject _get = xtextResource.getContents().get(0);
      final ML2Model model = ((ML2Model) _get);
      final EList<ML2Model> includes = model.getIncludes();
      xmiResource.getContents().add(model);
      if (((includes != null) && (includes.size() > 0))) {
        xmiResource.getContents().addAll(model.getIncludes());
      }
      final ByteArrayOutputStream outStream = new ByteArrayOutputStream();
      xmiResource.save(outStream, null);
      byte[] _byteArray = outStream.toByteArray();
      ByteArrayInputStream _byteArrayInputStream = new ByteArrayInputStream(_byteArray);
      fsa.generateFile(fileName, ML2OutputConfigurationProvider.MODELS_OUTPUT, _byteArrayInputStream);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
