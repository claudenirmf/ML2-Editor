/**
 * generated by Xtext 2.10.0
 */
package br.ufes.inf.nemo.ml2.validation;

import br.ufes.inf.nemo.ml2.lib.ML2Lib;
import br.ufes.inf.nemo.ml2.meta.DataType;
import br.ufes.inf.nemo.ml2.meta.EntityDeclaration;
import br.ufes.inf.nemo.ml2.meta.Feature;
import br.ufes.inf.nemo.ml2.meta.FeatureAssignment;
import br.ufes.inf.nemo.ml2.meta.GeneralizationSet;
import br.ufes.inf.nemo.ml2.meta.HOClass;
import br.ufes.inf.nemo.ml2.meta.ML2Class;
import br.ufes.inf.nemo.ml2.util.ML2Util;
import br.ufes.inf.nemo.ml2.validation.AbstractML2Validator;
import br.ufes.inf.nemo.ml2.validation.LinguisticRules;
import br.ufes.inf.nemo.ml2.validation.MLTRules;
import br.ufes.inf.nemo.ml2.validation.UFORules;
import br.ufes.inf.nemo.ml2.validation.ValidationError;
import br.ufes.inf.nemo.ml2.validation.ValidationIssue;
import br.ufes.inf.nemo.ml2.validation.ValidationWarning;
import com.google.common.base.Objects;
import com.google.inject.Inject;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class ML2Validator extends AbstractML2Validator {
  @Inject
  @Extension
  private ML2Util _mL2Util;
  
  @Inject
  @Extension
  private ML2Lib _mL2Lib;
  
  @Inject
  @Extension
  private LinguisticRules _linguisticRules;
  
  @Inject
  @Extension
  private MLTRules _mLTRules;
  
  @Inject
  @Extension
  private UFORules _uFORules;
  
  public final static String INSTANTIATION_OF_DISJOINT_TYPES = "br.ufes.inf.nemo.ontol.InstantiationOfDisjointTypes";
  
  public final static String MISSING_COMPLETE_INSTANTIATION = "br.ufes.inf.nemo.ontol.MissingCompleteInstantiation";
  
  public final static String POWERTYPE_COMPLETE_SPECIALIZATION = "br.ufes.inf.nemo.ontol.PowertypeCompleteSpecialization";
  
  public final static String COMPLETE_CHARACTERIZATION_AND_COMPLETENESS = "br.ufes.inf.nemo.ontol.CompleteCharacterizationAndCompleteness";
  
  public final static String DISJOINT_CHARACTERIZATION_AND_DISJOINTNESS = "br.ufes.inf.nemo.ontol.DisjointCharacterizationAndDisjointness";
  
  public final static String MANDATORY_SPECIALIZATION_OF_ENDURANT = "br.ufes.inf.nemo.ontol.MandaorySpecializationOfEndurant";
  
  public final static String NONSORTAL_SPECIALIZING_SORTAL = "br.ufes.inf.nemo.ontol.NonSortalSpecializingSortal";
  
  public final static String RIGID_SPECIALIZING_ANTIRIGID = "br.ufes.inf.nemo.ontol.RigidSpecializingAntiRigid";
  
  public final static String SEMIRIGID_SPECIALIZING_ANTIRIGID = "br.ufes.inf.nemo.ontol.SemiRigidSpecializingAntiRigid";
  
  public final static String MULTIPLE_IDENTITIES = "br.ufes.inf.nemo.ontol.MultipleIdentities";
  
  public final static String MISSING_IDENTITY = "br.ufes.inf.nemo.ontol.MissingIdentity";
  
  public final static String NECESSARY_INSTANTIATION = "br.ufes.inf.nemo.ontol.NecessaryInstantiation";
  
  public final static String MISSING_SPECIALIZATION_TO_BASETYPE = "br.ufes.inf.nemo.ontol.MissingSpecializationToBasetype";
  
  public final static String UFO_A_MISSING_MUST_INSTANTIATION = "br.ufes.inf.nemo.ontol.ufo.a.MissingMustInstantiation";
  
  public final static String UFO_A_ILLEGAL_SORTAL_SPECIALIZATION = "br.ufes.inf.nemo.ontol.ufo.a.IllegalSortalSpecialization";
  
  public final static String UFO_A_ILLEGAL_RIGID_SPECIALIZATION = "br.ufes.inf.nemo.ontol.ufo.a.IllegalRigidSpecialization";
  
  public final static String NON_CONFORMANT_ASSIGNMENT = "br.ufes.inf.nemo.ontol.NonConformantAssigment";
  
  @Check(CheckType.FAST)
  public void callIsNameValid(final EntityDeclaration e) {
    ValidationError _isNameValid = this._linguisticRules.isNameValid(e);
    if (_isNameValid!=null) {
      this.runIssue(_isNameValid);
    }
  }
  
  @Check(CheckType.FAST)
  public void callDuplicatedEntityName(final EntityDeclaration e) {
    ValidationError _duplicatedEntityName = this._linguisticRules.duplicatedEntityName(e);
    if (_duplicatedEntityName!=null) {
      this.runIssue(_duplicatedEntityName);
    }
  }
  
  @Check(CheckType.FAST)
  public void calIsValidInstantiation(final EntityDeclaration e) {
    ValidationIssue _isValidInstantiation = this._linguisticRules.isValidInstantiation(e);
    if (_isValidInstantiation!=null) {
      this.runIssue(_isValidInstantiation);
    }
  }
  
  @Check(CheckType.FAST)
  public void callIsValidSpecialization(final ML2Class c) {
    ValidationError _isValidSpecialization = this._linguisticRules.isValidSpecialization(c);
    if (_isValidSpecialization!=null) {
      this.runIssue(_isValidSpecialization);
    }
  }
  
  @Check(CheckType.NORMAL)
  public void callHasCyclicSpecialization(final ML2Class c) {
    final Set<ML2Class> ch = this._mL2Util.classHierarchy(c);
    ValidationError _hasCyclicSpecialization = this._linguisticRules.hasCyclicSpecialization(c, ch);
    if (_hasCyclicSpecialization!=null) {
      this.runIssue(_hasCyclicSpecialization);
    }
  }
  
  @Check(CheckType.FAST)
  public void callHasValidCategorizedClass(final ML2Class c) {
    ValidationError _hasValidCategorizedClass = this._linguisticRules.hasValidCategorizedClass(c);
    if (_hasValidCategorizedClass!=null) {
      this.runIssue(_hasValidCategorizedClass);
    }
  }
  
  @Check(CheckType.FAST)
  public void callHasValidPowertypeRelation(final ML2Class c) {
    ValidationError _hasValidPowertypeRelation = this._linguisticRules.hasValidPowertypeRelation(c);
    if (_hasValidPowertypeRelation!=null) {
      this.runIssue(_hasValidPowertypeRelation);
    }
  }
  
  @Check(CheckType.FAST)
  public void callHasValidSubordinators(final ML2Class c) {
    ValidationError _hasValidSubordinators = this._linguisticRules.hasValidSubordinators(c);
    if (_hasValidSubordinators!=null) {
      this.runIssue(_hasValidSubordinators);
    }
  }
  
  @Check(CheckType.FAST)
  public void fastChecksOnDataTypes(final DataType d) {
    ValidationIssue _containsReferences = this._linguisticRules.containsReferences(d);
    if (_containsReferences!=null) {
      this.runIssue(_containsReferences);
    }
  }
  
  @Check(CheckType.FAST)
  public void fastChecksOnHOClass(final HOClass ho) {
    ValidationError _minOrder = this._mLTRules.minOrder(ho);
    if (_minOrder!=null) {
      this.runIssue(_minOrder);
    }
  }
  
  @Check(CheckType.FAST)
  public void fastChecksOnGeneralizationSet(final GeneralizationSet gs) {
    ValidationError _hasValidMembers = this._linguisticRules.hasValidMembers(gs);
    if (_hasValidMembers!=null) {
      this.runIssue(_hasValidMembers);
    }
  }
  
  @Check(CheckType.FAST)
  public void callCheckFeatureName(final Feature f) {
    ValidationError _checkFeatureName = this._linguisticRules.checkFeatureName(f);
    if (_checkFeatureName!=null) {
      this.runIssue(_checkFeatureName);
    }
  }
  
  @Check(CheckType.FAST)
  public void callCheckSubsettedMultiplicity(final Feature f) {
    ValidationIssue _checkSubsettedMultiplicity = this._linguisticRules.checkSubsettedMultiplicity(f);
    if (_checkSubsettedMultiplicity!=null) {
      this.runIssue(_checkSubsettedMultiplicity);
    }
  }
  
  @Check(CheckType.FAST)
  public void callCheckRegularityAndContainer(final Feature f) {
    ValidationIssue _checkRegularityAndContainer = this._linguisticRules.checkRegularityAndContainer(f);
    if (_checkRegularityAndContainer!=null) {
      this.runIssue(_checkRegularityAndContainer);
    }
  }
  
  @Check(CheckType.FAST)
  public void fastChecksOnFeatureAssignment(final FeatureAssignment fa) {
    ValidationIssue _checkMultiplicityAndAssignment = this._linguisticRules.checkMultiplicityAndAssignment(fa);
    if (_checkMultiplicityAndAssignment!=null) {
      this.runIssue(_checkMultiplicityAndAssignment);
    }
  }
  
  @Check(CheckType.NORMAL)
  public void callCheckFeatureAssignmentType(final FeatureAssignment fa) {
    ValidationIssue _checkFeatureAssignmentType = this._linguisticRules.checkFeatureAssignmentType(fa);
    if (_checkFeatureAssignmentType!=null) {
      this.runIssue(_checkFeatureAssignmentType);
    }
  }
  
  @Check(CheckType.NORMAL)
  public void callCheckRegularityFeatureConformance(final FeatureAssignment fa) {
    ValidationIssue _checkRegularityFeatureConformance = this._linguisticRules.checkRegularityFeatureConformance(fa);
    if (_checkRegularityFeatureConformance!=null) {
      this.runIssue(_checkRegularityFeatureConformance);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void callMissingInstantiationByCompleteness(final EntityDeclaration e) {
    final LinkedHashSet<ML2Class> iof = this._mL2Util.getAllInstantiatedClasses(e);
    ValidationIssue _missingInstantiationByCompleteness = this._linguisticRules.missingInstantiationByCompleteness(e, iof);
    if (_missingInstantiationByCompleteness!=null) {
      this.runIssue(_missingInstantiationByCompleteness);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void callIsInstanceOfDisjointClasses(final EntityDeclaration e) {
    final LinkedHashSet<ML2Class> iof = this._mL2Util.getAllInstantiatedClasses(e);
    ValidationIssue _isInstanceOfDisjointClasses = this._linguisticRules.isInstanceOfDisjointClasses(e, iof);
    if (_isInstanceOfDisjointClasses!=null) {
      this.runIssue(_isInstanceOfDisjointClasses);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void callIsMissingSpecializationThroughPowertype(final ML2Class c) {
    final Set<ML2Class> ch = this._mL2Util.classHierarchy(c);
    final LinkedHashSet<ML2Class> iof = this._mL2Util.getAllInstantiatedClasses(c);
    ValidationError _isMissingSpecializationThroughPowertype = this._mLTRules.isMissingSpecializationThroughPowertype(c, ch, iof);
    if (_isMissingSpecializationThroughPowertype!=null) {
      this.runIssue(_isMissingSpecializationThroughPowertype);
    }
  }
  
  @Check(CheckType.NORMAL)
  public void callObeysSubordination(final ML2Class c) {
    final Set<ML2Class> ch = this._mL2Util.classHierarchy(c);
    final LinkedHashSet<ML2Class> iof = this._mL2Util.getAllInstantiatedClasses(c);
    ValidationError _obeysSubordination = this._linguisticRules.obeysSubordination(c, ch, iof);
    if (_obeysSubordination!=null) {
      this.runIssue(_obeysSubordination);
    }
  }
  
  @Check(CheckType.NORMAL)
  public void callHasSimpleSubordinationCycle(final ML2Class c) {
    ValidationError _hasSimpleSubordinationCycle = this._linguisticRules.hasSimpleSubordinationCycle(c);
    if (_hasSimpleSubordinationCycle!=null) {
      this.runIssue(_hasSimpleSubordinationCycle);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void callIsSpecializingDisjointClasses(final ML2Class c) {
    final Set<ML2Class> ch = this._mL2Util.classHierarchy(c);
    ValidationIssue _isSpecializingDisjointClasses = this._linguisticRules.isSpecializingDisjointClasses(c, ch);
    if (_isSpecializingDisjointClasses!=null) {
      this.runIssue(_isSpecializingDisjointClasses);
    }
  }
  
  @Check(CheckType.NORMAL)
  public void callCheckInstantiatedRegularities(final ML2Class c) {
    ValidationIssue _checkInstantiatedRegularities = this._linguisticRules.checkInstantiatedRegularities(c);
    if (_checkInstantiatedRegularities!=null) {
      this.runIssue(_checkInstantiatedRegularities);
    }
  }
  
  private void _runIssue(final ValidationError issue) {
    final ValidationError it = issue;
    if (((((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null))) && (it.getIndex() != (-1))) && (!Objects.equal(it.getCode(), null)))) {
      String _message = it.getMessage();
      EObject _source = it.getSource();
      EStructuralFeature _feature = it.getFeature();
      int _index = it.getIndex();
      String _code = it.getCode();
      String[] _issueData = it.getIssueData();
      this.error(_message, _source, _feature, _index, _code, _issueData);
    } else {
      if ((((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null))) && (!Objects.equal(it.getCode(), null)))) {
        String _message_1 = it.getMessage();
        EObject _source_1 = it.getSource();
        EStructuralFeature _feature_1 = it.getFeature();
        String _code_1 = it.getCode();
        String[] _issueData_1 = it.getIssueData();
        this.error(_message_1, _source_1, _feature_1, _code_1, _issueData_1);
      } else {
        if ((((!Objects.equal(it.getFeature(), null)) && (it.getIndex() != (-1))) && (!Objects.equal(it.getCode(), null)))) {
          String _message_2 = it.getMessage();
          EStructuralFeature _feature_2 = it.getFeature();
          int _index_1 = it.getIndex();
          String _code_2 = it.getCode();
          String[] _issueData_2 = it.getIssueData();
          this.error(_message_2, _feature_2, _index_1, _code_2, _issueData_2);
        } else {
          if ((((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null))) && (it.getIndex() != (-1)))) {
            String _message_3 = it.getMessage();
            EObject _source_2 = it.getSource();
            EStructuralFeature _feature_3 = it.getFeature();
            int _index_2 = it.getIndex();
            this.error(_message_3, _source_2, _feature_3, _index_2);
          } else {
            if (((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null)))) {
              String _message_4 = it.getMessage();
              EObject _source_3 = it.getSource();
              EStructuralFeature _feature_4 = it.getFeature();
              this.error(_message_4, _source_3, _feature_4);
            } else {
              if (((!Objects.equal(it.getFeature(), null)) && (!Objects.equal(it.getCode(), null)))) {
                String _message_5 = it.getMessage();
                EStructuralFeature _feature_5 = it.getFeature();
                String _code_3 = it.getCode();
                String[] _issueData_3 = it.getIssueData();
                this.error(_message_5, _feature_5, _code_3, _issueData_3);
              } else {
                if (((!Objects.equal(it.getFeature(), null)) && (it.getIndex() != (-1)))) {
                  String _message_6 = it.getMessage();
                  EStructuralFeature _feature_6 = it.getFeature();
                  int _index_3 = it.getIndex();
                  this.error(_message_6, _feature_6, _index_3);
                } else {
                  if (((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null)))) {
                    String _message_7 = it.getMessage();
                    EStructuralFeature _feature_7 = it.getFeature();
                    this.error(_message_7, _feature_7);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  private void _runIssue(final ValidationWarning issue) {
    final ValidationWarning it = issue;
    if (((((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null))) && (it.getIndex() != (-1))) && (!Objects.equal(it.getCode(), null)))) {
      String _message = it.getMessage();
      EObject _source = it.getSource();
      EStructuralFeature _feature = it.getFeature();
      int _index = it.getIndex();
      String _code = it.getCode();
      String[] _issueData = it.getIssueData();
      this.warning(_message, _source, _feature, _index, _code, _issueData);
    } else {
      if ((((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null))) && (!Objects.equal(it.getCode(), null)))) {
        String _message_1 = it.getMessage();
        EObject _source_1 = it.getSource();
        EStructuralFeature _feature_1 = it.getFeature();
        String _code_1 = it.getCode();
        String[] _issueData_1 = it.getIssueData();
        this.warning(_message_1, _source_1, _feature_1, _code_1, _issueData_1);
      } else {
        if ((((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null))) && (it.getIndex() != (-1)))) {
          String _message_2 = it.getMessage();
          EObject _source_2 = it.getSource();
          EStructuralFeature _feature_2 = it.getFeature();
          int _index_1 = it.getIndex();
          this.warning(_message_2, _source_2, _feature_2, _index_1);
        } else {
          if (((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null)))) {
            String _message_3 = it.getMessage();
            EObject _source_3 = it.getSource();
            EStructuralFeature _feature_3 = it.getFeature();
            this.warning(_message_3, _source_3, _feature_3);
          } else {
            if ((((!Objects.equal(it.getFeature(), null)) && (it.getIndex() != (-1))) && (!Objects.equal(it.getCode(), null)))) {
              String _message_4 = it.getMessage();
              EStructuralFeature _feature_4 = it.getFeature();
              int _index_2 = it.getIndex();
              String _code_2 = it.getCode();
              String[] _issueData_2 = it.getIssueData();
              this.warning(_message_4, _feature_4, _index_2, _code_2, _issueData_2);
            } else {
              if (((!Objects.equal(it.getFeature(), null)) && (!Objects.equal(it.getCode(), null)))) {
                String _message_5 = it.getMessage();
                EStructuralFeature _feature_5 = it.getFeature();
                String _code_3 = it.getCode();
                String[] _issueData_3 = it.getIssueData();
                this.warning(_message_5, _feature_5, _code_3, _issueData_3);
              } else {
                if (((!Objects.equal(it.getFeature(), null)) && (it.getIndex() != (-1)))) {
                  String _message_6 = it.getMessage();
                  EStructuralFeature _feature_6 = it.getFeature();
                  int _index_3 = it.getIndex();
                  this.warning(_message_6, _feature_6, _index_3);
                } else {
                  if (((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null)))) {
                    String _message_7 = it.getMessage();
                    EStructuralFeature _feature_7 = it.getFeature();
                    this.warning(_message_7, _feature_7);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  private void runIssue(final ValidationIssue issue) {
    if (issue instanceof ValidationError) {
      _runIssue((ValidationError)issue);
      return;
    } else if (issue instanceof ValidationWarning) {
      _runIssue((ValidationWarning)issue);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(issue).toString());
    }
  }
}
