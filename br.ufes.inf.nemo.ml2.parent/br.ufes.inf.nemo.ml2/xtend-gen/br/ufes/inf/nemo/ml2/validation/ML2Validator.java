/**
 * generated by Xtext 2.10.0
 */
package br.ufes.inf.nemo.ml2.validation;

import br.ufes.inf.nemo.ml2.lib.ML2Lib;
import br.ufes.inf.nemo.ml2.meta.DataType;
import br.ufes.inf.nemo.ml2.meta.EntityDeclaration;
import br.ufes.inf.nemo.ml2.meta.FOClass;
import br.ufes.inf.nemo.ml2.meta.Feature;
import br.ufes.inf.nemo.ml2.meta.FeatureAssignment;
import br.ufes.inf.nemo.ml2.meta.GeneralizationSet;
import br.ufes.inf.nemo.ml2.meta.HOClass;
import br.ufes.inf.nemo.ml2.meta.ML2Class;
import br.ufes.inf.nemo.ml2.meta.MetaPackage;
import br.ufes.inf.nemo.ml2.util.ML2Util;
import br.ufes.inf.nemo.ml2.validation.AbstractML2Validator;
import br.ufes.inf.nemo.ml2.validation.LinguisticRules;
import br.ufes.inf.nemo.ml2.validation.MLTRules;
import br.ufes.inf.nemo.ml2.validation.UFORules;
import br.ufes.inf.nemo.ml2.validation.ValidationError;
import br.ufes.inf.nemo.ml2.validation.ValidationIssue;
import br.ufes.inf.nemo.ml2.validation.ValidationWarning;
import com.google.common.base.Objects;
import com.google.inject.Inject;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class ML2Validator extends AbstractML2Validator {
  @Inject
  @Extension
  private ML2Util _mL2Util;
  
  @Inject
  @Extension
  private ML2Lib _mL2Lib;
  
  @Inject
  @Extension
  private LinguisticRules _linguisticRules;
  
  @Inject
  @Extension
  private MLTRules _mLTRules;
  
  @Inject
  @Extension
  private UFORules _uFORules;
  
  public final static String INSTANTIATION_OF_DISJOINT_TYPES = "br.ufes.inf.nemo.ontol.InstantiationOfDisjointTypes";
  
  public final static String MISSING_COMPLETE_INSTANTIATION = "br.ufes.inf.nemo.ontol.MissingCompleteInstantiation";
  
  public final static String POWERTYPE_COMPLETE_SPECIALIZATION = "br.ufes.inf.nemo.ontol.PowertypeCompleteSpecialization";
  
  public final static String COMPLETE_CHARACTERIZATION_AND_COMPLETENESS = "br.ufes.inf.nemo.ontol.CompleteCharacterizationAndCompleteness";
  
  public final static String DISJOINT_CHARACTERIZATION_AND_DISJOINTNESS = "br.ufes.inf.nemo.ontol.DisjointCharacterizationAndDisjointness";
  
  public final static String MANDATORY_SPECIALIZATION_OF_ENDURANT = "br.ufes.inf.nemo.ontol.MandaorySpecializationOfEndurant";
  
  public final static String NONSORTAL_SPECIALIZING_SORTAL = "br.ufes.inf.nemo.ontol.NonSortalSpecializingSortal";
  
  public final static String RIGID_SPECIALIZING_ANTIRIGID = "br.ufes.inf.nemo.ontol.RigidSpecializingAntiRigid";
  
  public final static String SEMIRIGID_SPECIALIZING_ANTIRIGID = "br.ufes.inf.nemo.ontol.SemiRigidSpecializingAntiRigid";
  
  public final static String MULTIPLE_IDENTITIES = "br.ufes.inf.nemo.ontol.MultipleIdentities";
  
  public final static String MISSING_IDENTITY = "br.ufes.inf.nemo.ontol.MissingIdentity";
  
  public final static String NECESSARY_INSTANTIATION = "br.ufes.inf.nemo.ontol.NecessaryInstantiation";
  
  public final static String MISSING_SPECIALIZATION_TO_BASETYPE = "br.ufes.inf.nemo.ontol.MissingSpecializationToBasetype";
  
  public final static String UFO_A_MISSING_MUST_INSTANTIATION = "br.ufes.inf.nemo.ontol.ufo.a.MissingMustInstantiation";
  
  public final static String UFO_A_ILLEGAL_SORTAL_SPECIALIZATION = "br.ufes.inf.nemo.ontol.ufo.a.IllegalSortalSpecialization";
  
  public final static String UFO_A_ILLEGAL_RIGID_SPECIALIZATION = "br.ufes.inf.nemo.ontol.ufo.a.IllegalRigidSpecialization";
  
  public final static String NON_CONFORMANT_ASSIGNMENT = "br.ufes.inf.nemo.ontol.NonConformantAssigment";
  
  @Check(CheckType.FAST)
  public void fastChecksOnEntityDeclaration(final EntityDeclaration e) {
    boolean _isNameValid = this._linguisticRules.isNameValid(e);
    boolean _not = (!_isNameValid);
    if (_not) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Entity name must start with a capital letter.");
      this.error(_builder.toString(), 
        MetaPackage.eINSTANCE.getEntityDeclaration_Name(), 
        LinguisticRules.INVALID_ENTITY_DECLARATION_NAME);
    }
    boolean _duplicatedEntityName = this._linguisticRules.duplicatedEntityName(e);
    if (_duplicatedEntityName) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Entity name must be unique.");
      this.error(_builder_1.toString(), 
        MetaPackage.eINSTANCE.getEntityDeclaration_Name(), 
        LinguisticRules.DUPLICATED_ENTITY_NAME);
    }
  }
  
  @Check(CheckType.FAST)
  public void fastCheckOnClass(final ML2Class c) {
    final Set<ML2Class> ch = this._mL2Util.classHierarchy(c);
    boolean _isValidSpecialization = this._linguisticRules.isValidSpecialization(c);
    boolean _not = (!_isValidSpecialization);
    if (_not) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Invalid specialization.");
      this.error(_builder.toString(), 
        MetaPackage.eINSTANCE.getML2Class_SuperClasses(), 
        LinguisticRules.INVALID_CLASS_SPECIALIZATION);
    }
    boolean _hasCyclicSpecialization = this._linguisticRules.hasCyclicSpecialization(c, ch);
    if (_hasCyclicSpecialization) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Invalid cyclic specialization.");
      this.error(_builder_1.toString(), 
        MetaPackage.eINSTANCE.getML2Class_SuperClasses(), 
        LinguisticRules.CYCLIC_SPECIALIZATION);
    }
    boolean _hasValidCategorizedClass = this._linguisticRules.hasValidCategorizedClass(c);
    boolean _not_1 = (!_hasValidCategorizedClass);
    if (_not_1) {
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("Invalid basetype.");
      this.error(_builder_2.toString(), 
        MetaPackage.eINSTANCE.getML2Class_CategorizedClass(), 
        LinguisticRules.INVALID_CATEGORIZED_CLASS);
    }
    boolean _hasValidPowertypeRelation = this._linguisticRules.hasValidPowertypeRelation(c);
    boolean _not_2 = (!_hasValidPowertypeRelation);
    if (_not_2) {
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("Invalid powertype relation.");
      this.error(_builder_3.toString(), 
        MetaPackage.eINSTANCE.getML2Class_PowertypeOf(), 
        LinguisticRules.INVALID_POWERTYPE_RELATION);
    }
    boolean _hasValidSubordinators = this._linguisticRules.hasValidSubordinators(c);
    boolean _not_3 = (!_hasValidSubordinators);
    if (_not_3) {
      StringConcatenation _builder_4 = new StringConcatenation();
      _builder_4.append("Invalid subordinator.");
      this.error(_builder_4.toString(), 
        MetaPackage.eINSTANCE.getML2Class_Subordinators(), 
        LinguisticRules.INVALID_SUBORDINATOR);
    }
  }
  
  @Check(CheckType.FAST)
  public void fastChecksOnDataTypes(final DataType d) {
    ValidationIssue _containsReferences = this._linguisticRules.containsReferences(d);
    if (_containsReferences!=null) {
      this.runIssue(_containsReferences);
    }
  }
  
  @Check(CheckType.FAST)
  public void fastChecksOnHOClass(final HOClass ho) {
    boolean _minOrder = this._mLTRules.minOrder(ho);
    boolean _not = (!_minOrder);
    if (_not) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Order must be of ");
      _builder.append(MLTRules.MIN_ORDER);
      _builder.append(" or greater.");
      this.error(_builder.toString(), 
        MetaPackage.eINSTANCE.getHOClass_Order(), 
        MLTRules.INVALID_HO_CLASS_ORDER);
    }
  }
  
  @Check(CheckType.FAST)
  public void fastChecksOnGeneralizationSet(final GeneralizationSet gs) {
    boolean _hasValidMembers = this._linguisticRules.hasValidMembers(gs);
    boolean _not = (!_hasValidMembers);
    if (_not) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("This generalization set has invalid members.");
      this.error(_builder.toString(), 
        MetaPackage.eINSTANCE.getGeneralizationSet_Name(), 
        LinguisticRules.INVALID_GENERALIZATION_SET_MEMBERS);
    }
  }
  
  @Check(CheckType.FAST)
  public void fastChecksOnFeature(final Feature f) {
    ValidationIssue _checkSubsettedMultiplicity = this._linguisticRules.checkSubsettedMultiplicity(f);
    if (_checkSubsettedMultiplicity!=null) {
      this.runIssue(_checkSubsettedMultiplicity);
    }
    ValidationIssue _checkRegularityAndContainer = this._linguisticRules.checkRegularityAndContainer(f);
    if (_checkRegularityAndContainer!=null) {
      this.runIssue(_checkRegularityAndContainer);
    }
  }
  
  @Check(CheckType.FAST)
  public void fastChecksOnFeatureAssignment(final FeatureAssignment fa) {
    ValidationIssue _checkMultiplicityAndAssignment = this._linguisticRules.checkMultiplicityAndAssignment(fa);
    if (_checkMultiplicityAndAssignment!=null) {
      this.runIssue(_checkMultiplicityAndAssignment);
    }
  }
  
  @Check(CheckType.NORMAL)
  public void normalChecksOnFeatureAssignment(final FeatureAssignment fa) {
    ValidationIssue _checkFeatureAssignmentType = this._linguisticRules.checkFeatureAssignmentType(fa);
    if (_checkFeatureAssignmentType!=null) {
      this.runIssue(_checkFeatureAssignmentType);
    }
    ValidationIssue _checkRegularityFeatureConformance = this._linguisticRules.checkRegularityFeatureConformance(fa);
    if (_checkRegularityFeatureConformance!=null) {
      this.runIssue(_checkRegularityFeatureConformance);
    }
  }
  
  @Check(CheckType.NORMAL)
  public void normalChecksOnEntity(final EntityDeclaration e) {
    final LinkedHashSet<ML2Class> iof = this._mL2Util.getAllInstantiatedClasses(e);
    ValidationIssue _isInstanceOfDisjointClasses = this._linguisticRules.isInstanceOfDisjointClasses(e, iof);
    if (_isInstanceOfDisjointClasses!=null) {
      this.runIssue(_isInstanceOfDisjointClasses);
    }
    ValidationIssue _missingInstantiationByCompleteness = this._linguisticRules.missingInstantiationByCompleteness(e, iof);
    if (_missingInstantiationByCompleteness!=null) {
      this.runIssue(_missingInstantiationByCompleteness);
    }
  }
  
  @Check(CheckType.NORMAL)
  public void normalChecksOnClass(final ML2Class c) {
    final Set<ML2Class> ch = this._mL2Util.classHierarchy(c);
    final LinkedHashSet<ML2Class> iof = this._mL2Util.getAllInstantiatedClasses(c);
    boolean _isMissingSpecializationThroughPowertype = this._mLTRules.isMissingSpecializationThroughPowertype(c, ch);
    if (_isMissingSpecializationThroughPowertype) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Missing specialization through powertype relation.");
      this.error(_builder.toString(), 
        MetaPackage.eINSTANCE.getML2Class_SuperClasses(), MLTRules.MISSING_SPECIALIZATION_THROUGH_POWERTYPE);
    }
    boolean _obeysSubordination = this._linguisticRules.obeysSubordination(c, ch, iof);
    boolean _not = (!_obeysSubordination);
    if (_not) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Missing specialization through subordination.");
      this.error(_builder_1.toString(), MetaPackage.eINSTANCE.getML2Class_SuperClasses(), 
        LinguisticRules.MISSING_SPECIALIZATION_THROUGH_SUBODINATION);
    }
    boolean _hasSimpleSubordinationCycle = this._linguisticRules.hasSimpleSubordinationCycle(c);
    if (_hasSimpleSubordinationCycle) {
      StringConcatenation _builder_2 = new StringConcatenation();
      String _name = c.getName();
      _builder_2.append(_name);
      _builder_2.append(" is in a subordination cycle.");
      this.error(_builder_2.toString(), MetaPackage.eINSTANCE.getML2Class_Subordinators(), 
        LinguisticRules.SIMPLE_SUBORDINATION_CYCLE);
    }
    ValidationIssue _isSpecializingDisjointClasses = this._linguisticRules.isSpecializingDisjointClasses(c, ch);
    if (_isSpecializingDisjointClasses!=null) {
      this.runIssue(_isSpecializingDisjointClasses);
    }
    ValidationIssue _checkInstantiatedRegularities = this._linguisticRules.checkInstantiatedRegularities(c);
    if (_checkInstantiatedRegularities!=null) {
      this.runIssue(_checkInstantiatedRegularities);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void expensiveChecksOnFOClass(final FOClass c) {
    final Set<ML2Class> ch = this._mL2Util.classHierarchy(((ML2Class) c));
    final LinkedHashSet<ML2Class> iof = this._mL2Util.getAllInstantiatedClasses(((ML2Class) c));
    final ML2Class endurant = this._mL2Lib.getUFOEndurant(c);
    final Set<ML2Class> mustInstantiate = this._mL2Lib.getUFOMustInstantiateClasses(c);
    final ML2Class mixinclass = this._mL2Lib.getLibClass(c, ML2Lib.UFO_MIXIN_CLASS);
    final ML2Class rigidclass = this._mL2Lib.getLibClass(c, ML2Lib.UFO_RIGID_CLASS);
    final ML2Class semirigidclass = this._mL2Lib.getLibClass(c, ML2Lib.UFO_SEMI_RIGID_CLASS);
    ValidationIssue _mustInstantiateUFOMetaproperties = this._uFORules.mustInstantiateUFOMetaproperties(c, ch, iof, endurant, mustInstantiate);
    if (_mustInstantiateUFOMetaproperties!=null) {
      this.runIssue(_mustInstantiateUFOMetaproperties);
    }
    ValidationIssue _checkSpecializationAndSortality = this._uFORules.checkSpecializationAndSortality(c, ch, iof, mixinclass);
    if (_checkSpecializationAndSortality!=null) {
      this.runIssue(_checkSpecializationAndSortality);
    }
    ValidationIssue _checkSpecializationAndRigidity = this._uFORules.checkSpecializationAndRigidity(c, ch, iof, rigidclass, semirigidclass);
    if (_checkSpecializationAndRigidity!=null) {
      this.runIssue(_checkSpecializationAndRigidity);
    }
  }
  
  private void _runIssue(final ValidationError issue) {
    final ValidationError it = issue;
    if (((((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null))) && (it.getIndex() != (-1))) && (!Objects.equal(it.getCode(), null)))) {
      this.error(it.getMessage(), it.getSource(), it.getFeature(), it.getIndex(), it.getCode(), it.getIssueData());
    } else {
      if ((((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null))) && (!Objects.equal(it.getCode(), null)))) {
        this.error(it.getMessage(), it.getSource(), it.getFeature(), it.getCode(), it.getIssueData());
      } else {
        if ((((!Objects.equal(it.getFeature(), null)) && (it.getIndex() != (-1))) && (!Objects.equal(it.getCode(), null)))) {
          this.error(it.getMessage(), it.getFeature(), it.getIndex(), it.getCode(), it.getIssueData());
        } else {
          if ((((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null))) && (it.getIndex() != (-1)))) {
            this.error(it.getMessage(), it.getSource(), it.getFeature(), it.getIndex());
          } else {
            if (((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null)))) {
              this.error(it.getMessage(), it.getSource(), it.getFeature());
            } else {
              if (((!Objects.equal(it.getFeature(), null)) && (!Objects.equal(it.getCode(), null)))) {
                this.error(it.getMessage(), it.getFeature(), it.getCode(), it.getIssueData());
              } else {
                if (((!Objects.equal(it.getFeature(), null)) && (it.getIndex() != (-1)))) {
                  this.error(it.getMessage(), it.getFeature(), it.getIndex());
                } else {
                  if (((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null)))) {
                    this.error(it.getMessage(), it.getFeature());
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  private void _runIssue(final ValidationWarning issue) {
    final ValidationWarning it = issue;
    if (((((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null))) && (it.getIndex() != (-1))) && (!Objects.equal(it.getCode(), null)))) {
      this.warning(it.getMessage(), it.getSource(), it.getFeature(), it.getIndex(), it.getCode(), it.getIssueData());
    } else {
      if ((((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null))) && (!Objects.equal(it.getCode(), null)))) {
        this.warning(it.getMessage(), it.getSource(), it.getFeature(), it.getCode(), it.getIssueData());
      } else {
        if ((((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null))) && (it.getIndex() != (-1)))) {
          this.warning(it.getMessage(), it.getSource(), it.getFeature(), it.getIndex());
        } else {
          if (((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null)))) {
            this.warning(it.getMessage(), it.getSource(), it.getFeature());
          } else {
            if ((((!Objects.equal(it.getFeature(), null)) && (it.getIndex() != (-1))) && (!Objects.equal(it.getCode(), null)))) {
              this.warning(it.getMessage(), it.getFeature(), it.getIndex(), it.getCode(), it.getIssueData());
            } else {
              if (((!Objects.equal(it.getFeature(), null)) && (!Objects.equal(it.getCode(), null)))) {
                this.warning(it.getMessage(), it.getFeature(), it.getCode(), it.getIssueData());
              } else {
                if (((!Objects.equal(it.getFeature(), null)) && (it.getIndex() != (-1)))) {
                  this.warning(it.getMessage(), it.getFeature(), it.getIndex());
                } else {
                  if (((!Objects.equal(it.getSource(), null)) && (!Objects.equal(it.getFeature(), null)))) {
                    this.warning(it.getMessage(), it.getFeature());
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  private void runIssue(final ValidationIssue issue) {
    if (issue instanceof ValidationError) {
      _runIssue((ValidationError)issue);
      return;
    } else if (issue instanceof ValidationWarning) {
      _runIssue((ValidationWarning)issue);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(issue).toString());
    }
  }
}
