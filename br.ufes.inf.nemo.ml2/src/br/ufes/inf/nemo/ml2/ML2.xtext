grammar br.ufes.inf.nemo.ml2.ML2 with org.eclipse.xtext.common.Terminals

generate model "http://www.ufes.br/inf/nemo/ml2"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	'module' name=QualifiedName 
	'{'
		( 'include' includes+=[Model|QualifiedName] ';' | elements+=ModelElement )*
	'}'
;

QualifiedName:
	ID ('.' ID)*
;

QualifiedNameWithWildcard:
	QualifiedName '.*'?
;

Import:
	'import' importedNamespace = QualifiedNameWithWildcard
;
	
ModelElement:
	( Import | EntityDeclaration | GeneralizationSet ) ';' 
;

AllModelElements returns ModelElement:
	( Import | EntityDeclaration | GeneralizationSet | Feature | FeatureAssignment )
;
	
EntityDeclaration:
	Class | Individual 
;

Class:
	( FirstOrderClassOrDataType | HigherOrderClass ) 
;

FirstOrderClassOrDataType returns FirstOrderClass:
	( FirstOrderClass | DataType ) 
;

HigherOrderClass:
	( HighOrderClass | OrderlessClass ) 
;

Individual:
	'individual' name=ID
	':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])*
	( '{' assignments+=FeatureAssignment* '}' )? 
;

// ParserRule used to enforce specialization only
ClassIntoOrderedOrOrderless returns Class:
	OrderlessClass | OrderedClass
;

// ParserRule used to enforce specialization only
OrderedClass:
	HighOrderClass | FirstOrderClass
;

FirstOrderClass returns FirstOrderClass:
	'class' name=ID 
	(':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])*) ?
	('specializes' superClasses+=[Class|QualifiedName] (',' superClasses+=[Class|QualifiedName])*) ? 
	('{' ( assignments+=FeatureAssignment | features+=Feature )* '}')?
;

DataType returns DataType:
	'datatype' name=ID 
	(':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])*) ?
	('specializes' superClasses+=[Class|QualifiedName] (',' superClasses+=[Class|QualifiedName])*) ? 
	('{' ( assignments+=FeatureAssignment | features+=Feature )* '}')?
;

HighOrderClass:
	'order' order=INT 'class' name=ID 
	(':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])*) ?
	('specializes' superClasses+=[Class|QualifiedName] (',' superClasses+=[Class|QualifiedName])*) ?
	('subordinatedTo' subordinators+=[HigherOrderClass|QualifiedName]  (',' subordinators+=[HigherOrderClass|QualifiedName])*) ?
	( categorizationType=CategorizationType categorizedClass=[Class|QualifiedName] | 'isPowertypeOf' powertypeOf=[Class|QualifiedName] ) ?
	('{' ( assignments+=FeatureAssignment | features+=Feature )* '}')?
; 

OrderlessClass:
	'orderless' 'class' name=ID 
	(':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])*) ?
	('specializes' superClasses+=[Class|QualifiedName] (',' superClasses+=[Class|QualifiedName])*) ?
	('subordinatedTo' subordinators+=[HigherOrderClass|QualifiedName]  (',' subordinators+=[HigherOrderClass|QualifiedName])*) ?
	( categorizationType=CategorizationType categorizedClass=[Class|QualifiedName] | 'isPowertypeOf' powertypeOf=[Class|QualifiedName] ) ?
	('{' ( assignments+=FeatureAssignment | features+=Feature )* '}')?
;

enum CategorizationType:
	CATEGORIZER='categorizes' 
	| COMPLETE_CATEGORIZER='completeCategorizes' 
	| DISJOINT_CATEGORIZER='disjointCategorizes' 
	| PARTITIONER='partitions'
;

GeneralizationSet:
	(isDisjoint?='disjoint'? & isComplete?='complete'?) 'genset' (name=ID)? 
	'general' general=[Class|QualifiedName]
	('categorizer' categorizer=[HigherOrderClass|QualifiedName])? 
	'specifics' specifics+=[Class|QualifiedName] (',' specifics+=[Class|QualifiedName])+ 
;

Feature:
	Attribute | Reference
;

Attribute:
	RegularityAttribute |
	'att'? name=ID ':' 
		('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']') ? 
		(primitiveType=PrimitiveType | _type=[DataType|QualifiedName])
		('subsets' subsetOf+=[Attribute|QualifiedName] (',' subsetOf+=[Attribute|QualifiedName])* ) ? 
;

RegularityAttribute:
	'regularity'? 'att'? name=ID ':' 
		('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']') ? 
		(primitiveType=PrimitiveType | _type=[DataType|QualifiedName])
		('subsets' subsetOf+=[Attribute|QualifiedName] (',' subsetOf+=[Attribute|QualifiedName])* ) ?
		regularityType=RegularityFeatureType regulates=[Attribute|QualifiedName] 
;

Reference:
	RegularityReference |
	'ref' name=ID ':' 
		('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')?
		_type=[Class|QualifiedName]
		('subsets' subsetOf+=[Reference|QualifiedName] (',' subsetOf+=[Reference|QualifiedName])*) ?
		('isOppositeTo' oppositeTo=[Reference|QualifiedName])? 
;

RegularityReference:
	'regularity'? 'ref' name=ID ':' 
		('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')?
		_type=[Class|QualifiedName]
		('subsets' subsetOf+=[Reference|QualifiedName] (',' subsetOf+=[Reference|QualifiedName])*) ?
		('isOppositeTo' oppositeTo=[Reference|QualifiedName])?
		regularityType=RegularityFeatureType regulates=[Reference|QualifiedName]
;

// ParserRule used to enforce specialization only
FeatureIntoRegularityFeature returns Feature:
	RegularityFeature
;

// ParserRule used to enforce specialization only
RegularityFeature:
	RegularityAttribute | RegularityReference
;

CARDINALITY returns ecore::EInt:
	'*' | INT
;
	
enum PrimitiveType returns PrimitiveType:
	STRING='String' 
	| NUMBER='Number'
	| BOOLEAN='Boolean' 
;


enum RegularityFeatureType:
	DETERMINES_MAX_VALUE="determinesMaxValue"
	| DETERMINES_MIN_VALUE="determinesMinValue"
	| DETERMINES_VALUE="determinesValue"
	| DETERMINES_ALLOWED_VALUES="determinesAllowedValues"
	| DETERMINES_TYPE="determinesType"
	| DETERMINES_ALLOWED_TYPES="determinesAllowedTypes"
;

FeatureAssignment:
	SingleReferenceAssignment 
	| MultipleReferenceAssignment
	| SingleAttributeAssignment 
	| MultipleAttributeAssignment 
;

SingleReferenceAssignment returns ReferenceAssignment:
	'ref' reference=[Reference|QualifiedName] '=' values+=[EntityDeclaration|QualifiedName]
;

MultipleReferenceAssignment returns ReferenceAssignment:
	'ref' reference=[Reference|QualifiedName] '=' 
	'{' 
		values+=[EntityDeclaration|QualifiedName] (',' values+=[EntityDeclaration|QualifiedName])* 
	'}'
;

SingleAttributeAssignment returns AttributeAssignment: 
	'att'? attribute=[Attribute|QualifiedName] '='
	( 
		stringValues+=STRING
		| numberValues+=NUMBER
		| booleanValues+=BOOLEAN 
		| datatypeValues+=[Individual|QualifiedName]
		| unnamedValues+=UnnamedIndividual
	)
;

MultipleAttributeAssignment returns AttributeAssignment: 
	'att'? attribute=[Attribute|QualifiedName] '=' 
	'{' 
		(( 
			stringValues+=STRING
			| numberValues+=NUMBER
			| booleanValues+=BOOLEAN 
			| datatypeValues+=[Individual|QualifiedName] 
			| unnamedValues+=UnnamedIndividual
		)(
			',' stringValues+=STRING
			| ',' numberValues+=NUMBER
			| ',' booleanValues+=BOOLEAN 
			| ',' datatypeValues+=[Individual|QualifiedName]
			| ',' unnamedValues+=UnnamedIndividual
		)*)
	'}'
;

BOOLEAN returns ecore::EBooleanObject:
	'true' | 'false'
;

NUMBER returns ecore::EDoubleObject:
	'-'? INT ( '.' INT )? 
;

UnnamedIndividual returns Individual:
	{Individual} '[' assignments+=SimpleAttributeAssignment* ']' 
;

SimpleAttributeAssignment returns AttributeAssignment:
	SingleSimpleAttributeAssignment
	| MultipleSimpleAttributeAssignment
;

SingleSimpleAttributeAssignment returns AttributeAssignment:
	attribute=[Attribute|QualifiedName] '='
	(
		stringValues+=STRING
		| numberValues+=NUMBER
		| booleanValues+=BOOLEAN
		| datatypeValues+=[Individual|QualifiedName]
		| unnamedValues+=UnnamedIndividual
	) 
;

MultipleSimpleAttributeAssignment returns AttributeAssignment:
	attribute=[Attribute|QualifiedName] '='
	'{' 
		(( 
			stringValues+=STRING
			| numberValues+=NUMBER
			| booleanValues+=BOOLEAN 
			| datatypeValues+=[Individual|QualifiedName] 
			| unnamedValues+=UnnamedIndividual
		)(
			',' stringValues+=STRING
			| ',' numberValues+=NUMBER
			| ',' booleanValues+=BOOLEAN
			| ',' datatypeValues+=[Individual|QualifiedName]
			| ',' unnamedValues+=UnnamedIndividual
		)*)
	'}'
;

ConstraintDeclaration returns Constraint:
	InvariantConstraint | DerivationConstraint
;

InvariantConstraint:
	'context' (contextAlias=ID ':')? classContext=[Class]
	'inv' (invariantAlias=ID)? ':' expression=OclExpression
;

DerivationConstraint:
	'context' classContext=[Class] '::' featureContext=[Feature] ':' typename=TypeLiteralExpression
	'derive' ':' expression=OclExpression
;

OclExpression:
	LetExpression | IfExpression | ImpliesExpression
;

LetExpression:
	'let' variables+=VariableDeclaration (',' variables+=VariableDeclaration)* 
	'in' inExpression=OclExpression
;
	
VariableDeclaration:
	variableName=ID ':' variableType=TypeLiteralExpression '=' initialValue=LiteralExpression
;
	
IfExpression:
	'if' condition=OclExpression 'then'
		thenExpression=OclExpression
	'else' 
		elseExpression=OclExpression
	'endif'
;

ImpliesExpression:
	left=XorExpression ('implies' right+=XorExpression)*
;
	
XorExpression:
	left=OrExpression ('xor' right+=OrExpression)*
;
	
OrExpression:
	left=AndExpression ('or' right+=AndExpression)*
;
	
AndExpression:
	left=ComparisonExpression ('and' right+=ComparisonExpression)*
;

ComparisonExpression:
	left=RelationalExpression (right+=ComparisonOperation)*
;
	
ComparisonOperation:
	operator=ComparisonOperator right=RelationalExpression
;

enum ComparisonOperator:
	EQUAL='=' | NOT_EQUAL='<>'
;

RelationalExpression:
	left=AdditionExpression (right+=RelationalOperation)*
;

RelationalOperation:
	operator=RelationalOperator right=AdditionExpression
;

enum RelationalOperator:
	GREATER='>' | LESS='<' | GREATER_EQUAL='>=' | LESS_EQUAL='<='
;

AdditionExpression:
	left=MultiplicationExpression (right+=AdditionOperation)*
;
	
AdditionOperation:
	operator=AdditionOperator right=MultiplicationExpression
;

enum AdditionOperator:
	PLUS='+' | MINUS='-'
;
	
MultiplicationExpression:
	left=UnaryExpression ('*' right+=UnaryExpression)*
;	

UnaryExpression:
	(operator=UnaryOperator)? right=TermExpression
;	

enum UnaryOperator:
	NONE | NOT='not' | MINUS='-'
;

TermExpression:
	=> CallExpression | LiteralExpression | '(' OclExpression ')'
;

CallExpression:
	left=VariableExpression (right+=CallOperation)*
;
	
CallOperation:
	DotOperation | ArrowOperation
;
	
DotOperation:
	'.' right=VariableExpression
;

ArrowOperation:
	'->' right=BuiltInOperation
;
	
BuiltInOperation:
	UnarySetOperation | BinarySetOperation | UnaryIteration | BinaryIteration
;
	
UnarySetOperation:
	operator=UnarySetOperator '(' ')'
;
	
enum UnarySetOperator:
	SIZE='size' | IS_EMPTY='isEmpty' | NOT_EMPTY='notEmpty' | SUM='sum'
;
	
BinarySetOperation:
	operator=BinarySetOperator '(' argument=OclExpression ')'
;
	
enum BinarySetOperator:
	INCLUDES='includes' | INCLUDES_ALL='includesAll' | EXCLUDES='excludes' | EXCLUDES_ALL='excludesAll' |
	INCLUDING='including' | EXCLUDING='excluding' |	UNION='union' | INTERSECTION='intersection' |
	SYMMETRIC_DIFFERENCE='symmetricDifference'
;

UnaryIteration:
	iterator=UnaryIterator '(' (variables+=ID '|')? body=OclExpression ')'
;
	
enum UnaryIterator:
	COUNT='count' | EXISTS='exists' | SELECT='select' | REJECT='reject' | ONE='one' | IS_UNIQUE='isUnique' | COLLECT='collect'
;
	
BinaryIteration:
	'forAll' '(' (variables+=ID ',' variables+=ID '|')? body=OclExpression ')'
;

LiteralExpression:
	PrimitiveLiteralExpression | CollectionLiteralExpression | TypeLiteralExpression | TupleLiteralExpression
;

PrimitiveLiteralExpression:
	NullLiteralExpression | BooleanLiteralExpression | NumberLiteralExpression | StringLiteralExpression
;

NullLiteralExpression:
	nullSymbol='null'
;

BooleanLiteralExpression:
	booleanSymbol=BOOLEAN_LITERAL
;

NumberLiteralExpression:
	numberSymbol=NUMBER_LITERAL
;

StringLiteralExpression:
	stringSymbol=STRING
;

//TODO: LiteralExpression cannot be a collection here
CollectionLiteralExpression:
	'Set' '{' parts+=LiteralExpression (',' parts+=LiteralExpression)* '}'
;

TypeLiteralExpression:
	PrimitiveTypeName | CollectionTypeName | TupleTypeName | OclTypeName | DataTypeName
;

//TODO: review
TupleLiteralExpression:
	'Tuple' '{' variables+=ID (',' variables+=ID)* '}'
;

VariableExpression:
	referringVariable=ID | referringVariable='self'
;

BOOLEAN_LITERAL returns ecore::EBoolean:
	'true' | 'false'
;

NUMBER_LITERAL returns ecore::EDouble:
	INT ( '.' INT )?
;

PrimitiveTypeName:
	typename='Boolean' | typename='Number' | typename='String'
;

CollectionTypeName:
	typename='Set' '(' elementType=TypeLiteralExpression ')'
;

//TODO: review
TupleTypeName:
	typename='Tuple' '(' (variables+=ID (',' variables+=ID)*)? ')'
;

OclTypeName:
	typename='OclAny' | typename='OclVoid'
;

// TODO
DataTypeName:
	typename=[DataType]
;
