/**
 * generated by Xtext 2.21.0
 */
package br.ufes.inf.nemo.ml2;

import br.ufes.inf.nemo.ml2.AbstractML2RuntimeModule;
import br.ufes.inf.nemo.ml2.generator.ML2OutputConfigurationProvider;
import br.ufes.inf.nemo.ml2.scoping.ML2ImportedNamespaceAwareLocalScopeProvider;
import br.ufes.inf.nemo.ml2.util.ML2ValueConverter;
import com.google.inject.Binder;
import com.google.inject.Singleton;
import com.google.inject.name.Names;
import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.generator.IOutputConfigurationProvider;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
@SuppressWarnings("all")
public class ML2RuntimeModule extends AbstractML2RuntimeModule {
  @Override
  public Class<? extends IValueConverterService> bindIValueConverterService() {
    return ML2ValueConverter.class;
  }
  
  @Override
  public void configureIScopeProviderDelegate(final Binder binder) {
    binder.<IScopeProvider>bind(IScopeProvider.class).annotatedWith(Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE)).to(ML2ImportedNamespaceAwareLocalScopeProvider.class);
  }
  
  @Override
  public void configure(final Binder binder) {
    super.configure(binder);
    binder.<IOutputConfigurationProvider>bind(IOutputConfigurationProvider.class).to(ML2OutputConfigurationProvider.class).in(Singleton.class);
  }
}
