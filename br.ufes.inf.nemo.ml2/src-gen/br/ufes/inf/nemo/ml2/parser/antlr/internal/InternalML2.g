/*
 * generated by Xtext 2.21.0
 */
grammar InternalML2;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package br.ufes.inf.nemo.ml2.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package br.ufes.inf.nemo.ml2.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import br.ufes.inf.nemo.ml2.services.ML2GrammarAccess;

}

@parser::members {

 	private ML2GrammarAccess grammarAccess;

    public InternalML2Parser(TokenStream input, ML2GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected ML2GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='module'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelAccess().getModuleKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"br.ufes.inf.nemo.ml2.ML2.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				otherlv_3='include'
				{
					newLeafNode(otherlv_3, grammarAccess.getModelAccess().getIncludeKeyword_3_0_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getModelRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getModelAccess().getIncludesModelCrossReference_3_0_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_5=';'
				{
					newLeafNode(otherlv_5, grammarAccess.getModelAccess().getSemicolonKeyword_3_0_2());
				}
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getElementsModelElementParserRuleCall_3_1_0());
					}
					lv_elements_6_0=ruleModelElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"elements",
							lv_elements_6_0,
							"br.ufes.inf.nemo.ml2.ML2.ModelElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); }
	iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard
	{ $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }
	EOF;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0());
		}
		this_QualifiedName_0=ruleQualifiedName
		{
			$current.merge(this_QualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0());
				}
				lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportRule());
					}
					set(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"br.ufes.inf.nemo.ml2.ML2.QualifiedNameWithWildcard");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleModelElement
entryRuleModelElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelElementRule()); }
	iv_ruleModelElement=ruleModelElement
	{ $current=$iv_ruleModelElement.current; }
	EOF;

// Rule ModelElement
ruleModelElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelElementAccess().getImportParserRuleCall_0_0());
			}
			this_Import_0=ruleImport
			{
				$current = $this_Import_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getModelElementAccess().getEntityDeclarationParserRuleCall_0_1());
			}
			this_EntityDeclaration_1=ruleEntityDeclaration
			{
				$current = $this_EntityDeclaration_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getModelElementAccess().getGeneralizationSetParserRuleCall_0_2());
			}
			this_GeneralizationSet_2=ruleGeneralizationSet
			{
				$current = $this_GeneralizationSet_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getModelElementAccess().getConstraintDeclarationParserRuleCall_0_3());
			}
			this_ConstraintDeclaration_3=ruleConstraintDeclaration
			{
				$current = $this_ConstraintDeclaration_3.current;
				afterParserOrEnumRuleCall();
			}
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getModelElementAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleEntityDeclaration
entryRuleEntityDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityDeclarationRule()); }
	iv_ruleEntityDeclaration=ruleEntityDeclaration
	{ $current=$iv_ruleEntityDeclaration.current; }
	EOF;

// Rule EntityDeclaration
ruleEntityDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEntityDeclarationAccess().getClassParserRuleCall_0());
		}
		this_Class_0=ruleClass
		{
			$current = $this_Class_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEntityDeclarationAccess().getIndividualParserRuleCall_1());
		}
		this_Individual_1=ruleIndividual
		{
			$current = $this_Individual_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	iv_ruleClass=ruleClass
	{ $current=$iv_ruleClass.current; }
	EOF;

// Rule Class
ruleClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getClassAccess().getFirstOrderClassOrDataTypeParserRuleCall_0());
		}
		this_FirstOrderClassOrDataType_0=ruleFirstOrderClassOrDataType
		{
			$current = $this_FirstOrderClassOrDataType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getClassAccess().getHigherOrderClassParserRuleCall_1());
		}
		this_HigherOrderClass_1=ruleHigherOrderClass
		{
			$current = $this_HigherOrderClass_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFirstOrderClassOrDataType
entryRuleFirstOrderClassOrDataType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFirstOrderClassOrDataTypeRule()); }
	iv_ruleFirstOrderClassOrDataType=ruleFirstOrderClassOrDataType
	{ $current=$iv_ruleFirstOrderClassOrDataType.current; }
	EOF;

// Rule FirstOrderClassOrDataType
ruleFirstOrderClassOrDataType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFirstOrderClassOrDataTypeAccess().getFirstOrderClassParserRuleCall_0());
		}
		this_FirstOrderClass_0=ruleFirstOrderClass
		{
			$current = $this_FirstOrderClass_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFirstOrderClassOrDataTypeAccess().getDataTypeParserRuleCall_1());
		}
		this_DataType_1=ruleDataType
		{
			$current = $this_DataType_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleHigherOrderClass
entryRuleHigherOrderClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHigherOrderClassRule()); }
	iv_ruleHigherOrderClass=ruleHigherOrderClass
	{ $current=$iv_ruleHigherOrderClass.current; }
	EOF;

// Rule HigherOrderClass
ruleHigherOrderClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getHigherOrderClassAccess().getHighOrderClassParserRuleCall_0());
		}
		this_HighOrderClass_0=ruleHighOrderClass
		{
			$current = $this_HighOrderClass_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getHigherOrderClassAccess().getOrderlessClassParserRuleCall_1());
		}
		this_OrderlessClass_1=ruleOrderlessClass
		{
			$current = $this_OrderlessClass_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIndividual
entryRuleIndividual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndividualRule()); }
	iv_ruleIndividual=ruleIndividual
	{ $current=$iv_ruleIndividual.current; }
	EOF;

// Rule Individual
ruleIndividual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='individual'
		{
			newLeafNode(otherlv_0, grammarAccess.getIndividualAccess().getIndividualKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getIndividualAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIndividualRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getIndividualAccess().getColonKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIndividualRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getIndividualAccess().getClassifiersClassCrossReference_3_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getIndividualAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIndividualRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getIndividualAccess().getClassifiersClassCrossReference_4_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_6='{'
			{
				newLeafNode(otherlv_6, grammarAccess.getIndividualAccess().getLeftCurlyBracketKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIndividualAccess().getAssignmentsFeatureAssignmentParserRuleCall_5_1_0());
					}
					lv_assignments_7_0=ruleFeatureAssignment
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIndividualRule());
						}
						add(
							$current,
							"assignments",
							lv_assignments_7_0,
							"br.ufes.inf.nemo.ml2.ML2.FeatureAssignment");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_8='}'
			{
				newLeafNode(otherlv_8, grammarAccess.getIndividualAccess().getRightCurlyBracketKeyword_5_2());
			}
		)?
	)
;

// Entry rule entryRuleOrderedClass
entryRuleOrderedClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrderedClassRule()); }
	iv_ruleOrderedClass=ruleOrderedClass
	{ $current=$iv_ruleOrderedClass.current; }
	EOF;

// Rule OrderedClass
ruleOrderedClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrderedClassAccess().getHighOrderClassParserRuleCall_0());
		}
		this_HighOrderClass_0=ruleHighOrderClass
		{
			$current = $this_HighOrderClass_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOrderedClassAccess().getFirstOrderClassParserRuleCall_1());
		}
		this_FirstOrderClass_1=ruleFirstOrderClass
		{
			$current = $this_FirstOrderClass_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFirstOrderClass
entryRuleFirstOrderClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFirstOrderClassRule()); }
	iv_ruleFirstOrderClass=ruleFirstOrderClass
	{ $current=$iv_ruleFirstOrderClass.current; }
	EOF;

// Rule FirstOrderClass
ruleFirstOrderClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='class'
		{
			newLeafNode(otherlv_0, grammarAccess.getFirstOrderClassAccess().getClassKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFirstOrderClassAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFirstOrderClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getFirstOrderClassAccess().getColonKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFirstOrderClassRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getFirstOrderClassAccess().getClassifiersClassCrossReference_2_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getFirstOrderClassAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFirstOrderClassRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getFirstOrderClassAccess().getClassifiersClassCrossReference_2_2_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_6='specializes'
			{
				newLeafNode(otherlv_6, grammarAccess.getFirstOrderClassAccess().getSpecializesKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFirstOrderClassRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getFirstOrderClassAccess().getSuperClassesClassCrossReference_3_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getFirstOrderClassAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFirstOrderClassRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getFirstOrderClassAccess().getSuperClassesClassCrossReference_3_2_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_10='{'
			{
				newLeafNode(otherlv_10, grammarAccess.getFirstOrderClassAccess().getLeftCurlyBracketKeyword_4_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getFirstOrderClassAccess().getAssignmentsFeatureAssignmentParserRuleCall_4_1_0_0());
						}
						lv_assignments_11_0=ruleFeatureAssignment
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFirstOrderClassRule());
							}
							add(
								$current,
								"assignments",
								lv_assignments_11_0,
								"br.ufes.inf.nemo.ml2.ML2.FeatureAssignment");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getFirstOrderClassAccess().getFeaturesFeatureParserRuleCall_4_1_1_0());
						}
						lv_features_12_0=ruleFeature
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFirstOrderClassRule());
							}
							add(
								$current,
								"features",
								lv_features_12_0,
								"br.ufes.inf.nemo.ml2.ML2.Feature");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_13='}'
			{
				newLeafNode(otherlv_13, grammarAccess.getFirstOrderClassAccess().getRightCurlyBracketKeyword_4_2());
			}
		)?
	)
;

// Entry rule entryRuleDataType
entryRuleDataType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); }
	iv_ruleDataType=ruleDataType
	{ $current=$iv_ruleDataType.current; }
	EOF;

// Rule DataType
ruleDataType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='datatype'
		{
			newLeafNode(otherlv_0, grammarAccess.getDataTypeAccess().getDatatypeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getDataTypeAccess().getColonKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDataTypeRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getDataTypeAccess().getClassifiersClassCrossReference_2_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getDataTypeAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getDataTypeRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getDataTypeAccess().getClassifiersClassCrossReference_2_2_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_6='specializes'
			{
				newLeafNode(otherlv_6, grammarAccess.getDataTypeAccess().getSpecializesKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDataTypeRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getDataTypeAccess().getSuperClassesClassCrossReference_3_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getDataTypeAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getDataTypeRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getDataTypeAccess().getSuperClassesClassCrossReference_3_2_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_10='{'
			{
				newLeafNode(otherlv_10, grammarAccess.getDataTypeAccess().getLeftCurlyBracketKeyword_4_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getDataTypeAccess().getAssignmentsFeatureAssignmentParserRuleCall_4_1_0_0());
						}
						lv_assignments_11_0=ruleFeatureAssignment
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDataTypeRule());
							}
							add(
								$current,
								"assignments",
								lv_assignments_11_0,
								"br.ufes.inf.nemo.ml2.ML2.FeatureAssignment");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getDataTypeAccess().getFeaturesFeatureParserRuleCall_4_1_1_0());
						}
						lv_features_12_0=ruleFeature
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDataTypeRule());
							}
							add(
								$current,
								"features",
								lv_features_12_0,
								"br.ufes.inf.nemo.ml2.ML2.Feature");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_13='}'
			{
				newLeafNode(otherlv_13, grammarAccess.getDataTypeAccess().getRightCurlyBracketKeyword_4_2());
			}
		)?
	)
;

// Entry rule entryRuleHighOrderClass
entryRuleHighOrderClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHighOrderClassRule()); }
	iv_ruleHighOrderClass=ruleHighOrderClass
	{ $current=$iv_ruleHighOrderClass.current; }
	EOF;

// Rule HighOrderClass
ruleHighOrderClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='order'
		{
			newLeafNode(otherlv_0, grammarAccess.getHighOrderClassAccess().getOrderKeyword_0());
		}
		(
			(
				lv_order_1_0=RULE_INT
				{
					newLeafNode(lv_order_1_0, grammarAccess.getHighOrderClassAccess().getOrderINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHighOrderClassRule());
					}
					setWithLastConsumed(
						$current,
						"order",
						lv_order_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2='class'
		{
			newLeafNode(otherlv_2, grammarAccess.getHighOrderClassAccess().getClassKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getHighOrderClassAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHighOrderClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_4=':'
			{
				newLeafNode(otherlv_4, grammarAccess.getHighOrderClassAccess().getColonKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getHighOrderClassRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getHighOrderClassAccess().getClassifiersClassCrossReference_4_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getHighOrderClassAccess().getCommaKeyword_4_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getHighOrderClassRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getHighOrderClassAccess().getClassifiersClassCrossReference_4_2_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_8='specializes'
			{
				newLeafNode(otherlv_8, grammarAccess.getHighOrderClassAccess().getSpecializesKeyword_5_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getHighOrderClassRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getHighOrderClassAccess().getSuperClassesClassCrossReference_5_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_10=','
				{
					newLeafNode(otherlv_10, grammarAccess.getHighOrderClassAccess().getCommaKeyword_5_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getHighOrderClassRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getHighOrderClassAccess().getSuperClassesClassCrossReference_5_2_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_12='subordinatedTo'
			{
				newLeafNode(otherlv_12, grammarAccess.getHighOrderClassAccess().getSubordinatedToKeyword_6_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getHighOrderClassRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getHighOrderClassAccess().getSubordinatorsHigherOrderClassCrossReference_6_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_14=','
				{
					newLeafNode(otherlv_14, grammarAccess.getHighOrderClassAccess().getCommaKeyword_6_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getHighOrderClassRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getHighOrderClassAccess().getSubordinatorsHigherOrderClassCrossReference_6_2_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getHighOrderClassAccess().getCategorizationTypeCategorizationTypeEnumRuleCall_7_0_0_0());
						}
						lv_categorizationType_16_0=ruleCategorizationType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getHighOrderClassRule());
							}
							set(
								$current,
								"categorizationType",
								lv_categorizationType_16_0,
								"br.ufes.inf.nemo.ml2.ML2.CategorizationType");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getHighOrderClassRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getHighOrderClassAccess().getCategorizedClassClassCrossReference_7_0_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				otherlv_18='isPowertypeOf'
				{
					newLeafNode(otherlv_18, grammarAccess.getHighOrderClassAccess().getIsPowertypeOfKeyword_7_1_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getHighOrderClassRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getHighOrderClassAccess().getPowertypeOfClassCrossReference_7_1_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
		(
			otherlv_20='{'
			{
				newLeafNode(otherlv_20, grammarAccess.getHighOrderClassAccess().getLeftCurlyBracketKeyword_8_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getHighOrderClassAccess().getAssignmentsFeatureAssignmentParserRuleCall_8_1_0_0());
						}
						lv_assignments_21_0=ruleFeatureAssignment
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getHighOrderClassRule());
							}
							add(
								$current,
								"assignments",
								lv_assignments_21_0,
								"br.ufes.inf.nemo.ml2.ML2.FeatureAssignment");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getHighOrderClassAccess().getFeaturesFeatureParserRuleCall_8_1_1_0());
						}
						lv_features_22_0=ruleFeature
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getHighOrderClassRule());
							}
							add(
								$current,
								"features",
								lv_features_22_0,
								"br.ufes.inf.nemo.ml2.ML2.Feature");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_23='}'
			{
				newLeafNode(otherlv_23, grammarAccess.getHighOrderClassAccess().getRightCurlyBracketKeyword_8_2());
			}
		)?
	)
;

// Entry rule entryRuleOrderlessClass
entryRuleOrderlessClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrderlessClassRule()); }
	iv_ruleOrderlessClass=ruleOrderlessClass
	{ $current=$iv_ruleOrderlessClass.current; }
	EOF;

// Rule OrderlessClass
ruleOrderlessClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='orderless'
		{
			newLeafNode(otherlv_0, grammarAccess.getOrderlessClassAccess().getOrderlessKeyword_0());
		}
		otherlv_1='class'
		{
			newLeafNode(otherlv_1, grammarAccess.getOrderlessClassAccess().getClassKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getOrderlessClassAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOrderlessClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getOrderlessClassAccess().getColonKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOrderlessClassRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getOrderlessClassAccess().getClassifiersClassCrossReference_3_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getOrderlessClassAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getOrderlessClassRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getOrderlessClassAccess().getClassifiersClassCrossReference_3_2_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_7='specializes'
			{
				newLeafNode(otherlv_7, grammarAccess.getOrderlessClassAccess().getSpecializesKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOrderlessClassRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getOrderlessClassAccess().getSuperClassesClassCrossReference_4_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_9=','
				{
					newLeafNode(otherlv_9, grammarAccess.getOrderlessClassAccess().getCommaKeyword_4_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getOrderlessClassRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getOrderlessClassAccess().getSuperClassesClassCrossReference_4_2_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_11='subordinatedTo'
			{
				newLeafNode(otherlv_11, grammarAccess.getOrderlessClassAccess().getSubordinatedToKeyword_5_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOrderlessClassRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getOrderlessClassAccess().getSubordinatorsHigherOrderClassCrossReference_5_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_13=','
				{
					newLeafNode(otherlv_13, grammarAccess.getOrderlessClassAccess().getCommaKeyword_5_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getOrderlessClassRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getOrderlessClassAccess().getSubordinatorsHigherOrderClassCrossReference_5_2_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getOrderlessClassAccess().getCategorizationTypeCategorizationTypeEnumRuleCall_6_0_0_0());
						}
						lv_categorizationType_15_0=ruleCategorizationType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOrderlessClassRule());
							}
							set(
								$current,
								"categorizationType",
								lv_categorizationType_15_0,
								"br.ufes.inf.nemo.ml2.ML2.CategorizationType");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getOrderlessClassRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getOrderlessClassAccess().getCategorizedClassClassCrossReference_6_0_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				otherlv_17='isPowertypeOf'
				{
					newLeafNode(otherlv_17, grammarAccess.getOrderlessClassAccess().getIsPowertypeOfKeyword_6_1_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getOrderlessClassRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getOrderlessClassAccess().getPowertypeOfClassCrossReference_6_1_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
		(
			otherlv_19='{'
			{
				newLeafNode(otherlv_19, grammarAccess.getOrderlessClassAccess().getLeftCurlyBracketKeyword_7_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getOrderlessClassAccess().getAssignmentsFeatureAssignmentParserRuleCall_7_1_0_0());
						}
						lv_assignments_20_0=ruleFeatureAssignment
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOrderlessClassRule());
							}
							add(
								$current,
								"assignments",
								lv_assignments_20_0,
								"br.ufes.inf.nemo.ml2.ML2.FeatureAssignment");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getOrderlessClassAccess().getFeaturesFeatureParserRuleCall_7_1_1_0());
						}
						lv_features_21_0=ruleFeature
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOrderlessClassRule());
							}
							add(
								$current,
								"features",
								lv_features_21_0,
								"br.ufes.inf.nemo.ml2.ML2.Feature");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_22='}'
			{
				newLeafNode(otherlv_22, grammarAccess.getOrderlessClassAccess().getRightCurlyBracketKeyword_7_2());
			}
		)?
	)
;

// Entry rule entryRuleGeneralizationSet
entryRuleGeneralizationSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGeneralizationSetRule()); }
	iv_ruleGeneralizationSet=ruleGeneralizationSet
	{ $current=$iv_ruleGeneralizationSet.current; }
	EOF;

// Rule GeneralizationSet
ruleGeneralizationSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getGeneralizationSetAccess().getUnorderedGroup_0());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getGeneralizationSetAccess().getUnorderedGroup_0(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getGeneralizationSetAccess().getUnorderedGroup_0(), 0);
					}
								({true}?=>((
									lv_isDisjoint_1_0='disjoint'
									{
										newLeafNode(lv_isDisjoint_1_0, grammarAccess.getGeneralizationSetAccess().getIsDisjointDisjointKeyword_0_0_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getGeneralizationSetRule());
										}
										setWithLastConsumed($current, "isDisjoint", true, "disjoint");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getGeneralizationSetAccess().getUnorderedGroup_0());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getGeneralizationSetAccess().getUnorderedGroup_0(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getGeneralizationSetAccess().getUnorderedGroup_0(), 1);
					}
								({true}?=>((
									lv_isComplete_2_0='complete'
									{
										newLeafNode(lv_isComplete_2_0, grammarAccess.getGeneralizationSetAccess().getIsCompleteCompleteKeyword_0_1_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getGeneralizationSetRule());
										}
										setWithLastConsumed($current, "isComplete", true, "complete");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getGeneralizationSetAccess().getUnorderedGroup_0());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getGeneralizationSetAccess().getUnorderedGroup_0());
				}
		)
		otherlv_3='genset'
		{
			newLeafNode(otherlv_3, grammarAccess.getGeneralizationSetAccess().getGensetKeyword_1());
		}
		(
			(
				lv_name_4_0=RULE_ID
				{
					newLeafNode(lv_name_4_0, grammarAccess.getGeneralizationSetAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGeneralizationSetRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		otherlv_5='general'
		{
			newLeafNode(otherlv_5, grammarAccess.getGeneralizationSetAccess().getGeneralKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGeneralizationSetRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getGeneralizationSetAccess().getGeneralClassCrossReference_4_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_7='categorizer'
			{
				newLeafNode(otherlv_7, grammarAccess.getGeneralizationSetAccess().getCategorizerKeyword_5_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGeneralizationSetRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getGeneralizationSetAccess().getCategorizerHigherOrderClassCrossReference_5_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_9='specifics'
		{
			newLeafNode(otherlv_9, grammarAccess.getGeneralizationSetAccess().getSpecificsKeyword_6());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGeneralizationSetRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getGeneralizationSetAccess().getSpecificsClassCrossReference_7_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_11=','
			{
				newLeafNode(otherlv_11, grammarAccess.getGeneralizationSetAccess().getCommaKeyword_8_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGeneralizationSetRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getGeneralizationSetAccess().getSpecificsClassCrossReference_8_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
	)
;

// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	iv_ruleFeature=ruleFeature
	{ $current=$iv_ruleFeature.current; }
	EOF;

// Rule Feature
ruleFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFeatureAccess().getAttributeParserRuleCall_0());
		}
		this_Attribute_0=ruleAttribute
		{
			$current = $this_Attribute_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFeatureAccess().getReferenceParserRuleCall_1());
		}
		this_Reference_1=ruleReference
		{
			$current = $this_Reference_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAttributeAccess().getRegularityAttributeParserRuleCall_0());
		}
		this_RegularityAttribute_0=ruleRegularityAttribute
		{
			$current = $this_RegularityAttribute_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				otherlv_1='att'
				{
					newLeafNode(otherlv_1, grammarAccess.getAttributeAccess().getAttKeyword_1_0());
				}
			)?
			(
				(
					lv_name_2_0=RULE_ID
					{
						newLeafNode(lv_name_2_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAttributeRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getAttributeAccess().getColonKeyword_1_2());
			}
			(
				otherlv_4='['
				{
					newLeafNode(otherlv_4, grammarAccess.getAttributeAccess().getLeftSquareBracketKeyword_1_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAttributeAccess().getLowerBoundCARDINALITYParserRuleCall_1_3_1_0());
						}
						lv_lowerBound_5_0=ruleCARDINALITY
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAttributeRule());
							}
							set(
								$current,
								"lowerBound",
								lv_lowerBound_5_0,
								"br.ufes.inf.nemo.ml2.ML2.CARDINALITY");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_6='..'
				{
					newLeafNode(otherlv_6, grammarAccess.getAttributeAccess().getFullStopFullStopKeyword_1_3_2());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAttributeAccess().getUpperBoundCARDINALITYParserRuleCall_1_3_3_0());
						}
						lv_upperBound_7_0=ruleCARDINALITY
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAttributeRule());
							}
							set(
								$current,
								"upperBound",
								lv_upperBound_7_0,
								"br.ufes.inf.nemo.ml2.ML2.CARDINALITY");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_8=']'
				{
					newLeafNode(otherlv_8, grammarAccess.getAttributeAccess().getRightSquareBracketKeyword_1_3_4());
				}
			)?
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAttributeAccess().getPrimitiveTypePrimitiveTypeEnumRuleCall_1_4_0_0());
						}
						lv_primitiveType_9_0=rulePrimitiveType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAttributeRule());
							}
							set(
								$current,
								"primitiveType",
								lv_primitiveType_9_0,
								"br.ufes.inf.nemo.ml2.ML2.PrimitiveType");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAttributeRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getAttributeAccess().get_typeDataTypeCrossReference_1_4_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				otherlv_11='subsets'
				{
					newLeafNode(otherlv_11, grammarAccess.getAttributeAccess().getSubsetsKeyword_1_5_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAttributeRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getAttributeAccess().getSubsetOfAttributeCrossReference_1_5_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_13=','
					{
						newLeafNode(otherlv_13, grammarAccess.getAttributeAccess().getCommaKeyword_1_5_2_0());
					}
					(
						(
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAttributeRule());
								}
							}
							{
								newCompositeNode(grammarAccess.getAttributeAccess().getSubsetOfAttributeCrossReference_1_5_2_1_0());
							}
							ruleQualifiedName
							{
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
		)
	)
;

// Entry rule entryRuleRegularityAttribute
entryRuleRegularityAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegularityAttributeRule()); }
	iv_ruleRegularityAttribute=ruleRegularityAttribute
	{ $current=$iv_ruleRegularityAttribute.current; }
	EOF;

// Rule RegularityAttribute
ruleRegularityAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='regularity'
			{
				newLeafNode(otherlv_0, grammarAccess.getRegularityAttributeAccess().getRegularityKeyword_0());
			}
		)?
		(
			otherlv_1='att'
			{
				newLeafNode(otherlv_1, grammarAccess.getRegularityAttributeAccess().getAttKeyword_1());
			}
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getRegularityAttributeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRegularityAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getRegularityAttributeAccess().getColonKeyword_3());
		}
		(
			otherlv_4='['
			{
				newLeafNode(otherlv_4, grammarAccess.getRegularityAttributeAccess().getLeftSquareBracketKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRegularityAttributeAccess().getLowerBoundCARDINALITYParserRuleCall_4_1_0());
					}
					lv_lowerBound_5_0=ruleCARDINALITY
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRegularityAttributeRule());
						}
						set(
							$current,
							"lowerBound",
							lv_lowerBound_5_0,
							"br.ufes.inf.nemo.ml2.ML2.CARDINALITY");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6='..'
			{
				newLeafNode(otherlv_6, grammarAccess.getRegularityAttributeAccess().getFullStopFullStopKeyword_4_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRegularityAttributeAccess().getUpperBoundCARDINALITYParserRuleCall_4_3_0());
					}
					lv_upperBound_7_0=ruleCARDINALITY
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRegularityAttributeRule());
						}
						set(
							$current,
							"upperBound",
							lv_upperBound_7_0,
							"br.ufes.inf.nemo.ml2.ML2.CARDINALITY");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_8=']'
			{
				newLeafNode(otherlv_8, grammarAccess.getRegularityAttributeAccess().getRightSquareBracketKeyword_4_4());
			}
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRegularityAttributeAccess().getPrimitiveTypePrimitiveTypeEnumRuleCall_5_0_0());
					}
					lv_primitiveType_9_0=rulePrimitiveType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRegularityAttributeRule());
						}
						set(
							$current,
							"primitiveType",
							lv_primitiveType_9_0,
							"br.ufes.inf.nemo.ml2.ML2.PrimitiveType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRegularityAttributeRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getRegularityAttributeAccess().get_typeDataTypeCrossReference_5_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_11='subsets'
			{
				newLeafNode(otherlv_11, grammarAccess.getRegularityAttributeAccess().getSubsetsKeyword_6_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRegularityAttributeRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getRegularityAttributeAccess().getSubsetOfAttributeCrossReference_6_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_13=','
				{
					newLeafNode(otherlv_13, grammarAccess.getRegularityAttributeAccess().getCommaKeyword_6_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRegularityAttributeRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getRegularityAttributeAccess().getSubsetOfAttributeCrossReference_6_2_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRegularityAttributeAccess().getRegularityTypeRegularityFeatureTypeEnumRuleCall_7_0());
				}
				lv_regularityType_15_0=ruleRegularityFeatureType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRegularityAttributeRule());
					}
					set(
						$current,
						"regularityType",
						lv_regularityType_15_0,
						"br.ufes.inf.nemo.ml2.ML2.RegularityFeatureType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRegularityAttributeRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getRegularityAttributeAccess().getRegulatesAttributeCrossReference_8_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReferenceRule()); }
	iv_ruleReference=ruleReference
	{ $current=$iv_ruleReference.current; }
	EOF;

// Rule Reference
ruleReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getReferenceAccess().getRegularityReferenceParserRuleCall_0());
		}
		this_RegularityReference_0=ruleRegularityReference
		{
			$current = $this_RegularityReference_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='ref'
			{
				newLeafNode(otherlv_1, grammarAccess.getReferenceAccess().getRefKeyword_1_0());
			}
			(
				(
					lv_name_2_0=RULE_ID
					{
						newLeafNode(lv_name_2_0, grammarAccess.getReferenceAccess().getNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getReferenceRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getReferenceAccess().getColonKeyword_1_2());
			}
			(
				otherlv_4='['
				{
					newLeafNode(otherlv_4, grammarAccess.getReferenceAccess().getLeftSquareBracketKeyword_1_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getReferenceAccess().getLowerBoundCARDINALITYParserRuleCall_1_3_1_0());
						}
						lv_lowerBound_5_0=ruleCARDINALITY
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getReferenceRule());
							}
							set(
								$current,
								"lowerBound",
								lv_lowerBound_5_0,
								"br.ufes.inf.nemo.ml2.ML2.CARDINALITY");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_6='..'
				{
					newLeafNode(otherlv_6, grammarAccess.getReferenceAccess().getFullStopFullStopKeyword_1_3_2());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getReferenceAccess().getUpperBoundCARDINALITYParserRuleCall_1_3_3_0());
						}
						lv_upperBound_7_0=ruleCARDINALITY
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getReferenceRule());
							}
							set(
								$current,
								"upperBound",
								lv_upperBound_7_0,
								"br.ufes.inf.nemo.ml2.ML2.CARDINALITY");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_8=']'
				{
					newLeafNode(otherlv_8, grammarAccess.getReferenceAccess().getRightSquareBracketKeyword_1_3_4());
				}
			)?
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getReferenceRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getReferenceAccess().get_typeClassCrossReference_1_4_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_10='subsets'
				{
					newLeafNode(otherlv_10, grammarAccess.getReferenceAccess().getSubsetsKeyword_1_5_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getReferenceRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getReferenceAccess().getSubsetOfReferenceCrossReference_1_5_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_12=','
					{
						newLeafNode(otherlv_12, grammarAccess.getReferenceAccess().getCommaKeyword_1_5_2_0());
					}
					(
						(
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getReferenceRule());
								}
							}
							{
								newCompositeNode(grammarAccess.getReferenceAccess().getSubsetOfReferenceCrossReference_1_5_2_1_0());
							}
							ruleQualifiedName
							{
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			(
				otherlv_14='isOppositeTo'
				{
					newLeafNode(otherlv_14, grammarAccess.getReferenceAccess().getIsOppositeToKeyword_1_6_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getReferenceRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getReferenceAccess().getOppositeToReferenceCrossReference_1_6_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
	)
;

// Entry rule entryRuleRegularityReference
entryRuleRegularityReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegularityReferenceRule()); }
	iv_ruleRegularityReference=ruleRegularityReference
	{ $current=$iv_ruleRegularityReference.current; }
	EOF;

// Rule RegularityReference
ruleRegularityReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='regularity'
			{
				newLeafNode(otherlv_0, grammarAccess.getRegularityReferenceAccess().getRegularityKeyword_0());
			}
		)?
		otherlv_1='ref'
		{
			newLeafNode(otherlv_1, grammarAccess.getRegularityReferenceAccess().getRefKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getRegularityReferenceAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRegularityReferenceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getRegularityReferenceAccess().getColonKeyword_3());
		}
		(
			otherlv_4='['
			{
				newLeafNode(otherlv_4, grammarAccess.getRegularityReferenceAccess().getLeftSquareBracketKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRegularityReferenceAccess().getLowerBoundCARDINALITYParserRuleCall_4_1_0());
					}
					lv_lowerBound_5_0=ruleCARDINALITY
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRegularityReferenceRule());
						}
						set(
							$current,
							"lowerBound",
							lv_lowerBound_5_0,
							"br.ufes.inf.nemo.ml2.ML2.CARDINALITY");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6='..'
			{
				newLeafNode(otherlv_6, grammarAccess.getRegularityReferenceAccess().getFullStopFullStopKeyword_4_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRegularityReferenceAccess().getUpperBoundCARDINALITYParserRuleCall_4_3_0());
					}
					lv_upperBound_7_0=ruleCARDINALITY
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRegularityReferenceRule());
						}
						set(
							$current,
							"upperBound",
							lv_upperBound_7_0,
							"br.ufes.inf.nemo.ml2.ML2.CARDINALITY");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_8=']'
			{
				newLeafNode(otherlv_8, grammarAccess.getRegularityReferenceAccess().getRightSquareBracketKeyword_4_4());
			}
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRegularityReferenceRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getRegularityReferenceAccess().get_typeClassCrossReference_5_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_10='subsets'
			{
				newLeafNode(otherlv_10, grammarAccess.getRegularityReferenceAccess().getSubsetsKeyword_6_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRegularityReferenceRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getRegularityReferenceAccess().getSubsetOfReferenceCrossReference_6_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_12=','
				{
					newLeafNode(otherlv_12, grammarAccess.getRegularityReferenceAccess().getCommaKeyword_6_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRegularityReferenceRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getRegularityReferenceAccess().getSubsetOfReferenceCrossReference_6_2_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_14='isOppositeTo'
			{
				newLeafNode(otherlv_14, grammarAccess.getRegularityReferenceAccess().getIsOppositeToKeyword_7_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRegularityReferenceRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getRegularityReferenceAccess().getOppositeToReferenceCrossReference_7_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRegularityReferenceAccess().getRegularityTypeRegularityFeatureTypeEnumRuleCall_8_0());
				}
				lv_regularityType_16_0=ruleRegularityFeatureType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRegularityReferenceRule());
					}
					set(
						$current,
						"regularityType",
						lv_regularityType_16_0,
						"br.ufes.inf.nemo.ml2.ML2.RegularityFeatureType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRegularityReferenceRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getRegularityReferenceAccess().getRegulatesReferenceCrossReference_9_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRegularityFeature
entryRuleRegularityFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegularityFeatureRule()); }
	iv_ruleRegularityFeature=ruleRegularityFeature
	{ $current=$iv_ruleRegularityFeature.current; }
	EOF;

// Rule RegularityFeature
ruleRegularityFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRegularityFeatureAccess().getRegularityAttributeParserRuleCall_0());
		}
		this_RegularityAttribute_0=ruleRegularityAttribute
		{
			$current = $this_RegularityAttribute_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRegularityFeatureAccess().getRegularityReferenceParserRuleCall_1());
		}
		this_RegularityReference_1=ruleRegularityReference
		{
			$current = $this_RegularityReference_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCARDINALITY
entryRuleCARDINALITY returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCARDINALITYRule()); }
	iv_ruleCARDINALITY=ruleCARDINALITY
	{ $current=$iv_ruleCARDINALITY.current.getText(); }
	EOF;

// Rule CARDINALITY
ruleCARDINALITY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCARDINALITYAccess().getAsteriskKeyword_0());
		}
		    |
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getCARDINALITYAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleFeatureAssignment
entryRuleFeatureAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureAssignmentRule()); }
	iv_ruleFeatureAssignment=ruleFeatureAssignment
	{ $current=$iv_ruleFeatureAssignment.current; }
	EOF;

// Rule FeatureAssignment
ruleFeatureAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFeatureAssignmentAccess().getSingleReferenceAssignmentParserRuleCall_0());
		}
		this_SingleReferenceAssignment_0=ruleSingleReferenceAssignment
		{
			$current = $this_SingleReferenceAssignment_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFeatureAssignmentAccess().getMultipleReferenceAssignmentParserRuleCall_1());
		}
		this_MultipleReferenceAssignment_1=ruleMultipleReferenceAssignment
		{
			$current = $this_MultipleReferenceAssignment_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFeatureAssignmentAccess().getSingleAttributeAssignmentParserRuleCall_2());
		}
		this_SingleAttributeAssignment_2=ruleSingleAttributeAssignment
		{
			$current = $this_SingleAttributeAssignment_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFeatureAssignmentAccess().getMultipleAttributeAssignmentParserRuleCall_3());
		}
		this_MultipleAttributeAssignment_3=ruleMultipleAttributeAssignment
		{
			$current = $this_MultipleAttributeAssignment_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSingleReferenceAssignment
entryRuleSingleReferenceAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleReferenceAssignmentRule()); }
	iv_ruleSingleReferenceAssignment=ruleSingleReferenceAssignment
	{ $current=$iv_ruleSingleReferenceAssignment.current; }
	EOF;

// Rule SingleReferenceAssignment
ruleSingleReferenceAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ref'
		{
			newLeafNode(otherlv_0, grammarAccess.getSingleReferenceAssignmentAccess().getRefKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSingleReferenceAssignmentRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getSingleReferenceAssignmentAccess().getReferenceReferenceCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getSingleReferenceAssignmentAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSingleReferenceAssignmentRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getSingleReferenceAssignmentAccess().getValuesEntityDeclarationCrossReference_3_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMultipleReferenceAssignment
entryRuleMultipleReferenceAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultipleReferenceAssignmentRule()); }
	iv_ruleMultipleReferenceAssignment=ruleMultipleReferenceAssignment
	{ $current=$iv_ruleMultipleReferenceAssignment.current; }
	EOF;

// Rule MultipleReferenceAssignment
ruleMultipleReferenceAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ref'
		{
			newLeafNode(otherlv_0, grammarAccess.getMultipleReferenceAssignmentAccess().getRefKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultipleReferenceAssignmentRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getMultipleReferenceAssignmentAccess().getReferenceReferenceCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getMultipleReferenceAssignmentAccess().getEqualsSignKeyword_2());
		}
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getMultipleReferenceAssignmentAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultipleReferenceAssignmentRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getMultipleReferenceAssignmentAccess().getValuesEntityDeclarationCrossReference_4_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getMultipleReferenceAssignmentAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMultipleReferenceAssignmentRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getMultipleReferenceAssignmentAccess().getValuesEntityDeclarationCrossReference_5_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getMultipleReferenceAssignmentAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleSingleAttributeAssignment
entryRuleSingleAttributeAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleAttributeAssignmentRule()); }
	iv_ruleSingleAttributeAssignment=ruleSingleAttributeAssignment
	{ $current=$iv_ruleSingleAttributeAssignment.current; }
	EOF;

// Rule SingleAttributeAssignment
ruleSingleAttributeAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='att'
			{
				newLeafNode(otherlv_0, grammarAccess.getSingleAttributeAssignmentAccess().getAttKeyword_0());
			}
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSingleAttributeAssignmentRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getSingleAttributeAssignmentAccess().getAttributeAttributeCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getSingleAttributeAssignmentAccess().getEqualsSignKeyword_2());
		}
		(
			(
				(
					lv_stringValues_3_0=RULE_STRING
					{
						newLeafNode(lv_stringValues_3_0, grammarAccess.getSingleAttributeAssignmentAccess().getStringValuesSTRINGTerminalRuleCall_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSingleAttributeAssignmentRule());
						}
						addWithLastConsumed(
							$current,
							"stringValues",
							lv_stringValues_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getSingleAttributeAssignmentAccess().getNumberValuesNUMBERParserRuleCall_3_1_0());
					}
					lv_numberValues_4_0=ruleNUMBER
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSingleAttributeAssignmentRule());
						}
						add(
							$current,
							"numberValues",
							lv_numberValues_4_0,
							"br.ufes.inf.nemo.ml2.ML2.NUMBER");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getSingleAttributeAssignmentAccess().getBooleanValuesBOOLEANParserRuleCall_3_2_0());
					}
					lv_booleanValues_5_0=ruleBOOLEAN
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSingleAttributeAssignmentRule());
						}
						add(
							$current,
							"booleanValues",
							lv_booleanValues_5_0,
							"br.ufes.inf.nemo.ml2.ML2.BOOLEAN");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSingleAttributeAssignmentRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getSingleAttributeAssignmentAccess().getDatatypeValuesIndividualCrossReference_3_3_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getSingleAttributeAssignmentAccess().getUnnamedValuesUnnamedIndividualParserRuleCall_3_4_0());
					}
					lv_unnamedValues_7_0=ruleUnnamedIndividual
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSingleAttributeAssignmentRule());
						}
						add(
							$current,
							"unnamedValues",
							lv_unnamedValues_7_0,
							"br.ufes.inf.nemo.ml2.ML2.UnnamedIndividual");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleMultipleAttributeAssignment
entryRuleMultipleAttributeAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultipleAttributeAssignmentRule()); }
	iv_ruleMultipleAttributeAssignment=ruleMultipleAttributeAssignment
	{ $current=$iv_ruleMultipleAttributeAssignment.current; }
	EOF;

// Rule MultipleAttributeAssignment
ruleMultipleAttributeAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='att'
			{
				newLeafNode(otherlv_0, grammarAccess.getMultipleAttributeAssignmentAccess().getAttKeyword_0());
			}
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultipleAttributeAssignmentRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getMultipleAttributeAssignmentAccess().getAttributeAttributeCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getMultipleAttributeAssignmentAccess().getEqualsSignKeyword_2());
		}
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getMultipleAttributeAssignmentAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				(
					(
						lv_stringValues_4_0=RULE_STRING
						{
							newLeafNode(lv_stringValues_4_0, grammarAccess.getMultipleAttributeAssignmentAccess().getStringValuesSTRINGTerminalRuleCall_4_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultipleAttributeAssignmentRule());
							}
							addWithLastConsumed(
								$current,
								"stringValues",
								lv_stringValues_4_0,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getMultipleAttributeAssignmentAccess().getNumberValuesNUMBERParserRuleCall_4_0_1_0());
						}
						lv_numberValues_5_0=ruleNUMBER
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultipleAttributeAssignmentRule());
							}
							add(
								$current,
								"numberValues",
								lv_numberValues_5_0,
								"br.ufes.inf.nemo.ml2.ML2.NUMBER");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getMultipleAttributeAssignmentAccess().getBooleanValuesBOOLEANParserRuleCall_4_0_2_0());
						}
						lv_booleanValues_6_0=ruleBOOLEAN
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultipleAttributeAssignmentRule());
							}
							add(
								$current,
								"booleanValues",
								lv_booleanValues_6_0,
								"br.ufes.inf.nemo.ml2.ML2.BOOLEAN");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultipleAttributeAssignmentRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getMultipleAttributeAssignmentAccess().getDatatypeValuesIndividualCrossReference_4_0_3_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getMultipleAttributeAssignmentAccess().getUnnamedValuesUnnamedIndividualParserRuleCall_4_0_4_0());
						}
						lv_unnamedValues_8_0=ruleUnnamedIndividual
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultipleAttributeAssignmentRule());
							}
							add(
								$current,
								"unnamedValues",
								lv_unnamedValues_8_0,
								"br.ufes.inf.nemo.ml2.ML2.UnnamedIndividual");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					otherlv_9=','
					{
						newLeafNode(otherlv_9, grammarAccess.getMultipleAttributeAssignmentAccess().getCommaKeyword_4_1_0_0());
					}
					(
						(
							lv_stringValues_10_0=RULE_STRING
							{
								newLeafNode(lv_stringValues_10_0, grammarAccess.getMultipleAttributeAssignmentAccess().getStringValuesSTRINGTerminalRuleCall_4_1_0_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getMultipleAttributeAssignmentRule());
								}
								addWithLastConsumed(
									$current,
									"stringValues",
									lv_stringValues_10_0,
									"org.eclipse.xtext.common.Terminals.STRING");
							}
						)
					)
				)
				    |
				(
					otherlv_11=','
					{
						newLeafNode(otherlv_11, grammarAccess.getMultipleAttributeAssignmentAccess().getCommaKeyword_4_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getMultipleAttributeAssignmentAccess().getNumberValuesNUMBERParserRuleCall_4_1_1_1_0());
							}
							lv_numberValues_12_0=ruleNUMBER
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getMultipleAttributeAssignmentRule());
								}
								add(
									$current,
									"numberValues",
									lv_numberValues_12_0,
									"br.ufes.inf.nemo.ml2.ML2.NUMBER");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					otherlv_13=','
					{
						newLeafNode(otherlv_13, grammarAccess.getMultipleAttributeAssignmentAccess().getCommaKeyword_4_1_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getMultipleAttributeAssignmentAccess().getBooleanValuesBOOLEANParserRuleCall_4_1_2_1_0());
							}
							lv_booleanValues_14_0=ruleBOOLEAN
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getMultipleAttributeAssignmentRule());
								}
								add(
									$current,
									"booleanValues",
									lv_booleanValues_14_0,
									"br.ufes.inf.nemo.ml2.ML2.BOOLEAN");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					otherlv_15=','
					{
						newLeafNode(otherlv_15, grammarAccess.getMultipleAttributeAssignmentAccess().getCommaKeyword_4_1_3_0());
					}
					(
						(
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getMultipleAttributeAssignmentRule());
								}
							}
							{
								newCompositeNode(grammarAccess.getMultipleAttributeAssignmentAccess().getDatatypeValuesIndividualCrossReference_4_1_3_1_0());
							}
							ruleQualifiedName
							{
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					otherlv_17=','
					{
						newLeafNode(otherlv_17, grammarAccess.getMultipleAttributeAssignmentAccess().getCommaKeyword_4_1_4_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getMultipleAttributeAssignmentAccess().getUnnamedValuesUnnamedIndividualParserRuleCall_4_1_4_1_0());
							}
							lv_unnamedValues_18_0=ruleUnnamedIndividual
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getMultipleAttributeAssignmentRule());
								}
								add(
									$current,
									"unnamedValues",
									lv_unnamedValues_18_0,
									"br.ufes.inf.nemo.ml2.ML2.UnnamedIndividual");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)*
		)
		otherlv_19='}'
		{
			newLeafNode(otherlv_19, grammarAccess.getMultipleAttributeAssignmentAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleBOOLEAN
entryRuleBOOLEAN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBOOLEANRule()); }
	iv_ruleBOOLEAN=ruleBOOLEAN
	{ $current=$iv_ruleBOOLEAN.current.getText(); }
	EOF;

// Rule BOOLEAN
ruleBOOLEAN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBOOLEANAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBOOLEANAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleNUMBER
entryRuleNUMBER returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNUMBERRule()); }
	iv_ruleNUMBER=ruleNUMBER
	{ $current=$iv_ruleNUMBER.current.getText(); }
	EOF;

// Rule NUMBER
ruleNUMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNUMBERAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNUMBERAccess().getFullStopKeyword_2_0());
			}
			this_INT_3=RULE_INT
			{
				$current.merge(this_INT_3);
			}
			{
				newLeafNode(this_INT_3, grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_2_1());
			}
		)?
	)
;

// Entry rule entryRuleUnnamedIndividual
entryRuleUnnamedIndividual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnnamedIndividualRule()); }
	iv_ruleUnnamedIndividual=ruleUnnamedIndividual
	{ $current=$iv_ruleUnnamedIndividual.current; }
	EOF;

// Rule UnnamedIndividual
ruleUnnamedIndividual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getUnnamedIndividualAccess().getIndividualAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getUnnamedIndividualAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnnamedIndividualAccess().getAssignmentsSimpleAttributeAssignmentParserRuleCall_2_0());
				}
				lv_assignments_2_0=ruleSimpleAttributeAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnnamedIndividualRule());
					}
					add(
						$current,
						"assignments",
						lv_assignments_2_0,
						"br.ufes.inf.nemo.ml2.ML2.SimpleAttributeAssignment");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getUnnamedIndividualAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleSimpleAttributeAssignment
entryRuleSimpleAttributeAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleAttributeAssignmentRule()); }
	iv_ruleSimpleAttributeAssignment=ruleSimpleAttributeAssignment
	{ $current=$iv_ruleSimpleAttributeAssignment.current; }
	EOF;

// Rule SimpleAttributeAssignment
ruleSimpleAttributeAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSimpleAttributeAssignmentAccess().getSingleSimpleAttributeAssignmentParserRuleCall_0());
		}
		this_SingleSimpleAttributeAssignment_0=ruleSingleSimpleAttributeAssignment
		{
			$current = $this_SingleSimpleAttributeAssignment_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSimpleAttributeAssignmentAccess().getMultipleSimpleAttributeAssignmentParserRuleCall_1());
		}
		this_MultipleSimpleAttributeAssignment_1=ruleMultipleSimpleAttributeAssignment
		{
			$current = $this_MultipleSimpleAttributeAssignment_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSingleSimpleAttributeAssignment
entryRuleSingleSimpleAttributeAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleSimpleAttributeAssignmentRule()); }
	iv_ruleSingleSimpleAttributeAssignment=ruleSingleSimpleAttributeAssignment
	{ $current=$iv_ruleSingleSimpleAttributeAssignment.current; }
	EOF;

// Rule SingleSimpleAttributeAssignment
ruleSingleSimpleAttributeAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSingleSimpleAttributeAssignmentRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getSingleSimpleAttributeAssignmentAccess().getAttributeAttributeCrossReference_0_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getSingleSimpleAttributeAssignmentAccess().getEqualsSignKeyword_1());
		}
		(
			(
				(
					lv_stringValues_2_0=RULE_STRING
					{
						newLeafNode(lv_stringValues_2_0, grammarAccess.getSingleSimpleAttributeAssignmentAccess().getStringValuesSTRINGTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSingleSimpleAttributeAssignmentRule());
						}
						addWithLastConsumed(
							$current,
							"stringValues",
							lv_stringValues_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getSingleSimpleAttributeAssignmentAccess().getNumberValuesNUMBERParserRuleCall_2_1_0());
					}
					lv_numberValues_3_0=ruleNUMBER
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSingleSimpleAttributeAssignmentRule());
						}
						add(
							$current,
							"numberValues",
							lv_numberValues_3_0,
							"br.ufes.inf.nemo.ml2.ML2.NUMBER");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getSingleSimpleAttributeAssignmentAccess().getBooleanValuesBOOLEANParserRuleCall_2_2_0());
					}
					lv_booleanValues_4_0=ruleBOOLEAN
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSingleSimpleAttributeAssignmentRule());
						}
						add(
							$current,
							"booleanValues",
							lv_booleanValues_4_0,
							"br.ufes.inf.nemo.ml2.ML2.BOOLEAN");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSingleSimpleAttributeAssignmentRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getSingleSimpleAttributeAssignmentAccess().getDatatypeValuesIndividualCrossReference_2_3_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getSingleSimpleAttributeAssignmentAccess().getUnnamedValuesUnnamedIndividualParserRuleCall_2_4_0());
					}
					lv_unnamedValues_6_0=ruleUnnamedIndividual
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSingleSimpleAttributeAssignmentRule());
						}
						add(
							$current,
							"unnamedValues",
							lv_unnamedValues_6_0,
							"br.ufes.inf.nemo.ml2.ML2.UnnamedIndividual");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleMultipleSimpleAttributeAssignment
entryRuleMultipleSimpleAttributeAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultipleSimpleAttributeAssignmentRule()); }
	iv_ruleMultipleSimpleAttributeAssignment=ruleMultipleSimpleAttributeAssignment
	{ $current=$iv_ruleMultipleSimpleAttributeAssignment.current; }
	EOF;

// Rule MultipleSimpleAttributeAssignment
ruleMultipleSimpleAttributeAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultipleSimpleAttributeAssignmentRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getMultipleSimpleAttributeAssignmentAccess().getAttributeAttributeCrossReference_0_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getMultipleSimpleAttributeAssignmentAccess().getEqualsSignKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getMultipleSimpleAttributeAssignmentAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					(
						lv_stringValues_3_0=RULE_STRING
						{
							newLeafNode(lv_stringValues_3_0, grammarAccess.getMultipleSimpleAttributeAssignmentAccess().getStringValuesSTRINGTerminalRuleCall_3_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultipleSimpleAttributeAssignmentRule());
							}
							addWithLastConsumed(
								$current,
								"stringValues",
								lv_stringValues_3_0,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getMultipleSimpleAttributeAssignmentAccess().getNumberValuesNUMBERParserRuleCall_3_0_1_0());
						}
						lv_numberValues_4_0=ruleNUMBER
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultipleSimpleAttributeAssignmentRule());
							}
							add(
								$current,
								"numberValues",
								lv_numberValues_4_0,
								"br.ufes.inf.nemo.ml2.ML2.NUMBER");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getMultipleSimpleAttributeAssignmentAccess().getBooleanValuesBOOLEANParserRuleCall_3_0_2_0());
						}
						lv_booleanValues_5_0=ruleBOOLEAN
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultipleSimpleAttributeAssignmentRule());
							}
							add(
								$current,
								"booleanValues",
								lv_booleanValues_5_0,
								"br.ufes.inf.nemo.ml2.ML2.BOOLEAN");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultipleSimpleAttributeAssignmentRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getMultipleSimpleAttributeAssignmentAccess().getDatatypeValuesIndividualCrossReference_3_0_3_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getMultipleSimpleAttributeAssignmentAccess().getUnnamedValuesUnnamedIndividualParserRuleCall_3_0_4_0());
						}
						lv_unnamedValues_7_0=ruleUnnamedIndividual
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultipleSimpleAttributeAssignmentRule());
							}
							add(
								$current,
								"unnamedValues",
								lv_unnamedValues_7_0,
								"br.ufes.inf.nemo.ml2.ML2.UnnamedIndividual");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					otherlv_8=','
					{
						newLeafNode(otherlv_8, grammarAccess.getMultipleSimpleAttributeAssignmentAccess().getCommaKeyword_3_1_0_0());
					}
					(
						(
							lv_stringValues_9_0=RULE_STRING
							{
								newLeafNode(lv_stringValues_9_0, grammarAccess.getMultipleSimpleAttributeAssignmentAccess().getStringValuesSTRINGTerminalRuleCall_3_1_0_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getMultipleSimpleAttributeAssignmentRule());
								}
								addWithLastConsumed(
									$current,
									"stringValues",
									lv_stringValues_9_0,
									"org.eclipse.xtext.common.Terminals.STRING");
							}
						)
					)
				)
				    |
				(
					otherlv_10=','
					{
						newLeafNode(otherlv_10, grammarAccess.getMultipleSimpleAttributeAssignmentAccess().getCommaKeyword_3_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getMultipleSimpleAttributeAssignmentAccess().getNumberValuesNUMBERParserRuleCall_3_1_1_1_0());
							}
							lv_numberValues_11_0=ruleNUMBER
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getMultipleSimpleAttributeAssignmentRule());
								}
								add(
									$current,
									"numberValues",
									lv_numberValues_11_0,
									"br.ufes.inf.nemo.ml2.ML2.NUMBER");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					otherlv_12=','
					{
						newLeafNode(otherlv_12, grammarAccess.getMultipleSimpleAttributeAssignmentAccess().getCommaKeyword_3_1_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getMultipleSimpleAttributeAssignmentAccess().getBooleanValuesBOOLEANParserRuleCall_3_1_2_1_0());
							}
							lv_booleanValues_13_0=ruleBOOLEAN
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getMultipleSimpleAttributeAssignmentRule());
								}
								add(
									$current,
									"booleanValues",
									lv_booleanValues_13_0,
									"br.ufes.inf.nemo.ml2.ML2.BOOLEAN");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					otherlv_14=','
					{
						newLeafNode(otherlv_14, grammarAccess.getMultipleSimpleAttributeAssignmentAccess().getCommaKeyword_3_1_3_0());
					}
					(
						(
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getMultipleSimpleAttributeAssignmentRule());
								}
							}
							{
								newCompositeNode(grammarAccess.getMultipleSimpleAttributeAssignmentAccess().getDatatypeValuesIndividualCrossReference_3_1_3_1_0());
							}
							ruleQualifiedName
							{
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					otherlv_16=','
					{
						newLeafNode(otherlv_16, grammarAccess.getMultipleSimpleAttributeAssignmentAccess().getCommaKeyword_3_1_4_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getMultipleSimpleAttributeAssignmentAccess().getUnnamedValuesUnnamedIndividualParserRuleCall_3_1_4_1_0());
							}
							lv_unnamedValues_17_0=ruleUnnamedIndividual
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getMultipleSimpleAttributeAssignmentRule());
								}
								add(
									$current,
									"unnamedValues",
									lv_unnamedValues_17_0,
									"br.ufes.inf.nemo.ml2.ML2.UnnamedIndividual");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)*
		)
		otherlv_18='}'
		{
			newLeafNode(otherlv_18, grammarAccess.getMultipleSimpleAttributeAssignmentAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleConstraintDeclaration
entryRuleConstraintDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintDeclarationRule()); }
	iv_ruleConstraintDeclaration=ruleConstraintDeclaration
	{ $current=$iv_ruleConstraintDeclaration.current; }
	EOF;

// Rule ConstraintDeclaration
ruleConstraintDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConstraintDeclarationAccess().getInvariantConstraintParserRuleCall_0());
		}
		this_InvariantConstraint_0=ruleInvariantConstraint
		{
			$current = $this_InvariantConstraint_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstraintDeclarationAccess().getDerivationConstraintParserRuleCall_1());
		}
		this_DerivationConstraint_1=ruleDerivationConstraint
		{
			$current = $this_DerivationConstraint_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInvariantConstraint
entryRuleInvariantConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInvariantConstraintRule()); }
	iv_ruleInvariantConstraint=ruleInvariantConstraint
	{ $current=$iv_ruleInvariantConstraint.current; }
	EOF;

// Rule InvariantConstraint
ruleInvariantConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='context'
		{
			newLeafNode(otherlv_0, grammarAccess.getInvariantConstraintAccess().getContextKeyword_0());
		}
		(
			(
				(
					lv_contextAlias_1_0=RULE_ID
					{
						newLeafNode(lv_contextAlias_1_0, grammarAccess.getInvariantConstraintAccess().getContextAliasIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInvariantConstraintRule());
						}
						setWithLastConsumed(
							$current,
							"contextAlias",
							lv_contextAlias_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getInvariantConstraintAccess().getColonKeyword_1_1());
			}
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInvariantConstraintRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getInvariantConstraintAccess().getClassContextClassCrossReference_2_0());
				}
			)
		)
		otherlv_4='inv'
		{
			newLeafNode(otherlv_4, grammarAccess.getInvariantConstraintAccess().getInvKeyword_3());
		}
		(
			(
				lv_invariantAlias_5_0=RULE_ID
				{
					newLeafNode(lv_invariantAlias_5_0, grammarAccess.getInvariantConstraintAccess().getInvariantAliasIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInvariantConstraintRule());
					}
					setWithLastConsumed(
						$current,
						"invariantAlias",
						lv_invariantAlias_5_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		otherlv_6=':'
		{
			newLeafNode(otherlv_6, grammarAccess.getInvariantConstraintAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInvariantConstraintAccess().getExpressionOclExpressionParserRuleCall_6_0());
				}
				lv_expression_7_0=ruleOclExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInvariantConstraintRule());
					}
					set(
						$current,
						"expression",
						lv_expression_7_0,
						"br.ufes.inf.nemo.ml2.ML2.OclExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDerivationConstraint
entryRuleDerivationConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDerivationConstraintRule()); }
	iv_ruleDerivationConstraint=ruleDerivationConstraint
	{ $current=$iv_ruleDerivationConstraint.current; }
	EOF;

// Rule DerivationConstraint
ruleDerivationConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='context'
		{
			newLeafNode(otherlv_0, grammarAccess.getDerivationConstraintAccess().getContextKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDerivationConstraintRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getDerivationConstraintAccess().getClassContextClassCrossReference_1_0());
				}
			)
		)
		otherlv_2='::'
		{
			newLeafNode(otherlv_2, grammarAccess.getDerivationConstraintAccess().getColonColonKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDerivationConstraintRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getDerivationConstraintAccess().getFeatureContextFeatureCrossReference_3_0());
				}
			)
		)
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getDerivationConstraintAccess().getColonKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDerivationConstraintAccess().getTypenameTypeLiteralExpressionParserRuleCall_5_0());
				}
				lv_typename_5_0=ruleTypeLiteralExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDerivationConstraintRule());
					}
					set(
						$current,
						"typename",
						lv_typename_5_0,
						"br.ufes.inf.nemo.ml2.ML2.TypeLiteralExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='derive'
		{
			newLeafNode(otherlv_6, grammarAccess.getDerivationConstraintAccess().getDeriveKeyword_6());
		}
		otherlv_7=':'
		{
			newLeafNode(otherlv_7, grammarAccess.getDerivationConstraintAccess().getColonKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDerivationConstraintAccess().getExpressionOclExpressionParserRuleCall_8_0());
				}
				lv_expression_8_0=ruleOclExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDerivationConstraintRule());
					}
					set(
						$current,
						"expression",
						lv_expression_8_0,
						"br.ufes.inf.nemo.ml2.ML2.OclExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOclExpression
entryRuleOclExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOclExpressionRule()); }
	iv_ruleOclExpression=ruleOclExpression
	{ $current=$iv_ruleOclExpression.current; }
	EOF;

// Rule OclExpression
ruleOclExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOclExpressionAccess().getLetExpressionParserRuleCall_0());
		}
		this_LetExpression_0=ruleLetExpression
		{
			$current = $this_LetExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOclExpressionAccess().getIfExpressionParserRuleCall_1());
		}
		this_IfExpression_1=ruleIfExpression
		{
			$current = $this_IfExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOclExpressionAccess().getImpliesExpressionParserRuleCall_2());
		}
		this_ImpliesExpression_2=ruleImpliesExpression
		{
			$current = $this_ImpliesExpression_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLetExpression
entryRuleLetExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLetExpressionRule()); }
	iv_ruleLetExpression=ruleLetExpression
	{ $current=$iv_ruleLetExpression.current; }
	EOF;

// Rule LetExpression
ruleLetExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='let'
		{
			newLeafNode(otherlv_0, grammarAccess.getLetExpressionAccess().getLetKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLetExpressionAccess().getVariablesVariableDeclarationParserRuleCall_1_0());
				}
				lv_variables_1_0=ruleVariableDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLetExpressionRule());
					}
					add(
						$current,
						"variables",
						lv_variables_1_0,
						"br.ufes.inf.nemo.ml2.ML2.VariableDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getLetExpressionAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLetExpressionAccess().getVariablesVariableDeclarationParserRuleCall_2_1_0());
					}
					lv_variables_3_0=ruleVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLetExpressionRule());
						}
						add(
							$current,
							"variables",
							lv_variables_3_0,
							"br.ufes.inf.nemo.ml2.ML2.VariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='in'
		{
			newLeafNode(otherlv_4, grammarAccess.getLetExpressionAccess().getInKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLetExpressionAccess().getInExpressionOclExpressionParserRuleCall_4_0());
				}
				lv_inExpression_5_0=ruleOclExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLetExpressionRule());
					}
					set(
						$current,
						"inExpression",
						lv_inExpression_5_0,
						"br.ufes.inf.nemo.ml2.ML2.OclExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_variableName_0_0=RULE_ID
				{
					newLeafNode(lv_variableName_0_0, grammarAccess.getVariableDeclarationAccess().getVariableNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"variableName",
						lv_variableName_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getVariableDeclarationAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableTypeTypeLiteralExpressionParserRuleCall_2_0());
				}
				lv_variableType_2_0=ruleTypeLiteralExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"variableType",
						lv_variableType_2_0,
						"br.ufes.inf.nemo.ml2.ML2.TypeLiteralExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='='
		{
			newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getInitialValueTermExpressionParserRuleCall_4_0());
				}
				lv_initialValue_4_0=ruleTermExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"initialValue",
						lv_initialValue_4_0,
						"br.ufes.inf.nemo.ml2.ML2.TermExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIfExpression
entryRuleIfExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfExpressionRule()); }
	iv_ruleIfExpression=ruleIfExpression
	{ $current=$iv_ruleIfExpression.current; }
	EOF;

// Rule IfExpression
ruleIfExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfExpressionAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpressionAccess().getConditionOclExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleOclExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"br.ufes.inf.nemo.ml2.ML2.OclExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getIfExpressionAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpressionAccess().getThenExpressionOclExpressionParserRuleCall_3_0());
				}
				lv_thenExpression_3_0=ruleOclExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
					}
					set(
						$current,
						"thenExpression",
						lv_thenExpression_3_0,
						"br.ufes.inf.nemo.ml2.ML2.OclExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='else'
		{
			newLeafNode(otherlv_4, grammarAccess.getIfExpressionAccess().getElseKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpressionAccess().getElseExpressionOclExpressionParserRuleCall_5_0());
				}
				lv_elseExpression_5_0=ruleOclExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
					}
					set(
						$current,
						"elseExpression",
						lv_elseExpression_5_0,
						"br.ufes.inf.nemo.ml2.ML2.OclExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='endif'
		{
			newLeafNode(otherlv_6, grammarAccess.getIfExpressionAccess().getEndifKeyword_6());
		}
	)
;

// Entry rule entryRuleImpliesExpression
entryRuleImpliesExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImpliesExpressionRule()); }
	iv_ruleImpliesExpression=ruleImpliesExpression
	{ $current=$iv_ruleImpliesExpression.current; }
	EOF;

// Rule ImpliesExpression
ruleImpliesExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getImpliesExpressionAccess().getLeftXorExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleXorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImpliesExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"br.ufes.inf.nemo.ml2.ML2.XorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='implies'
			{
				newLeafNode(otherlv_1, grammarAccess.getImpliesExpressionAccess().getImpliesKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getImpliesExpressionAccess().getRightXorExpressionParserRuleCall_1_1_0());
					}
					lv_right_2_0=ruleXorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImpliesExpressionRule());
						}
						add(
							$current,
							"right",
							lv_right_2_0,
							"br.ufes.inf.nemo.ml2.ML2.XorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXorExpression
entryRuleXorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXorExpressionRule()); }
	iv_ruleXorExpression=ruleXorExpression
	{ $current=$iv_ruleXorExpression.current; }
	EOF;

// Rule XorExpression
ruleXorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getXorExpressionAccess().getLeftOrExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleOrExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXorExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"br.ufes.inf.nemo.ml2.ML2.OrExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='xor'
			{
				newLeafNode(otherlv_1, grammarAccess.getXorExpressionAccess().getXorKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getXorExpressionAccess().getRightOrExpressionParserRuleCall_1_1_0());
					}
					lv_right_2_0=ruleOrExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXorExpressionRule());
						}
						add(
							$current,
							"right",
							lv_right_2_0,
							"br.ufes.inf.nemo.ml2.ML2.OrExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	iv_ruleOrExpression=ruleOrExpression
	{ $current=$iv_ruleOrExpression.current; }
	EOF;

// Rule OrExpression
ruleOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOrExpressionAccess().getLeftAndExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleAndExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOrExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"br.ufes.inf.nemo.ml2.ML2.AndExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='or'
			{
				newLeafNode(otherlv_1, grammarAccess.getOrExpressionAccess().getOrKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_1_0());
					}
					lv_right_2_0=ruleAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrExpressionRule());
						}
						add(
							$current,
							"right",
							lv_right_2_0,
							"br.ufes.inf.nemo.ml2.ML2.AndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	iv_ruleAndExpression=ruleAndExpression
	{ $current=$iv_ruleAndExpression.current; }
	EOF;

// Rule AndExpression
ruleAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAndExpressionAccess().getLeftComparisonExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleComparisonExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"br.ufes.inf.nemo.ml2.ML2.ComparisonExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='and'
			{
				newLeafNode(otherlv_1, grammarAccess.getAndExpressionAccess().getAndKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getRightComparisonExpressionParserRuleCall_1_1_0());
					}
					lv_right_2_0=ruleComparisonExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						add(
							$current,
							"right",
							lv_right_2_0,
							"br.ufes.inf.nemo.ml2.ML2.ComparisonExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonExpressionRule()); }
	iv_ruleComparisonExpression=ruleComparisonExpression
	{ $current=$iv_ruleComparisonExpression.current; }
	EOF;

// Rule ComparisonExpression
ruleComparisonExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonExpressionAccess().getLeftRelationalExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleRelationalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"br.ufes.inf.nemo.ml2.ML2.RelationalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRightComparisonOperationParserRuleCall_1_0());
				}
				lv_right_1_0=ruleComparisonOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
					}
					add(
						$current,
						"right",
						lv_right_1_0,
						"br.ufes.inf.nemo.ml2.ML2.ComparisonOperation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleComparisonOperation
entryRuleComparisonOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonOperationRule()); }
	iv_ruleComparisonOperation=ruleComparisonOperation
	{ $current=$iv_ruleComparisonOperation.current; }
	EOF;

// Rule ComparisonOperation
ruleComparisonOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonOperationAccess().getOperatorComparisonOperatorEnumRuleCall_0_0());
				}
				lv_operator_0_0=ruleComparisonOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonOperationRule());
					}
					set(
						$current,
						"operator",
						lv_operator_0_0,
						"br.ufes.inf.nemo.ml2.ML2.ComparisonOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonOperationAccess().getRightRelationalExpressionParserRuleCall_1_0());
				}
				lv_right_1_0=ruleRelationalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonOperationRule());
					}
					set(
						$current,
						"right",
						lv_right_1_0,
						"br.ufes.inf.nemo.ml2.ML2.RelationalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	iv_ruleRelationalExpression=ruleRelationalExpression
	{ $current=$iv_ruleRelationalExpression.current; }
	EOF;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationalExpressionAccess().getLeftAdditionExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleAdditionExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"br.ufes.inf.nemo.ml2.ML2.AdditionExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightRelationalOperationParserRuleCall_1_0());
				}
				lv_right_1_0=ruleRelationalOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
					}
					add(
						$current,
						"right",
						lv_right_1_0,
						"br.ufes.inf.nemo.ml2.ML2.RelationalOperation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleRelationalOperation
entryRuleRelationalOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationalOperationRule()); }
	iv_ruleRelationalOperation=ruleRelationalOperation
	{ $current=$iv_ruleRelationalOperation.current; }
	EOF;

// Rule RelationalOperation
ruleRelationalOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationalOperationAccess().getOperatorRelationalOperatorEnumRuleCall_0_0());
				}
				lv_operator_0_0=ruleRelationalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationalOperationRule());
					}
					set(
						$current,
						"operator",
						lv_operator_0_0,
						"br.ufes.inf.nemo.ml2.ML2.RelationalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationalOperationAccess().getRightAdditionExpressionParserRuleCall_1_0());
				}
				lv_right_1_0=ruleAdditionExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationalOperationRule());
					}
					set(
						$current,
						"right",
						lv_right_1_0,
						"br.ufes.inf.nemo.ml2.ML2.AdditionExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAdditionExpression
entryRuleAdditionExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionExpressionRule()); }
	iv_ruleAdditionExpression=ruleAdditionExpression
	{ $current=$iv_ruleAdditionExpression.current; }
	EOF;

// Rule AdditionExpression
ruleAdditionExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAdditionExpressionAccess().getLeftMultiplicationExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleMultiplicationExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdditionExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"br.ufes.inf.nemo.ml2.ML2.MultiplicationExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAdditionExpressionAccess().getRightAdditionOperationParserRuleCall_1_0());
				}
				lv_right_1_0=ruleAdditionOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdditionExpressionRule());
					}
					add(
						$current,
						"right",
						lv_right_1_0,
						"br.ufes.inf.nemo.ml2.ML2.AdditionOperation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleAdditionOperation
entryRuleAdditionOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionOperationRule()); }
	iv_ruleAdditionOperation=ruleAdditionOperation
	{ $current=$iv_ruleAdditionOperation.current; }
	EOF;

// Rule AdditionOperation
ruleAdditionOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAdditionOperationAccess().getOperatorAdditionOperatorEnumRuleCall_0_0());
				}
				lv_operator_0_0=ruleAdditionOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdditionOperationRule());
					}
					set(
						$current,
						"operator",
						lv_operator_0_0,
						"br.ufes.inf.nemo.ml2.ML2.AdditionOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAdditionOperationAccess().getRightMultiplicationExpressionParserRuleCall_1_0());
				}
				lv_right_1_0=ruleMultiplicationExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdditionOperationRule());
					}
					set(
						$current,
						"right",
						lv_right_1_0,
						"br.ufes.inf.nemo.ml2.ML2.MultiplicationExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMultiplicationExpression
entryRuleMultiplicationExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationExpressionRule()); }
	iv_ruleMultiplicationExpression=ruleMultiplicationExpression
	{ $current=$iv_ruleMultiplicationExpression.current; }
	EOF;

// Rule MultiplicationExpression
ruleMultiplicationExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getLeftUnaryExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleUnaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiplicationExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"br.ufes.inf.nemo.ml2.ML2.UnaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='*'
			{
				newLeafNode(otherlv_1, grammarAccess.getMultiplicationExpressionAccess().getAsteriskKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getRightUnaryExpressionParserRuleCall_1_1_0());
					}
					lv_right_2_0=ruleUnaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationExpressionRule());
						}
						add(
							$current,
							"right",
							lv_right_2_0,
							"br.ufes.inf.nemo.ml2.ML2.UnaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	iv_ruleUnaryExpression=ruleUnaryExpression
	{ $current=$iv_ruleUnaryExpression.current; }
	EOF;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_0_0());
				}
				lv_operator_0_0=ruleUnaryOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_0_0,
						"br.ufes.inf.nemo.ml2.ML2.UnaryOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryExpressionAccess().getRightTermExpressionParserRuleCall_1_0());
				}
				lv_right_1_0=ruleTermExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
					}
					set(
						$current,
						"right",
						lv_right_1_0,
						"br.ufes.inf.nemo.ml2.ML2.TermExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTermExpression
entryRuleTermExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermExpressionRule()); }
	iv_ruleTermExpression=ruleTermExpression
	{ $current=$iv_ruleTermExpression.current; }
	EOF;

// Rule TermExpression
ruleTermExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleCallExpression)=>
			{
				newCompositeNode(grammarAccess.getTermExpressionAccess().getCallExpressionParserRuleCall_0());
			}
			this_CallExpression_0=ruleCallExpression
			{
				$current = $this_CallExpression_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getTermExpressionAccess().getLiteralExpressionParserRuleCall_1());
		}
		this_LiteralExpression_1=ruleLiteralExpression
		{
			$current = $this_LiteralExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getTermExpressionAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getTermExpressionAccess().getOclExpressionParserRuleCall_2_1());
			}
			this_OclExpression_3=ruleOclExpression
			{
				$current = $this_OclExpression_3.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getTermExpressionAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleCallExpression
entryRuleCallExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCallExpressionRule()); }
	iv_ruleCallExpression=ruleCallExpression
	{ $current=$iv_ruleCallExpression.current; }
	EOF;

// Rule CallExpression
ruleCallExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCallExpressionAccess().getLeftVariableExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleVariableExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCallExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"br.ufes.inf.nemo.ml2.ML2.VariableExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCallExpressionAccess().getRightCallOperationParserRuleCall_1_0());
				}
				lv_right_1_0=ruleCallOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCallExpressionRule());
					}
					add(
						$current,
						"right",
						lv_right_1_0,
						"br.ufes.inf.nemo.ml2.ML2.CallOperation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleCallOperation
entryRuleCallOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCallOperationRule()); }
	iv_ruleCallOperation=ruleCallOperation
	{ $current=$iv_ruleCallOperation.current; }
	EOF;

// Rule CallOperation
ruleCallOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='.'
			{
				newLeafNode(otherlv_0, grammarAccess.getCallOperationAccess().getFullStopKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getCallOperationAccess().getDotOperationParserRuleCall_0_1());
			}
			this_DotOperation_1=ruleDotOperation
			{
				$current = $this_DotOperation_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			otherlv_2='->'
			{
				newLeafNode(otherlv_2, grammarAccess.getCallOperationAccess().getHyphenMinusGreaterThanSignKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getCallOperationAccess().getArrowOperationParserRuleCall_1_1());
			}
			this_ArrowOperation_3=ruleArrowOperation
			{
				$current = $this_ArrowOperation_3.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleDotOperation
entryRuleDotOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDotOperationRule()); }
	iv_ruleDotOperation=ruleDotOperation
	{ $current=$iv_ruleDotOperation.current; }
	EOF;

// Rule DotOperation
ruleDotOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDotOperationAccess().getUnaryNumberOperationParserRuleCall_0());
		}
		this_UnaryNumberOperation_0=ruleUnaryNumberOperation
		{
			$current = $this_UnaryNumberOperation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDotOperationAccess().getBinaryNumberOperationParserRuleCall_1());
		}
		this_BinaryNumberOperation_1=ruleBinaryNumberOperation
		{
			$current = $this_BinaryNumberOperation_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDotOperationAccess().getVariableExpressionParserRuleCall_2());
		}
		this_VariableExpression_2=ruleVariableExpression
		{
			$current = $this_VariableExpression_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleUnaryNumberOperation
entryRuleUnaryNumberOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryNumberOperationRule()); }
	iv_ruleUnaryNumberOperation=ruleUnaryNumberOperation
	{ $current=$iv_ruleUnaryNumberOperation.current; }
	EOF;

// Rule UnaryNumberOperation
ruleUnaryNumberOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryNumberOperationAccess().getOperatorUnaryNumberOperatorEnumRuleCall_0_0());
				}
				lv_operator_0_0=ruleUnaryNumberOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryNumberOperationRule());
					}
					set(
						$current,
						"operator",
						lv_operator_0_0,
						"br.ufes.inf.nemo.ml2.ML2.UnaryNumberOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getUnaryNumberOperationAccess().getLeftParenthesisKeyword_1());
		}
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getUnaryNumberOperationAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleBinaryNumberOperation
entryRuleBinaryNumberOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaryNumberOperationRule()); }
	iv_ruleBinaryNumberOperation=ruleBinaryNumberOperation
	{ $current=$iv_ruleBinaryNumberOperation.current; }
	EOF;

// Rule BinaryNumberOperation
ruleBinaryNumberOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryNumberOperationAccess().getOperatorBinaryNumberOperatorEnumRuleCall_0_0());
				}
				lv_operator_0_0=ruleBinaryNumberOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryNumberOperationRule());
					}
					set(
						$current,
						"operator",
						lv_operator_0_0,
						"br.ufes.inf.nemo.ml2.ML2.BinaryNumberOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getBinaryNumberOperationAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryNumberOperationAccess().getArgumentOclExpressionParserRuleCall_2_0());
				}
				lv_argument_2_0=ruleOclExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryNumberOperationRule());
					}
					set(
						$current,
						"argument",
						lv_argument_2_0,
						"br.ufes.inf.nemo.ml2.ML2.OclExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getBinaryNumberOperationAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleArrowOperation
entryRuleArrowOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrowOperationRule()); }
	iv_ruleArrowOperation=ruleArrowOperation
	{ $current=$iv_ruleArrowOperation.current; }
	EOF;

// Rule ArrowOperation
ruleArrowOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getArrowOperationAccess().getUnarySetOperationParserRuleCall_0());
		}
		this_UnarySetOperation_0=ruleUnarySetOperation
		{
			$current = $this_UnarySetOperation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getArrowOperationAccess().getBinarySetOperationParserRuleCall_1());
		}
		this_BinarySetOperation_1=ruleBinarySetOperation
		{
			$current = $this_BinarySetOperation_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getArrowOperationAccess().getUnaryIterationParserRuleCall_2());
		}
		this_UnaryIteration_2=ruleUnaryIteration
		{
			$current = $this_UnaryIteration_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getArrowOperationAccess().getMultiaryIterationParserRuleCall_3());
		}
		this_MultiaryIteration_3=ruleMultiaryIteration
		{
			$current = $this_MultiaryIteration_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleUnarySetOperation
entryRuleUnarySetOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnarySetOperationRule()); }
	iv_ruleUnarySetOperation=ruleUnarySetOperation
	{ $current=$iv_ruleUnarySetOperation.current; }
	EOF;

// Rule UnarySetOperation
ruleUnarySetOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnarySetOperationAccess().getOperatorUnarySetOperatorEnumRuleCall_0_0());
				}
				lv_operator_0_0=ruleUnarySetOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnarySetOperationRule());
					}
					set(
						$current,
						"operator",
						lv_operator_0_0,
						"br.ufes.inf.nemo.ml2.ML2.UnarySetOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getUnarySetOperationAccess().getLeftParenthesisKeyword_1());
		}
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getUnarySetOperationAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleBinarySetOperation
entryRuleBinarySetOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinarySetOperationRule()); }
	iv_ruleBinarySetOperation=ruleBinarySetOperation
	{ $current=$iv_ruleBinarySetOperation.current; }
	EOF;

// Rule BinarySetOperation
ruleBinarySetOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBinarySetOperationAccess().getOperatorBinarySetOperatorEnumRuleCall_0_0());
				}
				lv_operator_0_0=ruleBinarySetOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinarySetOperationRule());
					}
					set(
						$current,
						"operator",
						lv_operator_0_0,
						"br.ufes.inf.nemo.ml2.ML2.BinarySetOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getBinarySetOperationAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBinarySetOperationAccess().getArgumentOclExpressionParserRuleCall_2_0());
				}
				lv_argument_2_0=ruleOclExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinarySetOperationRule());
					}
					set(
						$current,
						"argument",
						lv_argument_2_0,
						"br.ufes.inf.nemo.ml2.ML2.OclExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getBinarySetOperationAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleUnaryIteration
entryRuleUnaryIteration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryIterationRule()); }
	iv_ruleUnaryIteration=ruleUnaryIteration
	{ $current=$iv_ruleUnaryIteration.current; }
	EOF;

// Rule UnaryIteration
ruleUnaryIteration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryIterationAccess().getIteratorUnaryIteratorEnumRuleCall_0_0());
				}
				lv_iterator_0_0=ruleUnaryIterator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryIterationRule());
					}
					set(
						$current,
						"iterator",
						lv_iterator_0_0,
						"br.ufes.inf.nemo.ml2.ML2.UnaryIterator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getUnaryIterationAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					lv_variable_2_0=RULE_ID
					{
						newLeafNode(lv_variable_2_0, grammarAccess.getUnaryIterationAccess().getVariableIDTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getUnaryIterationRule());
						}
						setWithLastConsumed(
							$current,
							"variable",
							lv_variable_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_3='|'
			{
				newLeafNode(otherlv_3, grammarAccess.getUnaryIterationAccess().getVerticalLineKeyword_2_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryIterationAccess().getBodyOclExpressionParserRuleCall_3_0());
				}
				lv_body_4_0=ruleOclExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryIterationRule());
					}
					set(
						$current,
						"body",
						lv_body_4_0,
						"br.ufes.inf.nemo.ml2.ML2.OclExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getUnaryIterationAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleMultiaryIteration
entryRuleMultiaryIteration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiaryIterationRule()); }
	iv_ruleMultiaryIteration=ruleMultiaryIteration
	{ $current=$iv_ruleMultiaryIteration.current; }
	EOF;

// Rule MultiaryIteration
ruleMultiaryIteration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiaryIterationAccess().getIteratorMultiaryIteratorEnumRuleCall_0_0());
				}
				lv_iterator_0_0=ruleMultiaryIterator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiaryIterationRule());
					}
					set(
						$current,
						"iterator",
						lv_iterator_0_0,
						"br.ufes.inf.nemo.ml2.ML2.MultiaryIterator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMultiaryIterationAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					lv_variables_2_0=RULE_ID
					{
						newLeafNode(lv_variables_2_0, grammarAccess.getMultiaryIterationAccess().getVariablesIDTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMultiaryIterationRule());
						}
						addWithLastConsumed(
							$current,
							"variables",
							lv_variables_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getMultiaryIterationAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						lv_variables_4_0=RULE_ID
						{
							newLeafNode(lv_variables_4_0, grammarAccess.getMultiaryIterationAccess().getVariablesIDTerminalRuleCall_2_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiaryIterationRule());
							}
							addWithLastConsumed(
								$current,
								"variables",
								lv_variables_4_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)+
			otherlv_5='|'
			{
				newLeafNode(otherlv_5, grammarAccess.getMultiaryIterationAccess().getVerticalLineKeyword_2_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiaryIterationAccess().getBodyOclExpressionParserRuleCall_3_0());
				}
				lv_body_6_0=ruleOclExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiaryIterationRule());
					}
					set(
						$current,
						"body",
						lv_body_6_0,
						"br.ufes.inf.nemo.ml2.ML2.OclExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getMultiaryIterationAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralExpressionRule()); }
	iv_ruleLiteralExpression=ruleLiteralExpression
	{ $current=$iv_ruleLiteralExpression.current; }
	EOF;

// Rule LiteralExpression
ruleLiteralExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralExpressionAccess().getPrimitiveLiteralExpressionParserRuleCall_0());
		}
		this_PrimitiveLiteralExpression_0=rulePrimitiveLiteralExpression
		{
			$current = $this_PrimitiveLiteralExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralExpressionAccess().getCollectionLiteralExpressionParserRuleCall_1());
		}
		this_CollectionLiteralExpression_1=ruleCollectionLiteralExpression
		{
			$current = $this_CollectionLiteralExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralExpressionAccess().getTypeLiteralExpressionParserRuleCall_2());
		}
		this_TypeLiteralExpression_2=ruleTypeLiteralExpression
		{
			$current = $this_TypeLiteralExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralExpressionAccess().getTupleLiteralExpressionParserRuleCall_3());
		}
		this_TupleLiteralExpression_3=ruleTupleLiteralExpression
		{
			$current = $this_TupleLiteralExpression_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrimitiveLiteralExpression
entryRulePrimitiveLiteralExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveLiteralExpressionRule()); }
	iv_rulePrimitiveLiteralExpression=rulePrimitiveLiteralExpression
	{ $current=$iv_rulePrimitiveLiteralExpression.current; }
	EOF;

// Rule PrimitiveLiteralExpression
rulePrimitiveLiteralExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimitiveLiteralExpressionAccess().getNullLiteralExpressionParserRuleCall_0());
		}
		this_NullLiteralExpression_0=ruleNullLiteralExpression
		{
			$current = $this_NullLiteralExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveLiteralExpressionAccess().getBooleanLiteralExpressionParserRuleCall_1());
		}
		this_BooleanLiteralExpression_1=ruleBooleanLiteralExpression
		{
			$current = $this_BooleanLiteralExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveLiteralExpressionAccess().getNumberLiteralExpressionParserRuleCall_2());
		}
		this_NumberLiteralExpression_2=ruleNumberLiteralExpression
		{
			$current = $this_NumberLiteralExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveLiteralExpressionAccess().getStringLiteralExpressionParserRuleCall_3());
		}
		this_StringLiteralExpression_3=ruleStringLiteralExpression
		{
			$current = $this_StringLiteralExpression_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNullLiteralExpression
entryRuleNullLiteralExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNullLiteralExpressionRule()); }
	iv_ruleNullLiteralExpression=ruleNullLiteralExpression
	{ $current=$iv_ruleNullLiteralExpression.current; }
	EOF;

// Rule NullLiteralExpression
ruleNullLiteralExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_nullSymbol_0_0='null'
			{
				newLeafNode(lv_nullSymbol_0_0, grammarAccess.getNullLiteralExpressionAccess().getNullSymbolNullKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNullLiteralExpressionRule());
				}
				setWithLastConsumed($current, "nullSymbol", lv_nullSymbol_0_0, "null");
			}
		)
	)
;

// Entry rule entryRuleBooleanLiteralExpression
entryRuleBooleanLiteralExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanLiteralExpressionRule()); }
	iv_ruleBooleanLiteralExpression=ruleBooleanLiteralExpression
	{ $current=$iv_ruleBooleanLiteralExpression.current; }
	EOF;

// Rule BooleanLiteralExpression
ruleBooleanLiteralExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getBooleanLiteralExpressionAccess().getBooleanSymbolBOOLEAN_LITERALParserRuleCall_0());
			}
			lv_booleanSymbol_0_0=ruleBOOLEAN_LITERAL
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getBooleanLiteralExpressionRule());
				}
				set(
					$current,
					"booleanSymbol",
					lv_booleanSymbol_0_0,
					"br.ufes.inf.nemo.ml2.ML2.BOOLEAN_LITERAL");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleNumberLiteralExpression
entryRuleNumberLiteralExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberLiteralExpressionRule()); }
	iv_ruleNumberLiteralExpression=ruleNumberLiteralExpression
	{ $current=$iv_ruleNumberLiteralExpression.current; }
	EOF;

// Rule NumberLiteralExpression
ruleNumberLiteralExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getNumberLiteralExpressionAccess().getNumberSymbolNUMBER_LITERALParserRuleCall_0());
			}
			lv_numberSymbol_0_0=ruleNUMBER_LITERAL
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getNumberLiteralExpressionRule());
				}
				set(
					$current,
					"numberSymbol",
					lv_numberSymbol_0_0,
					"br.ufes.inf.nemo.ml2.ML2.NUMBER_LITERAL");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleStringLiteralExpression
entryRuleStringLiteralExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralExpressionRule()); }
	iv_ruleStringLiteralExpression=ruleStringLiteralExpression
	{ $current=$iv_ruleStringLiteralExpression.current; }
	EOF;

// Rule StringLiteralExpression
ruleStringLiteralExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_stringSymbol_0_0=RULE_STRING
			{
				newLeafNode(lv_stringSymbol_0_0, grammarAccess.getStringLiteralExpressionAccess().getStringSymbolSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringLiteralExpressionRule());
				}
				setWithLastConsumed(
					$current,
					"stringSymbol",
					lv_stringSymbol_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleCollectionLiteralExpression
entryRuleCollectionLiteralExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollectionLiteralExpressionRule()); }
	iv_ruleCollectionLiteralExpression=ruleCollectionLiteralExpression
	{ $current=$iv_ruleCollectionLiteralExpression.current; }
	EOF;

// Rule CollectionLiteralExpression
ruleCollectionLiteralExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Set'
		{
			newLeafNode(otherlv_0, grammarAccess.getCollectionLiteralExpressionAccess().getSetKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getCollectionLiteralExpressionAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCollectionLiteralExpressionAccess().getPartsLiteralExpressionParserRuleCall_2_0());
				}
				lv_parts_2_0=ruleLiteralExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCollectionLiteralExpressionRule());
					}
					add(
						$current,
						"parts",
						lv_parts_2_0,
						"br.ufes.inf.nemo.ml2.ML2.LiteralExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getCollectionLiteralExpressionAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCollectionLiteralExpressionAccess().getPartsLiteralExpressionParserRuleCall_3_1_0());
					}
					lv_parts_4_0=ruleLiteralExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCollectionLiteralExpressionRule());
						}
						add(
							$current,
							"parts",
							lv_parts_4_0,
							"br.ufes.inf.nemo.ml2.ML2.LiteralExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getCollectionLiteralExpressionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleTypeLiteralExpression
entryRuleTypeLiteralExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeLiteralExpressionRule()); }
	iv_ruleTypeLiteralExpression=ruleTypeLiteralExpression
	{ $current=$iv_ruleTypeLiteralExpression.current; }
	EOF;

// Rule TypeLiteralExpression
ruleTypeLiteralExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeLiteralExpressionAccess().getPrimitiveTypeNameParserRuleCall_0());
		}
		this_PrimitiveTypeName_0=rulePrimitiveTypeName
		{
			$current = $this_PrimitiveTypeName_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLiteralExpressionAccess().getCollectionTypeNameParserRuleCall_1());
		}
		this_CollectionTypeName_1=ruleCollectionTypeName
		{
			$current = $this_CollectionTypeName_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLiteralExpressionAccess().getTupleTypeNameParserRuleCall_2());
		}
		this_TupleTypeName_2=ruleTupleTypeName
		{
			$current = $this_TupleTypeName_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLiteralExpressionAccess().getOclTypeNameParserRuleCall_3());
		}
		this_OclTypeName_3=ruleOclTypeName
		{
			$current = $this_OclTypeName_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLiteralExpressionAccess().getDataTypeNameParserRuleCall_4());
		}
		this_DataTypeName_4=ruleDataTypeName
		{
			$current = $this_DataTypeName_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTupleLiteralExpression
entryRuleTupleLiteralExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTupleLiteralExpressionRule()); }
	iv_ruleTupleLiteralExpression=ruleTupleLiteralExpression
	{ $current=$iv_ruleTupleLiteralExpression.current; }
	EOF;

// Rule TupleLiteralExpression
ruleTupleLiteralExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Tuple'
		{
			newLeafNode(otherlv_0, grammarAccess.getTupleLiteralExpressionAccess().getTupleKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getTupleLiteralExpressionAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				lv_variables_2_0=RULE_ID
				{
					newLeafNode(lv_variables_2_0, grammarAccess.getTupleLiteralExpressionAccess().getVariablesIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTupleLiteralExpressionRule());
					}
					addWithLastConsumed(
						$current,
						"variables",
						lv_variables_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getTupleLiteralExpressionAccess().getCommaKeyword_3_0());
			}
			(
				(
					lv_variables_4_0=RULE_ID
					{
						newLeafNode(lv_variables_4_0, grammarAccess.getTupleLiteralExpressionAccess().getVariablesIDTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTupleLiteralExpressionRule());
						}
						addWithLastConsumed(
							$current,
							"variables",
							lv_variables_4_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getTupleLiteralExpressionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleVariableExpression
entryRuleVariableExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableExpressionRule()); }
	iv_ruleVariableExpression=ruleVariableExpression
	{ $current=$iv_ruleVariableExpression.current; }
	EOF;

// Rule VariableExpression
ruleVariableExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_referringVariable_0_0=RULE_ID
				{
					newLeafNode(lv_referringVariable_0_0, grammarAccess.getVariableExpressionAccess().getReferringVariableIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableExpressionRule());
					}
					setWithLastConsumed(
						$current,
						"referringVariable",
						lv_referringVariable_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		    |
		(
			(
				lv_referringVariable_1_0='self'
				{
					newLeafNode(lv_referringVariable_1_0, grammarAccess.getVariableExpressionAccess().getReferringVariableSelfKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableExpressionRule());
					}
					setWithLastConsumed($current, "referringVariable", lv_referringVariable_1_0, "self");
				}
			)
		)
	)
;

// Entry rule entryRuleBOOLEAN_LITERAL
entryRuleBOOLEAN_LITERAL returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBOOLEAN_LITERALRule()); }
	iv_ruleBOOLEAN_LITERAL=ruleBOOLEAN_LITERAL
	{ $current=$iv_ruleBOOLEAN_LITERAL.current.getText(); }
	EOF;

// Rule BOOLEAN_LITERAL
ruleBOOLEAN_LITERAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBOOLEAN_LITERALAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBOOLEAN_LITERALAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleNUMBER_LITERAL
entryRuleNUMBER_LITERAL returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNUMBER_LITERALRule()); }
	iv_ruleNUMBER_LITERAL=ruleNUMBER_LITERAL
	{ $current=$iv_ruleNUMBER_LITERAL.current.getText(); }
	EOF;

// Rule NUMBER_LITERAL
ruleNUMBER_LITERAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getNUMBER_LITERALAccess().getINTTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNUMBER_LITERALAccess().getFullStopKeyword_1_0());
			}
			this_INT_2=RULE_INT
			{
				$current.merge(this_INT_2);
			}
			{
				newLeafNode(this_INT_2, grammarAccess.getNUMBER_LITERALAccess().getINTTerminalRuleCall_1_1());
			}
		)?
	)
;

// Entry rule entryRulePrimitiveTypeName
entryRulePrimitiveTypeName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeNameRule()); }
	iv_rulePrimitiveTypeName=rulePrimitiveTypeName
	{ $current=$iv_rulePrimitiveTypeName.current; }
	EOF;

// Rule PrimitiveTypeName
rulePrimitiveTypeName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_typename_0_0='Boolean'
				{
					newLeafNode(lv_typename_0_0, grammarAccess.getPrimitiveTypeNameAccess().getTypenameBooleanKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimitiveTypeNameRule());
					}
					setWithLastConsumed($current, "typename", lv_typename_0_0, "Boolean");
				}
			)
		)
		    |
		(
			(
				lv_typename_1_0='Number'
				{
					newLeafNode(lv_typename_1_0, grammarAccess.getPrimitiveTypeNameAccess().getTypenameNumberKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimitiveTypeNameRule());
					}
					setWithLastConsumed($current, "typename", lv_typename_1_0, "Number");
				}
			)
		)
		    |
		(
			(
				lv_typename_2_0='String'
				{
					newLeafNode(lv_typename_2_0, grammarAccess.getPrimitiveTypeNameAccess().getTypenameStringKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimitiveTypeNameRule());
					}
					setWithLastConsumed($current, "typename", lv_typename_2_0, "String");
				}
			)
		)
	)
;

// Entry rule entryRuleCollectionTypeName
entryRuleCollectionTypeName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollectionTypeNameRule()); }
	iv_ruleCollectionTypeName=ruleCollectionTypeName
	{ $current=$iv_ruleCollectionTypeName.current; }
	EOF;

// Rule CollectionTypeName
ruleCollectionTypeName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_typename_0_0='Set'
				{
					newLeafNode(lv_typename_0_0, grammarAccess.getCollectionTypeNameAccess().getTypenameSetKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCollectionTypeNameRule());
					}
					setWithLastConsumed($current, "typename", lv_typename_0_0, "Set");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getCollectionTypeNameAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCollectionTypeNameAccess().getElementTypeTypeLiteralExpressionParserRuleCall_2_0());
				}
				lv_elementType_2_0=ruleTypeLiteralExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCollectionTypeNameRule());
					}
					set(
						$current,
						"elementType",
						lv_elementType_2_0,
						"br.ufes.inf.nemo.ml2.ML2.TypeLiteralExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getCollectionTypeNameAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleTupleTypeName
entryRuleTupleTypeName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTupleTypeNameRule()); }
	iv_ruleTupleTypeName=ruleTupleTypeName
	{ $current=$iv_ruleTupleTypeName.current; }
	EOF;

// Rule TupleTypeName
ruleTupleTypeName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_typename_0_0='Tuple'
				{
					newLeafNode(lv_typename_0_0, grammarAccess.getTupleTypeNameAccess().getTypenameTupleKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTupleTypeNameRule());
					}
					setWithLastConsumed($current, "typename", lv_typename_0_0, "Tuple");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getTupleTypeNameAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					lv_variables_2_0=RULE_ID
					{
						newLeafNode(lv_variables_2_0, grammarAccess.getTupleTypeNameAccess().getVariablesIDTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTupleTypeNameRule());
						}
						addWithLastConsumed(
							$current,
							"variables",
							lv_variables_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getTupleTypeNameAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						lv_variables_4_0=RULE_ID
						{
							newLeafNode(lv_variables_4_0, grammarAccess.getTupleTypeNameAccess().getVariablesIDTerminalRuleCall_2_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTupleTypeNameRule());
							}
							addWithLastConsumed(
								$current,
								"variables",
								lv_variables_4_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getTupleTypeNameAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleOclTypeName
entryRuleOclTypeName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOclTypeNameRule()); }
	iv_ruleOclTypeName=ruleOclTypeName
	{ $current=$iv_ruleOclTypeName.current; }
	EOF;

// Rule OclTypeName
ruleOclTypeName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_typename_0_0='OclAny'
				{
					newLeafNode(lv_typename_0_0, grammarAccess.getOclTypeNameAccess().getTypenameOclAnyKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOclTypeNameRule());
					}
					setWithLastConsumed($current, "typename", lv_typename_0_0, "OclAny");
				}
			)
		)
		    |
		(
			(
				lv_typename_1_0='OclVoid'
				{
					newLeafNode(lv_typename_1_0, grammarAccess.getOclTypeNameAccess().getTypenameOclVoidKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOclTypeNameRule());
					}
					setWithLastConsumed($current, "typename", lv_typename_1_0, "OclVoid");
				}
			)
		)
	)
;

// Entry rule entryRuleDataTypeName
entryRuleDataTypeName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataTypeNameRule()); }
	iv_ruleDataTypeName=ruleDataTypeName
	{ $current=$iv_ruleDataTypeName.current; }
	EOF;

// Rule DataTypeName
ruleDataTypeName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getDataTypeNameRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getDataTypeNameAccess().getTypenameDataTypeCrossReference_0());
			}
		)
	)
;

// Rule CategorizationType
ruleCategorizationType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='categorizes'
			{
				$current = grammarAccess.getCategorizationTypeAccess().getCATEGORIZEREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCategorizationTypeAccess().getCATEGORIZEREnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='completeCategorizes'
			{
				$current = grammarAccess.getCategorizationTypeAccess().getCOMPLETE_CATEGORIZEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCategorizationTypeAccess().getCOMPLETE_CATEGORIZEREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='disjointCategorizes'
			{
				$current = grammarAccess.getCategorizationTypeAccess().getDISJOINT_CATEGORIZEREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCategorizationTypeAccess().getDISJOINT_CATEGORIZEREnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='partitions'
			{
				$current = grammarAccess.getCategorizationTypeAccess().getPARTITIONEREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCategorizationTypeAccess().getPARTITIONEREnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule PrimitiveType
rulePrimitiveType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='String'
			{
				$current = grammarAccess.getPrimitiveTypeAccess().getSTRINGEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getPrimitiveTypeAccess().getSTRINGEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Number'
			{
				$current = grammarAccess.getPrimitiveTypeAccess().getNUMBEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getPrimitiveTypeAccess().getNUMBEREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Boolean'
			{
				$current = grammarAccess.getPrimitiveTypeAccess().getBOOLEANEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getPrimitiveTypeAccess().getBOOLEANEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule RegularityFeatureType
ruleRegularityFeatureType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='determinesMaxValue'
			{
				$current = grammarAccess.getRegularityFeatureTypeAccess().getDETERMINES_MAX_VALUEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRegularityFeatureTypeAccess().getDETERMINES_MAX_VALUEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='determinesMinValue'
			{
				$current = grammarAccess.getRegularityFeatureTypeAccess().getDETERMINES_MIN_VALUEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRegularityFeatureTypeAccess().getDETERMINES_MIN_VALUEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='determinesValue'
			{
				$current = grammarAccess.getRegularityFeatureTypeAccess().getDETERMINES_VALUEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getRegularityFeatureTypeAccess().getDETERMINES_VALUEEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='determinesAllowedValues'
			{
				$current = grammarAccess.getRegularityFeatureTypeAccess().getDETERMINES_ALLOWED_VALUESEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getRegularityFeatureTypeAccess().getDETERMINES_ALLOWED_VALUESEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='determinesType'
			{
				$current = grammarAccess.getRegularityFeatureTypeAccess().getDETERMINES_TYPEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getRegularityFeatureTypeAccess().getDETERMINES_TYPEEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='determinesAllowedTypes'
			{
				$current = grammarAccess.getRegularityFeatureTypeAccess().getDETERMINES_ALLOWED_TYPESEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getRegularityFeatureTypeAccess().getDETERMINES_ALLOWED_TYPESEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule ComparisonOperator
ruleComparisonOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='='
			{
				$current = grammarAccess.getComparisonOperatorAccess().getEQUALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getComparisonOperatorAccess().getEQUALEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<>'
			{
				$current = grammarAccess.getComparisonOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getComparisonOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule RelationalOperator
ruleRelationalOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='>'
			{
				$current = grammarAccess.getRelationalOperatorAccess().getGREATEREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRelationalOperatorAccess().getGREATEREnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<'
			{
				$current = grammarAccess.getRelationalOperatorAccess().getLESSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRelationalOperatorAccess().getLESSEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='>='
			{
				$current = grammarAccess.getRelationalOperatorAccess().getGREATER_EQUALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getRelationalOperatorAccess().getGREATER_EQUALEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='<='
			{
				$current = grammarAccess.getRelationalOperatorAccess().getLESS_EQUALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getRelationalOperatorAccess().getLESS_EQUALEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule AdditionOperator
ruleAdditionOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getAdditionOperatorAccess().getPLUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAdditionOperatorAccess().getPLUSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getAdditionOperatorAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAdditionOperatorAccess().getMINUSEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule UnaryOperator
ruleUnaryOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='NONE'
			{
				$current = grammarAccess.getUnaryOperatorAccess().getNONEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorAccess().getNONEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='not'
			{
				$current = grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='-'
			{
				$current = grammarAccess.getUnaryOperatorAccess().getMINUSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getUnaryOperatorAccess().getMINUSEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule UnaryNumberOperator
ruleUnaryNumberOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='abs'
			{
				$current = grammarAccess.getUnaryNumberOperatorAccess().getABSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getUnaryNumberOperatorAccess().getABSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='floor'
			{
				$current = grammarAccess.getUnaryNumberOperatorAccess().getFLOOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getUnaryNumberOperatorAccess().getFLOOREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='round'
			{
				$current = grammarAccess.getUnaryNumberOperatorAccess().getROUNDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getUnaryNumberOperatorAccess().getROUNDEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule BinaryNumberOperator
ruleBinaryNumberOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='min'
			{
				$current = grammarAccess.getBinaryNumberOperatorAccess().getMINEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBinaryNumberOperatorAccess().getMINEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='max'
			{
				$current = grammarAccess.getBinaryNumberOperatorAccess().getMAXEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBinaryNumberOperatorAccess().getMAXEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='div'
			{
				$current = grammarAccess.getBinaryNumberOperatorAccess().getDIVEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getBinaryNumberOperatorAccess().getDIVEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule UnarySetOperator
ruleUnarySetOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='size'
			{
				$current = grammarAccess.getUnarySetOperatorAccess().getSIZEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getUnarySetOperatorAccess().getSIZEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='isEmpty'
			{
				$current = grammarAccess.getUnarySetOperatorAccess().getIS_EMPTYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getUnarySetOperatorAccess().getIS_EMPTYEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='notEmpty'
			{
				$current = grammarAccess.getUnarySetOperatorAccess().getNOT_EMPTYEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getUnarySetOperatorAccess().getNOT_EMPTYEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='sum'
			{
				$current = grammarAccess.getUnarySetOperatorAccess().getSUMEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getUnarySetOperatorAccess().getSUMEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='min'
			{
				$current = grammarAccess.getUnarySetOperatorAccess().getMINEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getUnarySetOperatorAccess().getMINEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='max'
			{
				$current = grammarAccess.getUnarySetOperatorAccess().getMAXEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getUnarySetOperatorAccess().getMAXEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='asSet'
			{
				$current = grammarAccess.getUnarySetOperatorAccess().getAS_SETEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getUnarySetOperatorAccess().getAS_SETEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='flatten'
			{
				$current = grammarAccess.getUnarySetOperatorAccess().getFLATTENEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getUnarySetOperatorAccess().getFLATTENEnumLiteralDeclaration_7());
			}
		)
	)
;

// Rule BinarySetOperator
ruleBinarySetOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='includes'
			{
				$current = grammarAccess.getBinarySetOperatorAccess().getINCLUDESEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBinarySetOperatorAccess().getINCLUDESEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='includesAll'
			{
				$current = grammarAccess.getBinarySetOperatorAccess().getINCLUDES_ALLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBinarySetOperatorAccess().getINCLUDES_ALLEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='excludes'
			{
				$current = grammarAccess.getBinarySetOperatorAccess().getEXCLUDESEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getBinarySetOperatorAccess().getEXCLUDESEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='excludesAll'
			{
				$current = grammarAccess.getBinarySetOperatorAccess().getEXCLUDES_ALLEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getBinarySetOperatorAccess().getEXCLUDES_ALLEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='including'
			{
				$current = grammarAccess.getBinarySetOperatorAccess().getINCLUDINGEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getBinarySetOperatorAccess().getINCLUDINGEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='excluding'
			{
				$current = grammarAccess.getBinarySetOperatorAccess().getEXCLUDINGEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getBinarySetOperatorAccess().getEXCLUDINGEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='count'
			{
				$current = grammarAccess.getBinarySetOperatorAccess().getCOUNTEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getBinarySetOperatorAccess().getCOUNTEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='union'
			{
				$current = grammarAccess.getBinarySetOperatorAccess().getUNIONEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getBinarySetOperatorAccess().getUNIONEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='intersection'
			{
				$current = grammarAccess.getBinarySetOperatorAccess().getINTERSECTIONEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getBinarySetOperatorAccess().getINTERSECTIONEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='symmetricDifference'
			{
				$current = grammarAccess.getBinarySetOperatorAccess().getSYMMETRIC_DIFFERENCEEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getBinarySetOperatorAccess().getSYMMETRIC_DIFFERENCEEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='product'
			{
				$current = grammarAccess.getBinarySetOperatorAccess().getPRODUCTEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getBinarySetOperatorAccess().getPRODUCTEnumLiteralDeclaration_10());
			}
		)
	)
;

// Rule UnaryIterator
ruleUnaryIterator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='select'
			{
				$current = grammarAccess.getUnaryIteratorAccess().getSELECTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getUnaryIteratorAccess().getSELECTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='reject'
			{
				$current = grammarAccess.getUnaryIteratorAccess().getREJECTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getUnaryIteratorAccess().getREJECTEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='collect'
			{
				$current = grammarAccess.getUnaryIteratorAccess().getCOLLECTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getUnaryIteratorAccess().getCOLLECTEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='any'
			{
				$current = grammarAccess.getUnaryIteratorAccess().getANYEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getUnaryIteratorAccess().getANYEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='one'
			{
				$current = grammarAccess.getUnaryIteratorAccess().getONEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getUnaryIteratorAccess().getONEEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='isUnique'
			{
				$current = grammarAccess.getUnaryIteratorAccess().getIS_UNIQUEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getUnaryIteratorAccess().getIS_UNIQUEEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='closure'
			{
				$current = grammarAccess.getUnaryIteratorAccess().getCLOSUREEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getUnaryIteratorAccess().getCLOSUREEnumLiteralDeclaration_6());
			}
		)
	)
;

// Rule MultiaryIterator
ruleMultiaryIterator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='exists'
			{
				$current = grammarAccess.getMultiaryIteratorAccess().getEXISTSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMultiaryIteratorAccess().getEXISTSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='forAll'
			{
				$current = grammarAccess.getMultiaryIteratorAccess().getFOR_ALLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMultiaryIteratorAccess().getFOR_ALLEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
