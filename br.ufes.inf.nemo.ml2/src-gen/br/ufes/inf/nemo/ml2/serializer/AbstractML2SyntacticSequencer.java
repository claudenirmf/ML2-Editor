/*
 * generated by Xtext 2.21.0
 */
package br.ufes.inf.nemo.ml2.serializer;

import br.ufes.inf.nemo.ml2.services.ML2GrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public abstract class AbstractML2SyntacticSequencer extends AbstractSyntacticSequencer {

	protected ML2GrammarAccess grammarAccess;
	protected AbstractElementAlias match_Attribute_AttKeyword_1_0_q;
	protected AbstractElementAlias match_DataType___LeftCurlyBracketKeyword_4_0_RightCurlyBracketKeyword_4_2__q;
	protected AbstractElementAlias match_FirstOrderClass___LeftCurlyBracketKeyword_4_0_RightCurlyBracketKeyword_4_2__q;
	protected AbstractElementAlias match_HighOrderClass___LeftCurlyBracketKeyword_8_0_RightCurlyBracketKeyword_8_2__q;
	protected AbstractElementAlias match_Individual___LeftCurlyBracketKeyword_5_0_RightCurlyBracketKeyword_5_2__q;
	protected AbstractElementAlias match_Literal_BOOLEANParserRuleCall_2_or_NUMBERParserRuleCall_1_or_STRINGTerminalRuleCall_0;
	protected AbstractElementAlias match_MultipleAttributeAssignment_AttKeyword_0_q;
	protected AbstractElementAlias match_OrderlessClass___LeftCurlyBracketKeyword_7_0_RightCurlyBracketKeyword_7_2__q;
	protected AbstractElementAlias match_RegularityAttribute_AttKeyword_1_q;
	protected AbstractElementAlias match_RegularityAttribute_RegularityKeyword_0_q;
	protected AbstractElementAlias match_RegularityReference_RegularityKeyword_0_q;
	protected AbstractElementAlias match_SingleAttributeAssignment_AttKeyword_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ML2GrammarAccess) access;
		match_Attribute_AttKeyword_1_0_q = new TokenAlias(false, true, grammarAccess.getAttributeAccess().getAttKeyword_1_0());
		match_DataType___LeftCurlyBracketKeyword_4_0_RightCurlyBracketKeyword_4_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getDataTypeAccess().getLeftCurlyBracketKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getDataTypeAccess().getRightCurlyBracketKeyword_4_2()));
		match_FirstOrderClass___LeftCurlyBracketKeyword_4_0_RightCurlyBracketKeyword_4_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getFirstOrderClassAccess().getLeftCurlyBracketKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getFirstOrderClassAccess().getRightCurlyBracketKeyword_4_2()));
		match_HighOrderClass___LeftCurlyBracketKeyword_8_0_RightCurlyBracketKeyword_8_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getHighOrderClassAccess().getLeftCurlyBracketKeyword_8_0()), new TokenAlias(false, false, grammarAccess.getHighOrderClassAccess().getRightCurlyBracketKeyword_8_2()));
		match_Individual___LeftCurlyBracketKeyword_5_0_RightCurlyBracketKeyword_5_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getIndividualAccess().getLeftCurlyBracketKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getIndividualAccess().getRightCurlyBracketKeyword_5_2()));
		match_Literal_BOOLEANParserRuleCall_2_or_NUMBERParserRuleCall_1_or_STRINGTerminalRuleCall_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getLiteralAccess().getBOOLEANParserRuleCall_2()), new TokenAlias(false, false, grammarAccess.getLiteralAccess().getNUMBERParserRuleCall_1()), new TokenAlias(false, false, grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_0()));
		match_MultipleAttributeAssignment_AttKeyword_0_q = new TokenAlias(false, true, grammarAccess.getMultipleAttributeAssignmentAccess().getAttKeyword_0());
		match_OrderlessClass___LeftCurlyBracketKeyword_7_0_RightCurlyBracketKeyword_7_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOrderlessClassAccess().getLeftCurlyBracketKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getOrderlessClassAccess().getRightCurlyBracketKeyword_7_2()));
		match_RegularityAttribute_AttKeyword_1_q = new TokenAlias(false, true, grammarAccess.getRegularityAttributeAccess().getAttKeyword_1());
		match_RegularityAttribute_RegularityKeyword_0_q = new TokenAlias(false, true, grammarAccess.getRegularityAttributeAccess().getRegularityKeyword_0());
		match_RegularityReference_RegularityKeyword_0_q = new TokenAlias(false, true, grammarAccess.getRegularityReferenceAccess().getRegularityKeyword_0());
		match_SingleAttributeAssignment_AttKeyword_0_q = new TokenAlias(false, true, grammarAccess.getSingleAttributeAssignmentAccess().getAttKeyword_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBOOLEANRule())
			return getBOOLEANToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNUMBERRule())
			return getNUMBERToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSTRINGRule())
			return getSTRINGToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * BOOLEAN returns ecore::EBoolean:
	 * 	'true' | 'false'
	 * ;
	 */
	protected String getBOOLEANToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "true";
	}
	
	/**
	 * NUMBER returns ecore::EDouble:
	 * 	'-'? INT ( '.' INT )? 
	 * ;
	 */
	protected String getNUMBERToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal STRING:
	 * 			'"' ( '\\' .  | !('\\'|'"') )* '"' |
	 * 			"'" ( '\\' .  | !('\\'|"'") )* "'"
	 * 		;
	 */
	protected String getSTRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Attribute_AttKeyword_1_0_q.equals(syntax))
				emit_Attribute_AttKeyword_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DataType___LeftCurlyBracketKeyword_4_0_RightCurlyBracketKeyword_4_2__q.equals(syntax))
				emit_DataType___LeftCurlyBracketKeyword_4_0_RightCurlyBracketKeyword_4_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FirstOrderClass___LeftCurlyBracketKeyword_4_0_RightCurlyBracketKeyword_4_2__q.equals(syntax))
				emit_FirstOrderClass___LeftCurlyBracketKeyword_4_0_RightCurlyBracketKeyword_4_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_HighOrderClass___LeftCurlyBracketKeyword_8_0_RightCurlyBracketKeyword_8_2__q.equals(syntax))
				emit_HighOrderClass___LeftCurlyBracketKeyword_8_0_RightCurlyBracketKeyword_8_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Individual___LeftCurlyBracketKeyword_5_0_RightCurlyBracketKeyword_5_2__q.equals(syntax))
				emit_Individual___LeftCurlyBracketKeyword_5_0_RightCurlyBracketKeyword_5_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Literal_BOOLEANParserRuleCall_2_or_NUMBERParserRuleCall_1_or_STRINGTerminalRuleCall_0.equals(syntax))
				emit_Literal_BOOLEANParserRuleCall_2_or_NUMBERParserRuleCall_1_or_STRINGTerminalRuleCall_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MultipleAttributeAssignment_AttKeyword_0_q.equals(syntax))
				emit_MultipleAttributeAssignment_AttKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OrderlessClass___LeftCurlyBracketKeyword_7_0_RightCurlyBracketKeyword_7_2__q.equals(syntax))
				emit_OrderlessClass___LeftCurlyBracketKeyword_7_0_RightCurlyBracketKeyword_7_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RegularityAttribute_AttKeyword_1_q.equals(syntax))
				emit_RegularityAttribute_AttKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RegularityAttribute_RegularityKeyword_0_q.equals(syntax))
				emit_RegularityAttribute_RegularityKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RegularityReference_RegularityKeyword_0_q.equals(syntax))
				emit_RegularityReference_RegularityKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SingleAttributeAssignment_AttKeyword_0_q.equals(syntax))
				emit_SingleAttributeAssignment_AttKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'att'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 */
	protected void emit_Attribute_AttKeyword_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     classifiers+=[Class|QualifiedName] (ambiguity) ';' (rule end)
	 *     classifiers+=[Class|QualifiedName] (ambiguity) (rule end)
	 *     name=ID (ambiguity) ';' (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     superClasses+=[Class|QualifiedName] (ambiguity) ';' (rule end)
	 *     superClasses+=[Class|QualifiedName] (ambiguity) (rule end)
	 */
	protected void emit_DataType___LeftCurlyBracketKeyword_4_0_RightCurlyBracketKeyword_4_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     classifiers+=[Class|QualifiedName] (ambiguity) ';' (rule end)
	 *     classifiers+=[Class|QualifiedName] (ambiguity) (rule end)
	 *     name=ID (ambiguity) ';' (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     superClasses+=[Class|QualifiedName] (ambiguity) ';' (rule end)
	 *     superClasses+=[Class|QualifiedName] (ambiguity) (rule end)
	 */
	protected void emit_FirstOrderClass___LeftCurlyBracketKeyword_4_0_RightCurlyBracketKeyword_4_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     categorizedClass=[Class|QualifiedName] (ambiguity) ';' (rule end)
	 *     categorizedClass=[Class|QualifiedName] (ambiguity) (rule end)
	 *     classifiers+=[Class|QualifiedName] (ambiguity) ';' (rule end)
	 *     classifiers+=[Class|QualifiedName] (ambiguity) (rule end)
	 *     name=ID (ambiguity) ';' (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     powertypeOf=[Class|QualifiedName] (ambiguity) ';' (rule end)
	 *     powertypeOf=[Class|QualifiedName] (ambiguity) (rule end)
	 *     subordinators+=[HigherOrderClass|QualifiedName] (ambiguity) ';' (rule end)
	 *     subordinators+=[HigherOrderClass|QualifiedName] (ambiguity) (rule end)
	 *     superClasses+=[Class|QualifiedName] (ambiguity) ';' (rule end)
	 *     superClasses+=[Class|QualifiedName] (ambiguity) (rule end)
	 */
	protected void emit_HighOrderClass___LeftCurlyBracketKeyword_8_0_RightCurlyBracketKeyword_8_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     classifiers+=[Class|QualifiedName] (ambiguity) ';' (rule end)
	 *     classifiers+=[Class|QualifiedName] (ambiguity) (rule end)
	 */
	protected void emit_Individual___LeftCurlyBracketKeyword_5_0_RightCurlyBracketKeyword_5_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     STRING | NUMBER | BOOLEAN
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Literal_BOOLEANParserRuleCall_2_or_NUMBERParserRuleCall_1_or_STRINGTerminalRuleCall_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'att'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) attribute=[Attribute|QualifiedName]
	 */
	protected void emit_MultipleAttributeAssignment_AttKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     categorizedClass=[Class|QualifiedName] (ambiguity) ';' (rule end)
	 *     categorizedClass=[Class|QualifiedName] (ambiguity) (rule end)
	 *     classifiers+=[Class|QualifiedName] (ambiguity) ';' (rule end)
	 *     classifiers+=[Class|QualifiedName] (ambiguity) (rule end)
	 *     name=ID (ambiguity) ';' (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     powertypeOf=[Class|QualifiedName] (ambiguity) ';' (rule end)
	 *     powertypeOf=[Class|QualifiedName] (ambiguity) (rule end)
	 *     subordinators+=[HigherOrderClass|QualifiedName] (ambiguity) ';' (rule end)
	 *     subordinators+=[HigherOrderClass|QualifiedName] (ambiguity) (rule end)
	 *     superClasses+=[Class|QualifiedName] (ambiguity) ';' (rule end)
	 *     superClasses+=[Class|QualifiedName] (ambiguity) (rule end)
	 */
	protected void emit_OrderlessClass___LeftCurlyBracketKeyword_7_0_RightCurlyBracketKeyword_7_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'att'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'regularity'? (ambiguity) name=ID
	 */
	protected void emit_RegularityAttribute_AttKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'regularity'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'att'? name=ID
	 */
	protected void emit_RegularityAttribute_RegularityKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'regularity'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'ref' name=ID
	 */
	protected void emit_RegularityReference_RegularityKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'att'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) attribute=[Attribute|QualifiedName]
	 */
	protected void emit_SingleAttributeAssignment_AttKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
