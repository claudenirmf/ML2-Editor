/*
 * generated by Xtext 2.21.0
 */
package br.ufes.inf.nemo.ml2.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ML2GrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cIncludeKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cIncludesAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final CrossReference cIncludesModelCrossReference_3_0_1_0 = (CrossReference)cIncludesAssignment_3_0_1.eContents().get(0);
		private final RuleCall cIncludesModelQualifiedNameParserRuleCall_3_0_1_0_1 = (RuleCall)cIncludesModelCrossReference_3_0_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cElementsModelElementParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Model:
		//	'module' name=QualifiedName
		//	'{' ('include' includes+=[Model|QualifiedName] ';' | elements+=ModelElement)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'module' name=QualifiedName '{' ('include' includes+=[Model|QualifiedName] ';' | elements+=ModelElement)* '}'
		public Group getGroup() { return cGroup; }
		
		//'module'
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('include' includes+=[Model|QualifiedName] ';' | elements+=ModelElement)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'include' includes+=[Model|QualifiedName] ';'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'include'
		public Keyword getIncludeKeyword_3_0_0() { return cIncludeKeyword_3_0_0; }
		
		//includes+=[Model|QualifiedName]
		public Assignment getIncludesAssignment_3_0_1() { return cIncludesAssignment_3_0_1; }
		
		//[Model|QualifiedName]
		public CrossReference getIncludesModelCrossReference_3_0_1_0() { return cIncludesModelCrossReference_3_0_1_0; }
		
		//QualifiedName
		public RuleCall getIncludesModelQualifiedNameParserRuleCall_3_0_1_0_1() { return cIncludesModelQualifiedNameParserRuleCall_3_0_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0_2() { return cSemicolonKeyword_3_0_2; }
		
		//elements+=ModelElement
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }
		
		//ModelElement
		public RuleCall getElementsModelElementParserRuleCall_3_1_0() { return cElementsModelElementParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' importedNamespace=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class ModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.ModelElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cImportParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cEntityDeclarationParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cGeneralizationSetParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cConstraintDeclarationParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ModelElement:
		//	(Import | EntityDeclaration | GeneralizationSet | ConstraintDeclaration) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(Import | EntityDeclaration | GeneralizationSet | ConstraintDeclaration) ';'
		public Group getGroup() { return cGroup; }
		
		//(Import | EntityDeclaration | GeneralizationSet | ConstraintDeclaration)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Import
		public RuleCall getImportParserRuleCall_0_0() { return cImportParserRuleCall_0_0; }
		
		//EntityDeclaration
		public RuleCall getEntityDeclarationParserRuleCall_0_1() { return cEntityDeclarationParserRuleCall_0_1; }
		
		//GeneralizationSet
		public RuleCall getGeneralizationSetParserRuleCall_0_2() { return cGeneralizationSetParserRuleCall_0_2; }
		
		//ConstraintDeclaration
		public RuleCall getConstraintDeclarationParserRuleCall_0_3() { return cConstraintDeclarationParserRuleCall_0_3; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class AllModelElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.AllModelElements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGeneralizationSetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFeatureParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFeatureAssignmentParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AllModelElements ModelElement:
		//	Import | EntityDeclaration | GeneralizationSet | Feature | FeatureAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//Import | EntityDeclaration | GeneralizationSet | Feature | FeatureAssignment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Import
		public RuleCall getImportParserRuleCall_0() { return cImportParserRuleCall_0; }
		
		//EntityDeclaration
		public RuleCall getEntityDeclarationParserRuleCall_1() { return cEntityDeclarationParserRuleCall_1; }
		
		//GeneralizationSet
		public RuleCall getGeneralizationSetParserRuleCall_2() { return cGeneralizationSetParserRuleCall_2; }
		
		//Feature
		public RuleCall getFeatureParserRuleCall_3() { return cFeatureParserRuleCall_3; }
		
		//FeatureAssignment
		public RuleCall getFeatureAssignmentParserRuleCall_4() { return cFeatureAssignmentParserRuleCall_4; }
	}
	public class EntityDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.EntityDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIndividualParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EntityDeclaration:
		//	Class | Individual;
		@Override public ParserRule getRule() { return rule; }
		
		//Class | Individual
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Class
		public RuleCall getClassParserRuleCall_0() { return cClassParserRuleCall_0; }
		
		//Individual
		public RuleCall getIndividualParserRuleCall_1() { return cIndividualParserRuleCall_1; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.Class");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFirstOrderClassOrDataTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHigherOrderClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Class:
		//	FirstOrderClassOrDataType | HigherOrderClass;
		@Override public ParserRule getRule() { return rule; }
		
		//FirstOrderClassOrDataType | HigherOrderClass
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FirstOrderClassOrDataType
		public RuleCall getFirstOrderClassOrDataTypeParserRuleCall_0() { return cFirstOrderClassOrDataTypeParserRuleCall_0; }
		
		//HigherOrderClass
		public RuleCall getHigherOrderClassParserRuleCall_1() { return cHigherOrderClassParserRuleCall_1; }
	}
	public class FirstOrderClassOrDataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.FirstOrderClassOrDataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFirstOrderClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FirstOrderClassOrDataType FirstOrderClass:
		//	FirstOrderClass | DataType;
		@Override public ParserRule getRule() { return rule; }
		
		//FirstOrderClass | DataType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FirstOrderClass
		public RuleCall getFirstOrderClassParserRuleCall_0() { return cFirstOrderClassParserRuleCall_0; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_1() { return cDataTypeParserRuleCall_1; }
	}
	public class HigherOrderClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.HigherOrderClass");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHighOrderClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrderlessClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//HigherOrderClass:
		//	HighOrderClass | OrderlessClass;
		@Override public ParserRule getRule() { return rule; }
		
		//HighOrderClass | OrderlessClass
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HighOrderClass
		public RuleCall getHighOrderClassParserRuleCall_0() { return cHighOrderClassParserRuleCall_0; }
		
		//OrderlessClass
		public RuleCall getOrderlessClassParserRuleCall_1() { return cOrderlessClassParserRuleCall_1; }
	}
	public class IndividualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.Individual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIndividualKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cClassifiersClassCrossReference_3_0 = (CrossReference)cClassifiersAssignment_3.eContents().get(0);
		private final RuleCall cClassifiersClassQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cClassifiersClassCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cClassifiersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cClassifiersClassCrossReference_4_1_0 = (CrossReference)cClassifiersAssignment_4_1.eContents().get(0);
		private final RuleCall cClassifiersClassQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cClassifiersClassCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAssignmentsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAssignmentsFeatureAssignmentParserRuleCall_5_1_0 = (RuleCall)cAssignmentsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//Individual:
		//	'individual' name=ID
		//	':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])* ('{' assignments+=FeatureAssignment*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'individual' name=ID ':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])* ('{'
		//assignments+=FeatureAssignment* '}')?
		public Group getGroup() { return cGroup; }
		
		//'individual'
		public Keyword getIndividualKeyword_0() { return cIndividualKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//classifiers+=[Class|QualifiedName]
		public Assignment getClassifiersAssignment_3() { return cClassifiersAssignment_3; }
		
		//[Class|QualifiedName]
		public CrossReference getClassifiersClassCrossReference_3_0() { return cClassifiersClassCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getClassifiersClassQualifiedNameParserRuleCall_3_0_1() { return cClassifiersClassQualifiedNameParserRuleCall_3_0_1; }
		
		//(',' classifiers+=[Class|QualifiedName])*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//classifiers+=[Class|QualifiedName]
		public Assignment getClassifiersAssignment_4_1() { return cClassifiersAssignment_4_1; }
		
		//[Class|QualifiedName]
		public CrossReference getClassifiersClassCrossReference_4_1_0() { return cClassifiersClassCrossReference_4_1_0; }
		
		//QualifiedName
		public RuleCall getClassifiersClassQualifiedNameParserRuleCall_4_1_0_1() { return cClassifiersClassQualifiedNameParserRuleCall_4_1_0_1; }
		
		//('{' assignments+=FeatureAssignment* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//assignments+=FeatureAssignment*
		public Assignment getAssignmentsAssignment_5_1() { return cAssignmentsAssignment_5_1; }
		
		//FeatureAssignment
		public RuleCall getAssignmentsFeatureAssignmentParserRuleCall_5_1_0() { return cAssignmentsFeatureAssignmentParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
	}
	public class ClassIntoOrderedOrOrderlessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.ClassIntoOrderedOrOrderless");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOrderlessClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrderedClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// ParserRule used to enforce specialization only
		//ClassIntoOrderedOrOrderless Class:
		//	OrderlessClass | OrderedClass;
		@Override public ParserRule getRule() { return rule; }
		
		//OrderlessClass | OrderedClass
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OrderlessClass
		public RuleCall getOrderlessClassParserRuleCall_0() { return cOrderlessClassParserRuleCall_0; }
		
		//OrderedClass
		public RuleCall getOrderedClassParserRuleCall_1() { return cOrderedClassParserRuleCall_1; }
	}
	public class OrderedClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.OrderedClass");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHighOrderClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFirstOrderClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// ParserRule used to enforce specialization only
		//OrderedClass:
		//	HighOrderClass | FirstOrderClass;
		@Override public ParserRule getRule() { return rule; }
		
		//HighOrderClass | FirstOrderClass
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HighOrderClass
		public RuleCall getHighOrderClassParserRuleCall_0() { return cHighOrderClassParserRuleCall_0; }
		
		//FirstOrderClass
		public RuleCall getFirstOrderClassParserRuleCall_1() { return cFirstOrderClassParserRuleCall_1; }
	}
	public class FirstOrderClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.FirstOrderClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cClassifiersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cClassifiersClassCrossReference_2_1_0 = (CrossReference)cClassifiersAssignment_2_1.eContents().get(0);
		private final RuleCall cClassifiersClassQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cClassifiersClassCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cClassifiersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cClassifiersClassCrossReference_2_2_1_0 = (CrossReference)cClassifiersAssignment_2_2_1.eContents().get(0);
		private final RuleCall cClassifiersClassQualifiedNameParserRuleCall_2_2_1_0_1 = (RuleCall)cClassifiersClassCrossReference_2_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSpecializesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperClassesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperClassesClassCrossReference_3_1_0 = (CrossReference)cSuperClassesAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperClassesClassQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cSuperClassesClassCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cSuperClassesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cSuperClassesClassCrossReference_3_2_1_0 = (CrossReference)cSuperClassesAssignment_3_2_1.eContents().get(0);
		private final RuleCall cSuperClassesClassQualifiedNameParserRuleCall_3_2_1_0_1 = (RuleCall)cSuperClassesClassCrossReference_3_2_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cAssignmentsAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cAssignmentsFeatureAssignmentParserRuleCall_4_1_0_0 = (RuleCall)cAssignmentsAssignment_4_1_0.eContents().get(0);
		private final Assignment cFeaturesAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cFeaturesFeatureParserRuleCall_4_1_1_0 = (RuleCall)cFeaturesAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//FirstOrderClass:
		//	'class' name=ID (':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])*)? ('specializes'
		//	superClasses+=[Class|QualifiedName] (',' superClasses+=[Class|QualifiedName])*)? ('{' (assignments+=FeatureAssignment
		//	| features+=Feature)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'class' name=ID (':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])*)? ('specializes'
		//superClasses+=[Class|QualifiedName] (',' superClasses+=[Class|QualifiedName])*)? ('{' (assignments+=FeatureAssignment |
		//features+=Feature)* '}')?
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//classifiers+=[Class|QualifiedName]
		public Assignment getClassifiersAssignment_2_1() { return cClassifiersAssignment_2_1; }
		
		//[Class|QualifiedName]
		public CrossReference getClassifiersClassCrossReference_2_1_0() { return cClassifiersClassCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getClassifiersClassQualifiedNameParserRuleCall_2_1_0_1() { return cClassifiersClassQualifiedNameParserRuleCall_2_1_0_1; }
		
		//(',' classifiers+=[Class|QualifiedName])*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//classifiers+=[Class|QualifiedName]
		public Assignment getClassifiersAssignment_2_2_1() { return cClassifiersAssignment_2_2_1; }
		
		//[Class|QualifiedName]
		public CrossReference getClassifiersClassCrossReference_2_2_1_0() { return cClassifiersClassCrossReference_2_2_1_0; }
		
		//QualifiedName
		public RuleCall getClassifiersClassQualifiedNameParserRuleCall_2_2_1_0_1() { return cClassifiersClassQualifiedNameParserRuleCall_2_2_1_0_1; }
		
		//('specializes' superClasses+=[Class|QualifiedName] (',' superClasses+=[Class|QualifiedName])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'specializes'
		public Keyword getSpecializesKeyword_3_0() { return cSpecializesKeyword_3_0; }
		
		//superClasses+=[Class|QualifiedName]
		public Assignment getSuperClassesAssignment_3_1() { return cSuperClassesAssignment_3_1; }
		
		//[Class|QualifiedName]
		public CrossReference getSuperClassesClassCrossReference_3_1_0() { return cSuperClassesClassCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getSuperClassesClassQualifiedNameParserRuleCall_3_1_0_1() { return cSuperClassesClassQualifiedNameParserRuleCall_3_1_0_1; }
		
		//(',' superClasses+=[Class|QualifiedName])*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//superClasses+=[Class|QualifiedName]
		public Assignment getSuperClassesAssignment_3_2_1() { return cSuperClassesAssignment_3_2_1; }
		
		//[Class|QualifiedName]
		public CrossReference getSuperClassesClassCrossReference_3_2_1_0() { return cSuperClassesClassCrossReference_3_2_1_0; }
		
		//QualifiedName
		public RuleCall getSuperClassesClassQualifiedNameParserRuleCall_3_2_1_0_1() { return cSuperClassesClassQualifiedNameParserRuleCall_3_2_1_0_1; }
		
		//('{' (assignments+=FeatureAssignment | features+=Feature)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//(assignments+=FeatureAssignment | features+=Feature)*
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//assignments+=FeatureAssignment
		public Assignment getAssignmentsAssignment_4_1_0() { return cAssignmentsAssignment_4_1_0; }
		
		//FeatureAssignment
		public RuleCall getAssignmentsFeatureAssignmentParserRuleCall_4_1_0_0() { return cAssignmentsFeatureAssignmentParserRuleCall_4_1_0_0; }
		
		//features+=Feature
		public Assignment getFeaturesAssignment_4_1_1() { return cFeaturesAssignment_4_1_1; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_4_1_1_0() { return cFeaturesFeatureParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cClassifiersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cClassifiersClassCrossReference_2_1_0 = (CrossReference)cClassifiersAssignment_2_1.eContents().get(0);
		private final RuleCall cClassifiersClassQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cClassifiersClassCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cClassifiersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cClassifiersClassCrossReference_2_2_1_0 = (CrossReference)cClassifiersAssignment_2_2_1.eContents().get(0);
		private final RuleCall cClassifiersClassQualifiedNameParserRuleCall_2_2_1_0_1 = (RuleCall)cClassifiersClassCrossReference_2_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSpecializesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperClassesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperClassesClassCrossReference_3_1_0 = (CrossReference)cSuperClassesAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperClassesClassQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cSuperClassesClassCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cSuperClassesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cSuperClassesClassCrossReference_3_2_1_0 = (CrossReference)cSuperClassesAssignment_3_2_1.eContents().get(0);
		private final RuleCall cSuperClassesClassQualifiedNameParserRuleCall_3_2_1_0_1 = (RuleCall)cSuperClassesClassCrossReference_3_2_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cAssignmentsAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cAssignmentsFeatureAssignmentParserRuleCall_4_1_0_0 = (RuleCall)cAssignmentsAssignment_4_1_0.eContents().get(0);
		private final Assignment cFeaturesAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cFeaturesFeatureParserRuleCall_4_1_1_0 = (RuleCall)cFeaturesAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//DataType:
		//	'datatype' name=ID (':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])*)? ('specializes'
		//	superClasses+=[Class|QualifiedName] (',' superClasses+=[Class|QualifiedName])*)? ('{' (assignments+=FeatureAssignment
		//	| features+=Feature)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'datatype' name=ID (':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])*)? ('specializes'
		//superClasses+=[Class|QualifiedName] (',' superClasses+=[Class|QualifiedName])*)? ('{' (assignments+=FeatureAssignment |
		//features+=Feature)* '}')?
		public Group getGroup() { return cGroup; }
		
		//'datatype'
		public Keyword getDatatypeKeyword_0() { return cDatatypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//classifiers+=[Class|QualifiedName]
		public Assignment getClassifiersAssignment_2_1() { return cClassifiersAssignment_2_1; }
		
		//[Class|QualifiedName]
		public CrossReference getClassifiersClassCrossReference_2_1_0() { return cClassifiersClassCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getClassifiersClassQualifiedNameParserRuleCall_2_1_0_1() { return cClassifiersClassQualifiedNameParserRuleCall_2_1_0_1; }
		
		//(',' classifiers+=[Class|QualifiedName])*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//classifiers+=[Class|QualifiedName]
		public Assignment getClassifiersAssignment_2_2_1() { return cClassifiersAssignment_2_2_1; }
		
		//[Class|QualifiedName]
		public CrossReference getClassifiersClassCrossReference_2_2_1_0() { return cClassifiersClassCrossReference_2_2_1_0; }
		
		//QualifiedName
		public RuleCall getClassifiersClassQualifiedNameParserRuleCall_2_2_1_0_1() { return cClassifiersClassQualifiedNameParserRuleCall_2_2_1_0_1; }
		
		//('specializes' superClasses+=[Class|QualifiedName] (',' superClasses+=[Class|QualifiedName])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'specializes'
		public Keyword getSpecializesKeyword_3_0() { return cSpecializesKeyword_3_0; }
		
		//superClasses+=[Class|QualifiedName]
		public Assignment getSuperClassesAssignment_3_1() { return cSuperClassesAssignment_3_1; }
		
		//[Class|QualifiedName]
		public CrossReference getSuperClassesClassCrossReference_3_1_0() { return cSuperClassesClassCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getSuperClassesClassQualifiedNameParserRuleCall_3_1_0_1() { return cSuperClassesClassQualifiedNameParserRuleCall_3_1_0_1; }
		
		//(',' superClasses+=[Class|QualifiedName])*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//superClasses+=[Class|QualifiedName]
		public Assignment getSuperClassesAssignment_3_2_1() { return cSuperClassesAssignment_3_2_1; }
		
		//[Class|QualifiedName]
		public CrossReference getSuperClassesClassCrossReference_3_2_1_0() { return cSuperClassesClassCrossReference_3_2_1_0; }
		
		//QualifiedName
		public RuleCall getSuperClassesClassQualifiedNameParserRuleCall_3_2_1_0_1() { return cSuperClassesClassQualifiedNameParserRuleCall_3_2_1_0_1; }
		
		//('{' (assignments+=FeatureAssignment | features+=Feature)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//(assignments+=FeatureAssignment | features+=Feature)*
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//assignments+=FeatureAssignment
		public Assignment getAssignmentsAssignment_4_1_0() { return cAssignmentsAssignment_4_1_0; }
		
		//FeatureAssignment
		public RuleCall getAssignmentsFeatureAssignmentParserRuleCall_4_1_0_0() { return cAssignmentsFeatureAssignmentParserRuleCall_4_1_0_0; }
		
		//features+=Feature
		public Assignment getFeaturesAssignment_4_1_1() { return cFeaturesAssignment_4_1_1; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_4_1_1_0() { return cFeaturesFeatureParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}
	public class HighOrderClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.HighOrderClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOrderAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOrderINTTerminalRuleCall_1_0 = (RuleCall)cOrderAssignment_1.eContents().get(0);
		private final Keyword cClassKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cClassifiersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cClassifiersClassCrossReference_4_1_0 = (CrossReference)cClassifiersAssignment_4_1.eContents().get(0);
		private final RuleCall cClassifiersClassQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cClassifiersClassCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cClassifiersAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cClassifiersClassCrossReference_4_2_1_0 = (CrossReference)cClassifiersAssignment_4_2_1.eContents().get(0);
		private final RuleCall cClassifiersClassQualifiedNameParserRuleCall_4_2_1_0_1 = (RuleCall)cClassifiersClassCrossReference_4_2_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSpecializesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSuperClassesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cSuperClassesClassCrossReference_5_1_0 = (CrossReference)cSuperClassesAssignment_5_1.eContents().get(0);
		private final RuleCall cSuperClassesClassQualifiedNameParserRuleCall_5_1_0_1 = (RuleCall)cSuperClassesClassCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cSuperClassesAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final CrossReference cSuperClassesClassCrossReference_5_2_1_0 = (CrossReference)cSuperClassesAssignment_5_2_1.eContents().get(0);
		private final RuleCall cSuperClassesClassQualifiedNameParserRuleCall_5_2_1_0_1 = (RuleCall)cSuperClassesClassCrossReference_5_2_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSubordinatedToKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSubordinatorsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cSubordinatorsHigherOrderClassCrossReference_6_1_0 = (CrossReference)cSubordinatorsAssignment_6_1.eContents().get(0);
		private final RuleCall cSubordinatorsHigherOrderClassQualifiedNameParserRuleCall_6_1_0_1 = (RuleCall)cSubordinatorsHigherOrderClassCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cSubordinatorsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final CrossReference cSubordinatorsHigherOrderClassCrossReference_6_2_1_0 = (CrossReference)cSubordinatorsAssignment_6_2_1.eContents().get(0);
		private final RuleCall cSubordinatorsHigherOrderClassQualifiedNameParserRuleCall_6_2_1_0_1 = (RuleCall)cSubordinatorsHigherOrderClassCrossReference_6_2_1_0.eContents().get(1);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Assignment cCategorizationTypeAssignment_7_0_0 = (Assignment)cGroup_7_0.eContents().get(0);
		private final RuleCall cCategorizationTypeCategorizationTypeEnumRuleCall_7_0_0_0 = (RuleCall)cCategorizationTypeAssignment_7_0_0.eContents().get(0);
		private final Assignment cCategorizedClassAssignment_7_0_1 = (Assignment)cGroup_7_0.eContents().get(1);
		private final CrossReference cCategorizedClassClassCrossReference_7_0_1_0 = (CrossReference)cCategorizedClassAssignment_7_0_1.eContents().get(0);
		private final RuleCall cCategorizedClassClassQualifiedNameParserRuleCall_7_0_1_0_1 = (RuleCall)cCategorizedClassClassCrossReference_7_0_1_0.eContents().get(1);
		private final Group cGroup_7_1 = (Group)cAlternatives_7.eContents().get(1);
		private final Keyword cIsPowertypeOfKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cPowertypeOfAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final CrossReference cPowertypeOfClassCrossReference_7_1_1_0 = (CrossReference)cPowertypeOfAssignment_7_1_1.eContents().get(0);
		private final RuleCall cPowertypeOfClassQualifiedNameParserRuleCall_7_1_1_0_1 = (RuleCall)cPowertypeOfClassCrossReference_7_1_1_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Alternatives cAlternatives_8_1 = (Alternatives)cGroup_8.eContents().get(1);
		private final Assignment cAssignmentsAssignment_8_1_0 = (Assignment)cAlternatives_8_1.eContents().get(0);
		private final RuleCall cAssignmentsFeatureAssignmentParserRuleCall_8_1_0_0 = (RuleCall)cAssignmentsAssignment_8_1_0.eContents().get(0);
		private final Assignment cFeaturesAssignment_8_1_1 = (Assignment)cAlternatives_8_1.eContents().get(1);
		private final RuleCall cFeaturesFeatureParserRuleCall_8_1_1_0 = (RuleCall)cFeaturesAssignment_8_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		
		//HighOrderClass:
		//	'order' order=INT 'class' name=ID (':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])*)?
		//	('specializes' superClasses+=[Class|QualifiedName] (',' superClasses+=[Class|QualifiedName])*)? ('subordinatedTo'
		//	subordinators+=[HigherOrderClass|QualifiedName] (',' subordinators+=[HigherOrderClass|QualifiedName])*)?
		//	(categorizationType=CategorizationType categorizedClass=[Class|QualifiedName] | 'isPowertypeOf'
		//	powertypeOf=[Class|QualifiedName])? ('{' (assignments+=FeatureAssignment | features+=Feature)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'order' order=INT 'class' name=ID (':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])*)?
		//('specializes' superClasses+=[Class|QualifiedName] (',' superClasses+=[Class|QualifiedName])*)? ('subordinatedTo'
		//subordinators+=[HigherOrderClass|QualifiedName] (',' subordinators+=[HigherOrderClass|QualifiedName])*)?
		//(categorizationType=CategorizationType categorizedClass=[Class|QualifiedName] | 'isPowertypeOf'
		//powertypeOf=[Class|QualifiedName])? ('{' (assignments+=FeatureAssignment | features+=Feature)* '}')?
		public Group getGroup() { return cGroup; }
		
		//'order'
		public Keyword getOrderKeyword_0() { return cOrderKeyword_0; }
		
		//order=INT
		public Assignment getOrderAssignment_1() { return cOrderAssignment_1; }
		
		//INT
		public RuleCall getOrderINTTerminalRuleCall_1_0() { return cOrderINTTerminalRuleCall_1_0; }
		
		//'class'
		public Keyword getClassKeyword_2() { return cClassKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//(':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//classifiers+=[Class|QualifiedName]
		public Assignment getClassifiersAssignment_4_1() { return cClassifiersAssignment_4_1; }
		
		//[Class|QualifiedName]
		public CrossReference getClassifiersClassCrossReference_4_1_0() { return cClassifiersClassCrossReference_4_1_0; }
		
		//QualifiedName
		public RuleCall getClassifiersClassQualifiedNameParserRuleCall_4_1_0_1() { return cClassifiersClassQualifiedNameParserRuleCall_4_1_0_1; }
		
		//(',' classifiers+=[Class|QualifiedName])*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//classifiers+=[Class|QualifiedName]
		public Assignment getClassifiersAssignment_4_2_1() { return cClassifiersAssignment_4_2_1; }
		
		//[Class|QualifiedName]
		public CrossReference getClassifiersClassCrossReference_4_2_1_0() { return cClassifiersClassCrossReference_4_2_1_0; }
		
		//QualifiedName
		public RuleCall getClassifiersClassQualifiedNameParserRuleCall_4_2_1_0_1() { return cClassifiersClassQualifiedNameParserRuleCall_4_2_1_0_1; }
		
		//('specializes' superClasses+=[Class|QualifiedName] (',' superClasses+=[Class|QualifiedName])*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'specializes'
		public Keyword getSpecializesKeyword_5_0() { return cSpecializesKeyword_5_0; }
		
		//superClasses+=[Class|QualifiedName]
		public Assignment getSuperClassesAssignment_5_1() { return cSuperClassesAssignment_5_1; }
		
		//[Class|QualifiedName]
		public CrossReference getSuperClassesClassCrossReference_5_1_0() { return cSuperClassesClassCrossReference_5_1_0; }
		
		//QualifiedName
		public RuleCall getSuperClassesClassQualifiedNameParserRuleCall_5_1_0_1() { return cSuperClassesClassQualifiedNameParserRuleCall_5_1_0_1; }
		
		//(',' superClasses+=[Class|QualifiedName])*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//superClasses+=[Class|QualifiedName]
		public Assignment getSuperClassesAssignment_5_2_1() { return cSuperClassesAssignment_5_2_1; }
		
		//[Class|QualifiedName]
		public CrossReference getSuperClassesClassCrossReference_5_2_1_0() { return cSuperClassesClassCrossReference_5_2_1_0; }
		
		//QualifiedName
		public RuleCall getSuperClassesClassQualifiedNameParserRuleCall_5_2_1_0_1() { return cSuperClassesClassQualifiedNameParserRuleCall_5_2_1_0_1; }
		
		//('subordinatedTo' subordinators+=[HigherOrderClass|QualifiedName] (','
		//subordinators+=[HigherOrderClass|QualifiedName])*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'subordinatedTo'
		public Keyword getSubordinatedToKeyword_6_0() { return cSubordinatedToKeyword_6_0; }
		
		//subordinators+=[HigherOrderClass|QualifiedName]
		public Assignment getSubordinatorsAssignment_6_1() { return cSubordinatorsAssignment_6_1; }
		
		//[HigherOrderClass|QualifiedName]
		public CrossReference getSubordinatorsHigherOrderClassCrossReference_6_1_0() { return cSubordinatorsHigherOrderClassCrossReference_6_1_0; }
		
		//QualifiedName
		public RuleCall getSubordinatorsHigherOrderClassQualifiedNameParserRuleCall_6_1_0_1() { return cSubordinatorsHigherOrderClassQualifiedNameParserRuleCall_6_1_0_1; }
		
		//(',' subordinators+=[HigherOrderClass|QualifiedName])*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//','
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//subordinators+=[HigherOrderClass|QualifiedName]
		public Assignment getSubordinatorsAssignment_6_2_1() { return cSubordinatorsAssignment_6_2_1; }
		
		//[HigherOrderClass|QualifiedName]
		public CrossReference getSubordinatorsHigherOrderClassCrossReference_6_2_1_0() { return cSubordinatorsHigherOrderClassCrossReference_6_2_1_0; }
		
		//QualifiedName
		public RuleCall getSubordinatorsHigherOrderClassQualifiedNameParserRuleCall_6_2_1_0_1() { return cSubordinatorsHigherOrderClassQualifiedNameParserRuleCall_6_2_1_0_1; }
		
		//(categorizationType=CategorizationType categorizedClass=[Class|QualifiedName] | 'isPowertypeOf'
		//powertypeOf=[Class|QualifiedName])?
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//categorizationType=CategorizationType categorizedClass=[Class|QualifiedName]
		public Group getGroup_7_0() { return cGroup_7_0; }
		
		//categorizationType=CategorizationType
		public Assignment getCategorizationTypeAssignment_7_0_0() { return cCategorizationTypeAssignment_7_0_0; }
		
		//CategorizationType
		public RuleCall getCategorizationTypeCategorizationTypeEnumRuleCall_7_0_0_0() { return cCategorizationTypeCategorizationTypeEnumRuleCall_7_0_0_0; }
		
		//categorizedClass=[Class|QualifiedName]
		public Assignment getCategorizedClassAssignment_7_0_1() { return cCategorizedClassAssignment_7_0_1; }
		
		//[Class|QualifiedName]
		public CrossReference getCategorizedClassClassCrossReference_7_0_1_0() { return cCategorizedClassClassCrossReference_7_0_1_0; }
		
		//QualifiedName
		public RuleCall getCategorizedClassClassQualifiedNameParserRuleCall_7_0_1_0_1() { return cCategorizedClassClassQualifiedNameParserRuleCall_7_0_1_0_1; }
		
		//'isPowertypeOf' powertypeOf=[Class|QualifiedName]
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//'isPowertypeOf'
		public Keyword getIsPowertypeOfKeyword_7_1_0() { return cIsPowertypeOfKeyword_7_1_0; }
		
		//powertypeOf=[Class|QualifiedName]
		public Assignment getPowertypeOfAssignment_7_1_1() { return cPowertypeOfAssignment_7_1_1; }
		
		//[Class|QualifiedName]
		public CrossReference getPowertypeOfClassCrossReference_7_1_1_0() { return cPowertypeOfClassCrossReference_7_1_1_0; }
		
		//QualifiedName
		public RuleCall getPowertypeOfClassQualifiedNameParserRuleCall_7_1_1_0_1() { return cPowertypeOfClassQualifiedNameParserRuleCall_7_1_1_0_1; }
		
		//('{' (assignments+=FeatureAssignment | features+=Feature)* '}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_0() { return cLeftCurlyBracketKeyword_8_0; }
		
		//(assignments+=FeatureAssignment | features+=Feature)*
		public Alternatives getAlternatives_8_1() { return cAlternatives_8_1; }
		
		//assignments+=FeatureAssignment
		public Assignment getAssignmentsAssignment_8_1_0() { return cAssignmentsAssignment_8_1_0; }
		
		//FeatureAssignment
		public RuleCall getAssignmentsFeatureAssignmentParserRuleCall_8_1_0_0() { return cAssignmentsFeatureAssignmentParserRuleCall_8_1_0_0; }
		
		//features+=Feature
		public Assignment getFeaturesAssignment_8_1_1() { return cFeaturesAssignment_8_1_1; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_8_1_1_0() { return cFeaturesFeatureParserRuleCall_8_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_2() { return cRightCurlyBracketKeyword_8_2; }
	}
	public class OrderlessClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.OrderlessClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrderlessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cClassifiersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cClassifiersClassCrossReference_3_1_0 = (CrossReference)cClassifiersAssignment_3_1.eContents().get(0);
		private final RuleCall cClassifiersClassQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cClassifiersClassCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cClassifiersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cClassifiersClassCrossReference_3_2_1_0 = (CrossReference)cClassifiersAssignment_3_2_1.eContents().get(0);
		private final RuleCall cClassifiersClassQualifiedNameParserRuleCall_3_2_1_0_1 = (RuleCall)cClassifiersClassCrossReference_3_2_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSpecializesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSuperClassesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSuperClassesClassCrossReference_4_1_0 = (CrossReference)cSuperClassesAssignment_4_1.eContents().get(0);
		private final RuleCall cSuperClassesClassQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cSuperClassesClassCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cSuperClassesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cSuperClassesClassCrossReference_4_2_1_0 = (CrossReference)cSuperClassesAssignment_4_2_1.eContents().get(0);
		private final RuleCall cSuperClassesClassQualifiedNameParserRuleCall_4_2_1_0_1 = (RuleCall)cSuperClassesClassCrossReference_4_2_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSubordinatedToKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSubordinatorsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cSubordinatorsHigherOrderClassCrossReference_5_1_0 = (CrossReference)cSubordinatorsAssignment_5_1.eContents().get(0);
		private final RuleCall cSubordinatorsHigherOrderClassQualifiedNameParserRuleCall_5_1_0_1 = (RuleCall)cSubordinatorsHigherOrderClassCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cSubordinatorsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final CrossReference cSubordinatorsHigherOrderClassCrossReference_5_2_1_0 = (CrossReference)cSubordinatorsAssignment_5_2_1.eContents().get(0);
		private final RuleCall cSubordinatorsHigherOrderClassQualifiedNameParserRuleCall_5_2_1_0_1 = (RuleCall)cSubordinatorsHigherOrderClassCrossReference_5_2_1_0.eContents().get(1);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Assignment cCategorizationTypeAssignment_6_0_0 = (Assignment)cGroup_6_0.eContents().get(0);
		private final RuleCall cCategorizationTypeCategorizationTypeEnumRuleCall_6_0_0_0 = (RuleCall)cCategorizationTypeAssignment_6_0_0.eContents().get(0);
		private final Assignment cCategorizedClassAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final CrossReference cCategorizedClassClassCrossReference_6_0_1_0 = (CrossReference)cCategorizedClassAssignment_6_0_1.eContents().get(0);
		private final RuleCall cCategorizedClassClassQualifiedNameParserRuleCall_6_0_1_0_1 = (RuleCall)cCategorizedClassClassCrossReference_6_0_1_0.eContents().get(1);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Keyword cIsPowertypeOfKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cPowertypeOfAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final CrossReference cPowertypeOfClassCrossReference_6_1_1_0 = (CrossReference)cPowertypeOfAssignment_6_1_1.eContents().get(0);
		private final RuleCall cPowertypeOfClassQualifiedNameParserRuleCall_6_1_1_0_1 = (RuleCall)cPowertypeOfClassCrossReference_6_1_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Alternatives cAlternatives_7_1 = (Alternatives)cGroup_7.eContents().get(1);
		private final Assignment cAssignmentsAssignment_7_1_0 = (Assignment)cAlternatives_7_1.eContents().get(0);
		private final RuleCall cAssignmentsFeatureAssignmentParserRuleCall_7_1_0_0 = (RuleCall)cAssignmentsAssignment_7_1_0.eContents().get(0);
		private final Assignment cFeaturesAssignment_7_1_1 = (Assignment)cAlternatives_7_1.eContents().get(1);
		private final RuleCall cFeaturesFeatureParserRuleCall_7_1_1_0 = (RuleCall)cFeaturesAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		
		//OrderlessClass:
		//	'orderless' 'class' name=ID (':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])*)?
		//	('specializes' superClasses+=[Class|QualifiedName] (',' superClasses+=[Class|QualifiedName])*)? ('subordinatedTo'
		//	subordinators+=[HigherOrderClass|QualifiedName] (',' subordinators+=[HigherOrderClass|QualifiedName])*)?
		//	(categorizationType=CategorizationType categorizedClass=[Class|QualifiedName] | 'isPowertypeOf'
		//	powertypeOf=[Class|QualifiedName])? ('{' (assignments+=FeatureAssignment | features+=Feature)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'orderless' 'class' name=ID (':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])*)?
		//('specializes' superClasses+=[Class|QualifiedName] (',' superClasses+=[Class|QualifiedName])*)? ('subordinatedTo'
		//subordinators+=[HigherOrderClass|QualifiedName] (',' subordinators+=[HigherOrderClass|QualifiedName])*)?
		//(categorizationType=CategorizationType categorizedClass=[Class|QualifiedName] | 'isPowertypeOf'
		//powertypeOf=[Class|QualifiedName])? ('{' (assignments+=FeatureAssignment | features+=Feature)* '}')?
		public Group getGroup() { return cGroup; }
		
		//'orderless'
		public Keyword getOrderlessKeyword_0() { return cOrderlessKeyword_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//classifiers+=[Class|QualifiedName]
		public Assignment getClassifiersAssignment_3_1() { return cClassifiersAssignment_3_1; }
		
		//[Class|QualifiedName]
		public CrossReference getClassifiersClassCrossReference_3_1_0() { return cClassifiersClassCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getClassifiersClassQualifiedNameParserRuleCall_3_1_0_1() { return cClassifiersClassQualifiedNameParserRuleCall_3_1_0_1; }
		
		//(',' classifiers+=[Class|QualifiedName])*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//classifiers+=[Class|QualifiedName]
		public Assignment getClassifiersAssignment_3_2_1() { return cClassifiersAssignment_3_2_1; }
		
		//[Class|QualifiedName]
		public CrossReference getClassifiersClassCrossReference_3_2_1_0() { return cClassifiersClassCrossReference_3_2_1_0; }
		
		//QualifiedName
		public RuleCall getClassifiersClassQualifiedNameParserRuleCall_3_2_1_0_1() { return cClassifiersClassQualifiedNameParserRuleCall_3_2_1_0_1; }
		
		//('specializes' superClasses+=[Class|QualifiedName] (',' superClasses+=[Class|QualifiedName])*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'specializes'
		public Keyword getSpecializesKeyword_4_0() { return cSpecializesKeyword_4_0; }
		
		//superClasses+=[Class|QualifiedName]
		public Assignment getSuperClassesAssignment_4_1() { return cSuperClassesAssignment_4_1; }
		
		//[Class|QualifiedName]
		public CrossReference getSuperClassesClassCrossReference_4_1_0() { return cSuperClassesClassCrossReference_4_1_0; }
		
		//QualifiedName
		public RuleCall getSuperClassesClassQualifiedNameParserRuleCall_4_1_0_1() { return cSuperClassesClassQualifiedNameParserRuleCall_4_1_0_1; }
		
		//(',' superClasses+=[Class|QualifiedName])*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//superClasses+=[Class|QualifiedName]
		public Assignment getSuperClassesAssignment_4_2_1() { return cSuperClassesAssignment_4_2_1; }
		
		//[Class|QualifiedName]
		public CrossReference getSuperClassesClassCrossReference_4_2_1_0() { return cSuperClassesClassCrossReference_4_2_1_0; }
		
		//QualifiedName
		public RuleCall getSuperClassesClassQualifiedNameParserRuleCall_4_2_1_0_1() { return cSuperClassesClassQualifiedNameParserRuleCall_4_2_1_0_1; }
		
		//('subordinatedTo' subordinators+=[HigherOrderClass|QualifiedName] (','
		//subordinators+=[HigherOrderClass|QualifiedName])*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'subordinatedTo'
		public Keyword getSubordinatedToKeyword_5_0() { return cSubordinatedToKeyword_5_0; }
		
		//subordinators+=[HigherOrderClass|QualifiedName]
		public Assignment getSubordinatorsAssignment_5_1() { return cSubordinatorsAssignment_5_1; }
		
		//[HigherOrderClass|QualifiedName]
		public CrossReference getSubordinatorsHigherOrderClassCrossReference_5_1_0() { return cSubordinatorsHigherOrderClassCrossReference_5_1_0; }
		
		//QualifiedName
		public RuleCall getSubordinatorsHigherOrderClassQualifiedNameParserRuleCall_5_1_0_1() { return cSubordinatorsHigherOrderClassQualifiedNameParserRuleCall_5_1_0_1; }
		
		//(',' subordinators+=[HigherOrderClass|QualifiedName])*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//subordinators+=[HigherOrderClass|QualifiedName]
		public Assignment getSubordinatorsAssignment_5_2_1() { return cSubordinatorsAssignment_5_2_1; }
		
		//[HigherOrderClass|QualifiedName]
		public CrossReference getSubordinatorsHigherOrderClassCrossReference_5_2_1_0() { return cSubordinatorsHigherOrderClassCrossReference_5_2_1_0; }
		
		//QualifiedName
		public RuleCall getSubordinatorsHigherOrderClassQualifiedNameParserRuleCall_5_2_1_0_1() { return cSubordinatorsHigherOrderClassQualifiedNameParserRuleCall_5_2_1_0_1; }
		
		//(categorizationType=CategorizationType categorizedClass=[Class|QualifiedName] | 'isPowertypeOf'
		//powertypeOf=[Class|QualifiedName])?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//categorizationType=CategorizationType categorizedClass=[Class|QualifiedName]
		public Group getGroup_6_0() { return cGroup_6_0; }
		
		//categorizationType=CategorizationType
		public Assignment getCategorizationTypeAssignment_6_0_0() { return cCategorizationTypeAssignment_6_0_0; }
		
		//CategorizationType
		public RuleCall getCategorizationTypeCategorizationTypeEnumRuleCall_6_0_0_0() { return cCategorizationTypeCategorizationTypeEnumRuleCall_6_0_0_0; }
		
		//categorizedClass=[Class|QualifiedName]
		public Assignment getCategorizedClassAssignment_6_0_1() { return cCategorizedClassAssignment_6_0_1; }
		
		//[Class|QualifiedName]
		public CrossReference getCategorizedClassClassCrossReference_6_0_1_0() { return cCategorizedClassClassCrossReference_6_0_1_0; }
		
		//QualifiedName
		public RuleCall getCategorizedClassClassQualifiedNameParserRuleCall_6_0_1_0_1() { return cCategorizedClassClassQualifiedNameParserRuleCall_6_0_1_0_1; }
		
		//'isPowertypeOf' powertypeOf=[Class|QualifiedName]
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//'isPowertypeOf'
		public Keyword getIsPowertypeOfKeyword_6_1_0() { return cIsPowertypeOfKeyword_6_1_0; }
		
		//powertypeOf=[Class|QualifiedName]
		public Assignment getPowertypeOfAssignment_6_1_1() { return cPowertypeOfAssignment_6_1_1; }
		
		//[Class|QualifiedName]
		public CrossReference getPowertypeOfClassCrossReference_6_1_1_0() { return cPowertypeOfClassCrossReference_6_1_1_0; }
		
		//QualifiedName
		public RuleCall getPowertypeOfClassQualifiedNameParserRuleCall_6_1_1_0_1() { return cPowertypeOfClassQualifiedNameParserRuleCall_6_1_1_0_1; }
		
		//('{' (assignments+=FeatureAssignment | features+=Feature)* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_0() { return cLeftCurlyBracketKeyword_7_0; }
		
		//(assignments+=FeatureAssignment | features+=Feature)*
		public Alternatives getAlternatives_7_1() { return cAlternatives_7_1; }
		
		//assignments+=FeatureAssignment
		public Assignment getAssignmentsAssignment_7_1_0() { return cAssignmentsAssignment_7_1_0; }
		
		//FeatureAssignment
		public RuleCall getAssignmentsFeatureAssignmentParserRuleCall_7_1_0_0() { return cAssignmentsFeatureAssignmentParserRuleCall_7_1_0_0; }
		
		//features+=Feature
		public Assignment getFeaturesAssignment_7_1_1() { return cFeaturesAssignment_7_1_1; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_7_1_1_0() { return cFeaturesFeatureParserRuleCall_7_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_2() { return cRightCurlyBracketKeyword_7_2; }
	}
	public class GeneralizationSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.GeneralizationSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cIsDisjointAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final Keyword cIsDisjointDisjointKeyword_0_0_0 = (Keyword)cIsDisjointAssignment_0_0.eContents().get(0);
		private final Assignment cIsCompleteAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final Keyword cIsCompleteCompleteKeyword_0_1_0 = (Keyword)cIsCompleteAssignment_0_1.eContents().get(0);
		private final Keyword cGensetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cGeneralKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGeneralAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cGeneralClassCrossReference_4_0 = (CrossReference)cGeneralAssignment_4.eContents().get(0);
		private final RuleCall cGeneralClassQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cGeneralClassCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCategorizerKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cCategorizerAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cCategorizerHigherOrderClassCrossReference_5_1_0 = (CrossReference)cCategorizerAssignment_5_1.eContents().get(0);
		private final RuleCall cCategorizerHigherOrderClassQualifiedNameParserRuleCall_5_1_0_1 = (RuleCall)cCategorizerHigherOrderClassCrossReference_5_1_0.eContents().get(1);
		private final Keyword cSpecificsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSpecificsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cSpecificsClassCrossReference_7_0 = (CrossReference)cSpecificsAssignment_7.eContents().get(0);
		private final RuleCall cSpecificsClassQualifiedNameParserRuleCall_7_0_1 = (RuleCall)cSpecificsClassCrossReference_7_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cSpecificsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cSpecificsClassCrossReference_8_1_0 = (CrossReference)cSpecificsAssignment_8_1.eContents().get(0);
		private final RuleCall cSpecificsClassQualifiedNameParserRuleCall_8_1_0_1 = (RuleCall)cSpecificsClassCrossReference_8_1_0.eContents().get(1);
		
		//GeneralizationSet:
		//	(isDisjoint?='disjoint'? & isComplete?='complete'?) 'genset' name=ID?
		//	'general' general=[Class|QualifiedName] ('categorizer' categorizer=[HigherOrderClass|QualifiedName])?
		//	'specifics' specifics+=[Class|QualifiedName] (',' specifics+=[Class|QualifiedName])+;
		@Override public ParserRule getRule() { return rule; }
		
		//(isDisjoint?='disjoint'? & isComplete?='complete'?) 'genset' name=ID? 'general' general=[Class|QualifiedName]
		//('categorizer' categorizer=[HigherOrderClass|QualifiedName])? 'specifics' specifics+=[Class|QualifiedName] (','
		//specifics+=[Class|QualifiedName])+
		public Group getGroup() { return cGroup; }
		
		//(isDisjoint?='disjoint'? & isComplete?='complete'?)
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }
		
		//isDisjoint?='disjoint'?
		public Assignment getIsDisjointAssignment_0_0() { return cIsDisjointAssignment_0_0; }
		
		//'disjoint'
		public Keyword getIsDisjointDisjointKeyword_0_0_0() { return cIsDisjointDisjointKeyword_0_0_0; }
		
		//isComplete?='complete'?
		public Assignment getIsCompleteAssignment_0_1() { return cIsCompleteAssignment_0_1; }
		
		//'complete'
		public Keyword getIsCompleteCompleteKeyword_0_1_0() { return cIsCompleteCompleteKeyword_0_1_0; }
		
		//'genset'
		public Keyword getGensetKeyword_1() { return cGensetKeyword_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'general'
		public Keyword getGeneralKeyword_3() { return cGeneralKeyword_3; }
		
		//general=[Class|QualifiedName]
		public Assignment getGeneralAssignment_4() { return cGeneralAssignment_4; }
		
		//[Class|QualifiedName]
		public CrossReference getGeneralClassCrossReference_4_0() { return cGeneralClassCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getGeneralClassQualifiedNameParserRuleCall_4_0_1() { return cGeneralClassQualifiedNameParserRuleCall_4_0_1; }
		
		//('categorizer' categorizer=[HigherOrderClass|QualifiedName])?
		public Group getGroup_5() { return cGroup_5; }
		
		//'categorizer'
		public Keyword getCategorizerKeyword_5_0() { return cCategorizerKeyword_5_0; }
		
		//categorizer=[HigherOrderClass|QualifiedName]
		public Assignment getCategorizerAssignment_5_1() { return cCategorizerAssignment_5_1; }
		
		//[HigherOrderClass|QualifiedName]
		public CrossReference getCategorizerHigherOrderClassCrossReference_5_1_0() { return cCategorizerHigherOrderClassCrossReference_5_1_0; }
		
		//QualifiedName
		public RuleCall getCategorizerHigherOrderClassQualifiedNameParserRuleCall_5_1_0_1() { return cCategorizerHigherOrderClassQualifiedNameParserRuleCall_5_1_0_1; }
		
		//'specifics'
		public Keyword getSpecificsKeyword_6() { return cSpecificsKeyword_6; }
		
		//specifics+=[Class|QualifiedName]
		public Assignment getSpecificsAssignment_7() { return cSpecificsAssignment_7; }
		
		//[Class|QualifiedName]
		public CrossReference getSpecificsClassCrossReference_7_0() { return cSpecificsClassCrossReference_7_0; }
		
		//QualifiedName
		public RuleCall getSpecificsClassQualifiedNameParserRuleCall_7_0_1() { return cSpecificsClassQualifiedNameParserRuleCall_7_0_1; }
		
		//(',' specifics+=[Class|QualifiedName])+
		public Group getGroup_8() { return cGroup_8; }
		
		//','
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//specifics+=[Class|QualifiedName]
		public Assignment getSpecificsAssignment_8_1() { return cSpecificsAssignment_8_1; }
		
		//[Class|QualifiedName]
		public CrossReference getSpecificsClassCrossReference_8_1_0() { return cSpecificsClassCrossReference_8_1_0; }
		
		//QualifiedName
		public RuleCall getSpecificsClassQualifiedNameParserRuleCall_8_1_0_1() { return cSpecificsClassQualifiedNameParserRuleCall_8_1_0_1; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Feature:
		//	Attribute | Reference;
		@Override public ParserRule getRule() { return rule; }
		
		//Attribute | Reference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }
		
		//Reference
		public RuleCall getReferenceParserRuleCall_1() { return cReferenceParserRuleCall_1; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRegularityAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAttKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cLowerBoundCARDINALITYParserRuleCall_1_3_1_0 = (RuleCall)cLowerBoundAssignment_1_3_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		private final Assignment cUpperBoundAssignment_1_3_3 = (Assignment)cGroup_1_3.eContents().get(3);
		private final RuleCall cUpperBoundCARDINALITYParserRuleCall_1_3_3_0 = (RuleCall)cUpperBoundAssignment_1_3_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3_4 = (Keyword)cGroup_1_3.eContents().get(4);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Assignment cPrimitiveTypeAssignment_1_4_0 = (Assignment)cAlternatives_1_4.eContents().get(0);
		private final RuleCall cPrimitiveTypePrimitiveTypeEnumRuleCall_1_4_0_0 = (RuleCall)cPrimitiveTypeAssignment_1_4_0.eContents().get(0);
		private final Assignment c_typeAssignment_1_4_1 = (Assignment)cAlternatives_1_4.eContents().get(1);
		private final CrossReference c_typeDataTypeCrossReference_1_4_1_0 = (CrossReference)c_typeAssignment_1_4_1.eContents().get(0);
		private final RuleCall c_typeDataTypeQualifiedNameParserRuleCall_1_4_1_0_1 = (RuleCall)c_typeDataTypeCrossReference_1_4_1_0.eContents().get(1);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Keyword cSubsetsKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cSubsetOfAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final CrossReference cSubsetOfAttributeCrossReference_1_5_1_0 = (CrossReference)cSubsetOfAssignment_1_5_1.eContents().get(0);
		private final RuleCall cSubsetOfAttributeQualifiedNameParserRuleCall_1_5_1_0_1 = (RuleCall)cSubsetOfAttributeCrossReference_1_5_1_0.eContents().get(1);
		private final Group cGroup_1_5_2 = (Group)cGroup_1_5.eContents().get(2);
		private final Keyword cCommaKeyword_1_5_2_0 = (Keyword)cGroup_1_5_2.eContents().get(0);
		private final Assignment cSubsetOfAssignment_1_5_2_1 = (Assignment)cGroup_1_5_2.eContents().get(1);
		private final CrossReference cSubsetOfAttributeCrossReference_1_5_2_1_0 = (CrossReference)cSubsetOfAssignment_1_5_2_1.eContents().get(0);
		private final RuleCall cSubsetOfAttributeQualifiedNameParserRuleCall_1_5_2_1_0_1 = (RuleCall)cSubsetOfAttributeCrossReference_1_5_2_1_0.eContents().get(1);
		
		//Attribute:
		//	RegularityAttribute |
		//	'att'? name=ID ':' ('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')? (primitiveType=PrimitiveType |
		//	_type=[DataType|QualifiedName]) ('subsets' subsetOf+=[Attribute|QualifiedName] (','
		//	subsetOf+=[Attribute|QualifiedName])*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//RegularityAttribute | 'att'? name=ID ':' ('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')?
		//(primitiveType=PrimitiveType | _type=[DataType|QualifiedName]) ('subsets' subsetOf+=[Attribute|QualifiedName] (','
		//subsetOf+=[Attribute|QualifiedName])*)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RegularityAttribute
		public RuleCall getRegularityAttributeParserRuleCall_0() { return cRegularityAttributeParserRuleCall_0; }
		
		//'att'? name=ID ':' ('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')? (primitiveType=PrimitiveType |
		//_type=[DataType|QualifiedName]) ('subsets' subsetOf+=[Attribute|QualifiedName] (','
		//subsetOf+=[Attribute|QualifiedName])*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'att'?
		public Keyword getAttKeyword_1_0() { return cAttKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_3_0() { return cLeftSquareBracketKeyword_1_3_0; }
		
		//lowerBound=CARDINALITY
		public Assignment getLowerBoundAssignment_1_3_1() { return cLowerBoundAssignment_1_3_1; }
		
		//CARDINALITY
		public RuleCall getLowerBoundCARDINALITYParserRuleCall_1_3_1_0() { return cLowerBoundCARDINALITYParserRuleCall_1_3_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_3_2() { return cFullStopFullStopKeyword_1_3_2; }
		
		//upperBound=CARDINALITY
		public Assignment getUpperBoundAssignment_1_3_3() { return cUpperBoundAssignment_1_3_3; }
		
		//CARDINALITY
		public RuleCall getUpperBoundCARDINALITYParserRuleCall_1_3_3_0() { return cUpperBoundCARDINALITYParserRuleCall_1_3_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3_4() { return cRightSquareBracketKeyword_1_3_4; }
		
		//(primitiveType=PrimitiveType | _type=[DataType|QualifiedName])
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }
		
		//primitiveType=PrimitiveType
		public Assignment getPrimitiveTypeAssignment_1_4_0() { return cPrimitiveTypeAssignment_1_4_0; }
		
		//PrimitiveType
		public RuleCall getPrimitiveTypePrimitiveTypeEnumRuleCall_1_4_0_0() { return cPrimitiveTypePrimitiveTypeEnumRuleCall_1_4_0_0; }
		
		//_type=[DataType|QualifiedName]
		public Assignment get_typeAssignment_1_4_1() { return c_typeAssignment_1_4_1; }
		
		//[DataType|QualifiedName]
		public CrossReference get_typeDataTypeCrossReference_1_4_1_0() { return c_typeDataTypeCrossReference_1_4_1_0; }
		
		//QualifiedName
		public RuleCall get_typeDataTypeQualifiedNameParserRuleCall_1_4_1_0_1() { return c_typeDataTypeQualifiedNameParserRuleCall_1_4_1_0_1; }
		
		//('subsets' subsetOf+=[Attribute|QualifiedName] (',' subsetOf+=[Attribute|QualifiedName])*)?
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//'subsets'
		public Keyword getSubsetsKeyword_1_5_0() { return cSubsetsKeyword_1_5_0; }
		
		//subsetOf+=[Attribute|QualifiedName]
		public Assignment getSubsetOfAssignment_1_5_1() { return cSubsetOfAssignment_1_5_1; }
		
		//[Attribute|QualifiedName]
		public CrossReference getSubsetOfAttributeCrossReference_1_5_1_0() { return cSubsetOfAttributeCrossReference_1_5_1_0; }
		
		//QualifiedName
		public RuleCall getSubsetOfAttributeQualifiedNameParserRuleCall_1_5_1_0_1() { return cSubsetOfAttributeQualifiedNameParserRuleCall_1_5_1_0_1; }
		
		//(',' subsetOf+=[Attribute|QualifiedName])*
		public Group getGroup_1_5_2() { return cGroup_1_5_2; }
		
		//','
		public Keyword getCommaKeyword_1_5_2_0() { return cCommaKeyword_1_5_2_0; }
		
		//subsetOf+=[Attribute|QualifiedName]
		public Assignment getSubsetOfAssignment_1_5_2_1() { return cSubsetOfAssignment_1_5_2_1; }
		
		//[Attribute|QualifiedName]
		public CrossReference getSubsetOfAttributeCrossReference_1_5_2_1_0() { return cSubsetOfAttributeCrossReference_1_5_2_1_0; }
		
		//QualifiedName
		public RuleCall getSubsetOfAttributeQualifiedNameParserRuleCall_1_5_2_1_0_1() { return cSubsetOfAttributeQualifiedNameParserRuleCall_1_5_2_1_0_1; }
	}
	public class RegularityAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.RegularityAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegularityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAttKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLowerBoundAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLowerBoundCARDINALITYParserRuleCall_4_1_0 = (RuleCall)cLowerBoundAssignment_4_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cUpperBoundAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cUpperBoundCARDINALITYParserRuleCall_4_3_0 = (RuleCall)cUpperBoundAssignment_4_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cPrimitiveTypeAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cPrimitiveTypePrimitiveTypeEnumRuleCall_5_0_0 = (RuleCall)cPrimitiveTypeAssignment_5_0.eContents().get(0);
		private final Assignment c_typeAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final CrossReference c_typeDataTypeCrossReference_5_1_0 = (CrossReference)c_typeAssignment_5_1.eContents().get(0);
		private final RuleCall c_typeDataTypeQualifiedNameParserRuleCall_5_1_0_1 = (RuleCall)c_typeDataTypeCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSubsetsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSubsetOfAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cSubsetOfAttributeCrossReference_6_1_0 = (CrossReference)cSubsetOfAssignment_6_1.eContents().get(0);
		private final RuleCall cSubsetOfAttributeQualifiedNameParserRuleCall_6_1_0_1 = (RuleCall)cSubsetOfAttributeCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cSubsetOfAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final CrossReference cSubsetOfAttributeCrossReference_6_2_1_0 = (CrossReference)cSubsetOfAssignment_6_2_1.eContents().get(0);
		private final RuleCall cSubsetOfAttributeQualifiedNameParserRuleCall_6_2_1_0_1 = (RuleCall)cSubsetOfAttributeCrossReference_6_2_1_0.eContents().get(1);
		private final Assignment cRegularityTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRegularityTypeRegularityFeatureTypeEnumRuleCall_7_0 = (RuleCall)cRegularityTypeAssignment_7.eContents().get(0);
		private final Assignment cRegulatesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cRegulatesAttributeCrossReference_8_0 = (CrossReference)cRegulatesAssignment_8.eContents().get(0);
		private final RuleCall cRegulatesAttributeQualifiedNameParserRuleCall_8_0_1 = (RuleCall)cRegulatesAttributeCrossReference_8_0.eContents().get(1);
		
		//RegularityAttribute:
		//	'regularity'? 'att'? name=ID ':' ('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')?
		//	(primitiveType=PrimitiveType | _type=[DataType|QualifiedName]) ('subsets' subsetOf+=[Attribute|QualifiedName] (','
		//	subsetOf+=[Attribute|QualifiedName])*)?
		//	regularityType=RegularityFeatureType regulates=[Attribute|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//'regularity'? 'att'? name=ID ':' ('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')?
		//(primitiveType=PrimitiveType | _type=[DataType|QualifiedName]) ('subsets' subsetOf+=[Attribute|QualifiedName] (','
		//subsetOf+=[Attribute|QualifiedName])*)? regularityType=RegularityFeatureType regulates=[Attribute|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//'regularity'?
		public Keyword getRegularityKeyword_0() { return cRegularityKeyword_0; }
		
		//'att'?
		public Keyword getAttKeyword_1() { return cAttKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//lowerBound=CARDINALITY
		public Assignment getLowerBoundAssignment_4_1() { return cLowerBoundAssignment_4_1; }
		
		//CARDINALITY
		public RuleCall getLowerBoundCARDINALITYParserRuleCall_4_1_0() { return cLowerBoundCARDINALITYParserRuleCall_4_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_4_2() { return cFullStopFullStopKeyword_4_2; }
		
		//upperBound=CARDINALITY
		public Assignment getUpperBoundAssignment_4_3() { return cUpperBoundAssignment_4_3; }
		
		//CARDINALITY
		public RuleCall getUpperBoundCARDINALITYParserRuleCall_4_3_0() { return cUpperBoundCARDINALITYParserRuleCall_4_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_4() { return cRightSquareBracketKeyword_4_4; }
		
		//(primitiveType=PrimitiveType | _type=[DataType|QualifiedName])
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//primitiveType=PrimitiveType
		public Assignment getPrimitiveTypeAssignment_5_0() { return cPrimitiveTypeAssignment_5_0; }
		
		//PrimitiveType
		public RuleCall getPrimitiveTypePrimitiveTypeEnumRuleCall_5_0_0() { return cPrimitiveTypePrimitiveTypeEnumRuleCall_5_0_0; }
		
		//_type=[DataType|QualifiedName]
		public Assignment get_typeAssignment_5_1() { return c_typeAssignment_5_1; }
		
		//[DataType|QualifiedName]
		public CrossReference get_typeDataTypeCrossReference_5_1_0() { return c_typeDataTypeCrossReference_5_1_0; }
		
		//QualifiedName
		public RuleCall get_typeDataTypeQualifiedNameParserRuleCall_5_1_0_1() { return c_typeDataTypeQualifiedNameParserRuleCall_5_1_0_1; }
		
		//('subsets' subsetOf+=[Attribute|QualifiedName] (',' subsetOf+=[Attribute|QualifiedName])*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'subsets'
		public Keyword getSubsetsKeyword_6_0() { return cSubsetsKeyword_6_0; }
		
		//subsetOf+=[Attribute|QualifiedName]
		public Assignment getSubsetOfAssignment_6_1() { return cSubsetOfAssignment_6_1; }
		
		//[Attribute|QualifiedName]
		public CrossReference getSubsetOfAttributeCrossReference_6_1_0() { return cSubsetOfAttributeCrossReference_6_1_0; }
		
		//QualifiedName
		public RuleCall getSubsetOfAttributeQualifiedNameParserRuleCall_6_1_0_1() { return cSubsetOfAttributeQualifiedNameParserRuleCall_6_1_0_1; }
		
		//(',' subsetOf+=[Attribute|QualifiedName])*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//','
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//subsetOf+=[Attribute|QualifiedName]
		public Assignment getSubsetOfAssignment_6_2_1() { return cSubsetOfAssignment_6_2_1; }
		
		//[Attribute|QualifiedName]
		public CrossReference getSubsetOfAttributeCrossReference_6_2_1_0() { return cSubsetOfAttributeCrossReference_6_2_1_0; }
		
		//QualifiedName
		public RuleCall getSubsetOfAttributeQualifiedNameParserRuleCall_6_2_1_0_1() { return cSubsetOfAttributeQualifiedNameParserRuleCall_6_2_1_0_1; }
		
		//regularityType=RegularityFeatureType
		public Assignment getRegularityTypeAssignment_7() { return cRegularityTypeAssignment_7; }
		
		//RegularityFeatureType
		public RuleCall getRegularityTypeRegularityFeatureTypeEnumRuleCall_7_0() { return cRegularityTypeRegularityFeatureTypeEnumRuleCall_7_0; }
		
		//regulates=[Attribute|QualifiedName]
		public Assignment getRegulatesAssignment_8() { return cRegulatesAssignment_8; }
		
		//[Attribute|QualifiedName]
		public CrossReference getRegulatesAttributeCrossReference_8_0() { return cRegulatesAttributeCrossReference_8_0; }
		
		//QualifiedName
		public RuleCall getRegulatesAttributeQualifiedNameParserRuleCall_8_0_1() { return cRegulatesAttributeQualifiedNameParserRuleCall_8_0_1; }
	}
	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.Reference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRegularityReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRefKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cLowerBoundCARDINALITYParserRuleCall_1_3_1_0 = (RuleCall)cLowerBoundAssignment_1_3_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		private final Assignment cUpperBoundAssignment_1_3_3 = (Assignment)cGroup_1_3.eContents().get(3);
		private final RuleCall cUpperBoundCARDINALITYParserRuleCall_1_3_3_0 = (RuleCall)cUpperBoundAssignment_1_3_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3_4 = (Keyword)cGroup_1_3.eContents().get(4);
		private final Assignment c_typeAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final CrossReference c_typeClassCrossReference_1_4_0 = (CrossReference)c_typeAssignment_1_4.eContents().get(0);
		private final RuleCall c_typeClassQualifiedNameParserRuleCall_1_4_0_1 = (RuleCall)c_typeClassCrossReference_1_4_0.eContents().get(1);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Keyword cSubsetsKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cSubsetOfAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final CrossReference cSubsetOfReferenceCrossReference_1_5_1_0 = (CrossReference)cSubsetOfAssignment_1_5_1.eContents().get(0);
		private final RuleCall cSubsetOfReferenceQualifiedNameParserRuleCall_1_5_1_0_1 = (RuleCall)cSubsetOfReferenceCrossReference_1_5_1_0.eContents().get(1);
		private final Group cGroup_1_5_2 = (Group)cGroup_1_5.eContents().get(2);
		private final Keyword cCommaKeyword_1_5_2_0 = (Keyword)cGroup_1_5_2.eContents().get(0);
		private final Assignment cSubsetOfAssignment_1_5_2_1 = (Assignment)cGroup_1_5_2.eContents().get(1);
		private final CrossReference cSubsetOfReferenceCrossReference_1_5_2_1_0 = (CrossReference)cSubsetOfAssignment_1_5_2_1.eContents().get(0);
		private final RuleCall cSubsetOfReferenceQualifiedNameParserRuleCall_1_5_2_1_0_1 = (RuleCall)cSubsetOfReferenceCrossReference_1_5_2_1_0.eContents().get(1);
		private final Group cGroup_1_6 = (Group)cGroup_1.eContents().get(6);
		private final Keyword cIsOppositeToKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Assignment cOppositeToAssignment_1_6_1 = (Assignment)cGroup_1_6.eContents().get(1);
		private final CrossReference cOppositeToReferenceCrossReference_1_6_1_0 = (CrossReference)cOppositeToAssignment_1_6_1.eContents().get(0);
		private final RuleCall cOppositeToReferenceQualifiedNameParserRuleCall_1_6_1_0_1 = (RuleCall)cOppositeToReferenceCrossReference_1_6_1_0.eContents().get(1);
		
		//Reference:
		//	RegularityReference |
		//	'ref' name=ID ':' ('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')?
		//	_type=[Class|QualifiedName] ('subsets' subsetOf+=[Reference|QualifiedName] (','
		//	subsetOf+=[Reference|QualifiedName])*)? ('isOppositeTo' oppositeTo=[Reference|QualifiedName])?;
		@Override public ParserRule getRule() { return rule; }
		
		//RegularityReference | 'ref' name=ID ':' ('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')?
		//_type=[Class|QualifiedName] ('subsets' subsetOf+=[Reference|QualifiedName] (',' subsetOf+=[Reference|QualifiedName])*)?
		//('isOppositeTo' oppositeTo=[Reference|QualifiedName])?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RegularityReference
		public RuleCall getRegularityReferenceParserRuleCall_0() { return cRegularityReferenceParserRuleCall_0; }
		
		//'ref' name=ID ':' ('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')? _type=[Class|QualifiedName] ('subsets'
		//subsetOf+=[Reference|QualifiedName] (',' subsetOf+=[Reference|QualifiedName])*)? ('isOppositeTo'
		//oppositeTo=[Reference|QualifiedName])?
		public Group getGroup_1() { return cGroup_1; }
		
		//'ref'
		public Keyword getRefKeyword_1_0() { return cRefKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_3_0() { return cLeftSquareBracketKeyword_1_3_0; }
		
		//lowerBound=CARDINALITY
		public Assignment getLowerBoundAssignment_1_3_1() { return cLowerBoundAssignment_1_3_1; }
		
		//CARDINALITY
		public RuleCall getLowerBoundCARDINALITYParserRuleCall_1_3_1_0() { return cLowerBoundCARDINALITYParserRuleCall_1_3_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_3_2() { return cFullStopFullStopKeyword_1_3_2; }
		
		//upperBound=CARDINALITY
		public Assignment getUpperBoundAssignment_1_3_3() { return cUpperBoundAssignment_1_3_3; }
		
		//CARDINALITY
		public RuleCall getUpperBoundCARDINALITYParserRuleCall_1_3_3_0() { return cUpperBoundCARDINALITYParserRuleCall_1_3_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3_4() { return cRightSquareBracketKeyword_1_3_4; }
		
		//_type=[Class|QualifiedName]
		public Assignment get_typeAssignment_1_4() { return c_typeAssignment_1_4; }
		
		//[Class|QualifiedName]
		public CrossReference get_typeClassCrossReference_1_4_0() { return c_typeClassCrossReference_1_4_0; }
		
		//QualifiedName
		public RuleCall get_typeClassQualifiedNameParserRuleCall_1_4_0_1() { return c_typeClassQualifiedNameParserRuleCall_1_4_0_1; }
		
		//('subsets' subsetOf+=[Reference|QualifiedName] (',' subsetOf+=[Reference|QualifiedName])*)?
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//'subsets'
		public Keyword getSubsetsKeyword_1_5_0() { return cSubsetsKeyword_1_5_0; }
		
		//subsetOf+=[Reference|QualifiedName]
		public Assignment getSubsetOfAssignment_1_5_1() { return cSubsetOfAssignment_1_5_1; }
		
		//[Reference|QualifiedName]
		public CrossReference getSubsetOfReferenceCrossReference_1_5_1_0() { return cSubsetOfReferenceCrossReference_1_5_1_0; }
		
		//QualifiedName
		public RuleCall getSubsetOfReferenceQualifiedNameParserRuleCall_1_5_1_0_1() { return cSubsetOfReferenceQualifiedNameParserRuleCall_1_5_1_0_1; }
		
		//(',' subsetOf+=[Reference|QualifiedName])*
		public Group getGroup_1_5_2() { return cGroup_1_5_2; }
		
		//','
		public Keyword getCommaKeyword_1_5_2_0() { return cCommaKeyword_1_5_2_0; }
		
		//subsetOf+=[Reference|QualifiedName]
		public Assignment getSubsetOfAssignment_1_5_2_1() { return cSubsetOfAssignment_1_5_2_1; }
		
		//[Reference|QualifiedName]
		public CrossReference getSubsetOfReferenceCrossReference_1_5_2_1_0() { return cSubsetOfReferenceCrossReference_1_5_2_1_0; }
		
		//QualifiedName
		public RuleCall getSubsetOfReferenceQualifiedNameParserRuleCall_1_5_2_1_0_1() { return cSubsetOfReferenceQualifiedNameParserRuleCall_1_5_2_1_0_1; }
		
		//('isOppositeTo' oppositeTo=[Reference|QualifiedName])?
		public Group getGroup_1_6() { return cGroup_1_6; }
		
		//'isOppositeTo'
		public Keyword getIsOppositeToKeyword_1_6_0() { return cIsOppositeToKeyword_1_6_0; }
		
		//oppositeTo=[Reference|QualifiedName]
		public Assignment getOppositeToAssignment_1_6_1() { return cOppositeToAssignment_1_6_1; }
		
		//[Reference|QualifiedName]
		public CrossReference getOppositeToReferenceCrossReference_1_6_1_0() { return cOppositeToReferenceCrossReference_1_6_1_0; }
		
		//QualifiedName
		public RuleCall getOppositeToReferenceQualifiedNameParserRuleCall_1_6_1_0_1() { return cOppositeToReferenceQualifiedNameParserRuleCall_1_6_1_0_1; }
	}
	public class RegularityReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.RegularityReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegularityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLowerBoundAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLowerBoundCARDINALITYParserRuleCall_4_1_0 = (RuleCall)cLowerBoundAssignment_4_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cUpperBoundAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cUpperBoundCARDINALITYParserRuleCall_4_3_0 = (RuleCall)cUpperBoundAssignment_4_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Assignment c_typeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference c_typeClassCrossReference_5_0 = (CrossReference)c_typeAssignment_5.eContents().get(0);
		private final RuleCall c_typeClassQualifiedNameParserRuleCall_5_0_1 = (RuleCall)c_typeClassCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSubsetsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSubsetOfAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cSubsetOfReferenceCrossReference_6_1_0 = (CrossReference)cSubsetOfAssignment_6_1.eContents().get(0);
		private final RuleCall cSubsetOfReferenceQualifiedNameParserRuleCall_6_1_0_1 = (RuleCall)cSubsetOfReferenceCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cSubsetOfAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final CrossReference cSubsetOfReferenceCrossReference_6_2_1_0 = (CrossReference)cSubsetOfAssignment_6_2_1.eContents().get(0);
		private final RuleCall cSubsetOfReferenceQualifiedNameParserRuleCall_6_2_1_0_1 = (RuleCall)cSubsetOfReferenceCrossReference_6_2_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cIsOppositeToKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cOppositeToAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cOppositeToReferenceCrossReference_7_1_0 = (CrossReference)cOppositeToAssignment_7_1.eContents().get(0);
		private final RuleCall cOppositeToReferenceQualifiedNameParserRuleCall_7_1_0_1 = (RuleCall)cOppositeToReferenceCrossReference_7_1_0.eContents().get(1);
		private final Assignment cRegularityTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cRegularityTypeRegularityFeatureTypeEnumRuleCall_8_0 = (RuleCall)cRegularityTypeAssignment_8.eContents().get(0);
		private final Assignment cRegulatesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cRegulatesReferenceCrossReference_9_0 = (CrossReference)cRegulatesAssignment_9.eContents().get(0);
		private final RuleCall cRegulatesReferenceQualifiedNameParserRuleCall_9_0_1 = (RuleCall)cRegulatesReferenceCrossReference_9_0.eContents().get(1);
		
		//RegularityReference:
		//	'regularity'? 'ref' name=ID ':' ('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')?
		//	_type=[Class|QualifiedName] ('subsets' subsetOf+=[Reference|QualifiedName] (','
		//	subsetOf+=[Reference|QualifiedName])*)? ('isOppositeTo' oppositeTo=[Reference|QualifiedName])?
		//	regularityType=RegularityFeatureType regulates=[Reference|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//'regularity'? 'ref' name=ID ':' ('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')?
		//_type=[Class|QualifiedName] ('subsets' subsetOf+=[Reference|QualifiedName] (',' subsetOf+=[Reference|QualifiedName])*)?
		//('isOppositeTo' oppositeTo=[Reference|QualifiedName])? regularityType=RegularityFeatureType
		//regulates=[Reference|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//'regularity'?
		public Keyword getRegularityKeyword_0() { return cRegularityKeyword_0; }
		
		//'ref'
		public Keyword getRefKeyword_1() { return cRefKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//lowerBound=CARDINALITY
		public Assignment getLowerBoundAssignment_4_1() { return cLowerBoundAssignment_4_1; }
		
		//CARDINALITY
		public RuleCall getLowerBoundCARDINALITYParserRuleCall_4_1_0() { return cLowerBoundCARDINALITYParserRuleCall_4_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_4_2() { return cFullStopFullStopKeyword_4_2; }
		
		//upperBound=CARDINALITY
		public Assignment getUpperBoundAssignment_4_3() { return cUpperBoundAssignment_4_3; }
		
		//CARDINALITY
		public RuleCall getUpperBoundCARDINALITYParserRuleCall_4_3_0() { return cUpperBoundCARDINALITYParserRuleCall_4_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_4() { return cRightSquareBracketKeyword_4_4; }
		
		//_type=[Class|QualifiedName]
		public Assignment get_typeAssignment_5() { return c_typeAssignment_5; }
		
		//[Class|QualifiedName]
		public CrossReference get_typeClassCrossReference_5_0() { return c_typeClassCrossReference_5_0; }
		
		//QualifiedName
		public RuleCall get_typeClassQualifiedNameParserRuleCall_5_0_1() { return c_typeClassQualifiedNameParserRuleCall_5_0_1; }
		
		//('subsets' subsetOf+=[Reference|QualifiedName] (',' subsetOf+=[Reference|QualifiedName])*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'subsets'
		public Keyword getSubsetsKeyword_6_0() { return cSubsetsKeyword_6_0; }
		
		//subsetOf+=[Reference|QualifiedName]
		public Assignment getSubsetOfAssignment_6_1() { return cSubsetOfAssignment_6_1; }
		
		//[Reference|QualifiedName]
		public CrossReference getSubsetOfReferenceCrossReference_6_1_0() { return cSubsetOfReferenceCrossReference_6_1_0; }
		
		//QualifiedName
		public RuleCall getSubsetOfReferenceQualifiedNameParserRuleCall_6_1_0_1() { return cSubsetOfReferenceQualifiedNameParserRuleCall_6_1_0_1; }
		
		//(',' subsetOf+=[Reference|QualifiedName])*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//','
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//subsetOf+=[Reference|QualifiedName]
		public Assignment getSubsetOfAssignment_6_2_1() { return cSubsetOfAssignment_6_2_1; }
		
		//[Reference|QualifiedName]
		public CrossReference getSubsetOfReferenceCrossReference_6_2_1_0() { return cSubsetOfReferenceCrossReference_6_2_1_0; }
		
		//QualifiedName
		public RuleCall getSubsetOfReferenceQualifiedNameParserRuleCall_6_2_1_0_1() { return cSubsetOfReferenceQualifiedNameParserRuleCall_6_2_1_0_1; }
		
		//('isOppositeTo' oppositeTo=[Reference|QualifiedName])?
		public Group getGroup_7() { return cGroup_7; }
		
		//'isOppositeTo'
		public Keyword getIsOppositeToKeyword_7_0() { return cIsOppositeToKeyword_7_0; }
		
		//oppositeTo=[Reference|QualifiedName]
		public Assignment getOppositeToAssignment_7_1() { return cOppositeToAssignment_7_1; }
		
		//[Reference|QualifiedName]
		public CrossReference getOppositeToReferenceCrossReference_7_1_0() { return cOppositeToReferenceCrossReference_7_1_0; }
		
		//QualifiedName
		public RuleCall getOppositeToReferenceQualifiedNameParserRuleCall_7_1_0_1() { return cOppositeToReferenceQualifiedNameParserRuleCall_7_1_0_1; }
		
		//regularityType=RegularityFeatureType
		public Assignment getRegularityTypeAssignment_8() { return cRegularityTypeAssignment_8; }
		
		//RegularityFeatureType
		public RuleCall getRegularityTypeRegularityFeatureTypeEnumRuleCall_8_0() { return cRegularityTypeRegularityFeatureTypeEnumRuleCall_8_0; }
		
		//regulates=[Reference|QualifiedName]
		public Assignment getRegulatesAssignment_9() { return cRegulatesAssignment_9; }
		
		//[Reference|QualifiedName]
		public CrossReference getRegulatesReferenceCrossReference_9_0() { return cRegulatesReferenceCrossReference_9_0; }
		
		//QualifiedName
		public RuleCall getRegulatesReferenceQualifiedNameParserRuleCall_9_0_1() { return cRegulatesReferenceQualifiedNameParserRuleCall_9_0_1; }
	}
	public class FeatureIntoRegularityFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.FeatureIntoRegularityFeature");
		private final RuleCall cRegularityFeatureParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// ParserRule used to enforce specialization only
		//FeatureIntoRegularityFeature Feature:
		//	RegularityFeature;
		@Override public ParserRule getRule() { return rule; }
		
		//RegularityFeature
		public RuleCall getRegularityFeatureParserRuleCall() { return cRegularityFeatureParserRuleCall; }
	}
	public class RegularityFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.RegularityFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRegularityAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRegularityReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// ParserRule used to enforce specialization only
		//RegularityFeature:
		//	RegularityAttribute | RegularityReference;
		@Override public ParserRule getRule() { return rule; }
		
		//RegularityAttribute | RegularityReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RegularityAttribute
		public RuleCall getRegularityAttributeParserRuleCall_0() { return cRegularityAttributeParserRuleCall_0; }
		
		//RegularityReference
		public RuleCall getRegularityReferenceParserRuleCall_1() { return cRegularityReferenceParserRuleCall_1; }
	}
	public class CARDINALITYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.CARDINALITY");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CARDINALITY ecore::EInt:
		//	'*' | INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class FeatureAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.FeatureAssignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleReferenceAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultipleReferenceAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSingleAttributeAssignmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMultipleAttributeAssignmentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//FeatureAssignment:
		//	SingleReferenceAssignment
		//	| MultipleReferenceAssignment
		//	| SingleAttributeAssignment
		//	| MultipleAttributeAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//SingleReferenceAssignment | MultipleReferenceAssignment | SingleAttributeAssignment | MultipleAttributeAssignment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SingleReferenceAssignment
		public RuleCall getSingleReferenceAssignmentParserRuleCall_0() { return cSingleReferenceAssignmentParserRuleCall_0; }
		
		//MultipleReferenceAssignment
		public RuleCall getMultipleReferenceAssignmentParserRuleCall_1() { return cMultipleReferenceAssignmentParserRuleCall_1; }
		
		//SingleAttributeAssignment
		public RuleCall getSingleAttributeAssignmentParserRuleCall_2() { return cSingleAttributeAssignmentParserRuleCall_2; }
		
		//MultipleAttributeAssignment
		public RuleCall getMultipleAttributeAssignmentParserRuleCall_3() { return cMultipleAttributeAssignmentParserRuleCall_3; }
	}
	public class SingleReferenceAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.SingleReferenceAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceReferenceCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceReferenceQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cReferenceReferenceCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cValuesEntityDeclarationCrossReference_3_0 = (CrossReference)cValuesAssignment_3.eContents().get(0);
		private final RuleCall cValuesEntityDeclarationQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cValuesEntityDeclarationCrossReference_3_0.eContents().get(1);
		
		//SingleReferenceAssignment ReferenceAssignment:
		//	'ref' reference=[Reference|QualifiedName] '=' values+=[EntityDeclaration|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//'ref' reference=[Reference|QualifiedName] '=' values+=[EntityDeclaration|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//'ref'
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }
		
		//reference=[Reference|QualifiedName]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//[Reference|QualifiedName]
		public CrossReference getReferenceReferenceCrossReference_1_0() { return cReferenceReferenceCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getReferenceReferenceQualifiedNameParserRuleCall_1_0_1() { return cReferenceReferenceQualifiedNameParserRuleCall_1_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//values+=[EntityDeclaration|QualifiedName]
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }
		
		//[EntityDeclaration|QualifiedName]
		public CrossReference getValuesEntityDeclarationCrossReference_3_0() { return cValuesEntityDeclarationCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getValuesEntityDeclarationQualifiedNameParserRuleCall_3_0_1() { return cValuesEntityDeclarationQualifiedNameParserRuleCall_3_0_1; }
	}
	public class MultipleReferenceAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.MultipleReferenceAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceReferenceCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceReferenceQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cReferenceReferenceCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValuesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cValuesEntityDeclarationCrossReference_4_0 = (CrossReference)cValuesAssignment_4.eContents().get(0);
		private final RuleCall cValuesEntityDeclarationQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cValuesEntityDeclarationCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cValuesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cValuesEntityDeclarationCrossReference_5_1_0 = (CrossReference)cValuesAssignment_5_1.eContents().get(0);
		private final RuleCall cValuesEntityDeclarationQualifiedNameParserRuleCall_5_1_0_1 = (RuleCall)cValuesEntityDeclarationCrossReference_5_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MultipleReferenceAssignment ReferenceAssignment:
		//	'ref' reference=[Reference|QualifiedName] '='
		//	'{'
		//	values+=[EntityDeclaration|QualifiedName] (',' values+=[EntityDeclaration|QualifiedName])*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ref' reference=[Reference|QualifiedName] '=' '{' values+=[EntityDeclaration|QualifiedName] (','
		//values+=[EntityDeclaration|QualifiedName])* '}'
		public Group getGroup() { return cGroup; }
		
		//'ref'
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }
		
		//reference=[Reference|QualifiedName]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//[Reference|QualifiedName]
		public CrossReference getReferenceReferenceCrossReference_1_0() { return cReferenceReferenceCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getReferenceReferenceQualifiedNameParserRuleCall_1_0_1() { return cReferenceReferenceQualifiedNameParserRuleCall_1_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//values+=[EntityDeclaration|QualifiedName]
		public Assignment getValuesAssignment_4() { return cValuesAssignment_4; }
		
		//[EntityDeclaration|QualifiedName]
		public CrossReference getValuesEntityDeclarationCrossReference_4_0() { return cValuesEntityDeclarationCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getValuesEntityDeclarationQualifiedNameParserRuleCall_4_0_1() { return cValuesEntityDeclarationQualifiedNameParserRuleCall_4_0_1; }
		
		//(',' values+=[EntityDeclaration|QualifiedName])*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//values+=[EntityDeclaration|QualifiedName]
		public Assignment getValuesAssignment_5_1() { return cValuesAssignment_5_1; }
		
		//[EntityDeclaration|QualifiedName]
		public CrossReference getValuesEntityDeclarationCrossReference_5_1_0() { return cValuesEntityDeclarationCrossReference_5_1_0; }
		
		//QualifiedName
		public RuleCall getValuesEntityDeclarationQualifiedNameParserRuleCall_5_1_0_1() { return cValuesEntityDeclarationQualifiedNameParserRuleCall_5_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SingleAttributeAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.SingleAttributeAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAttributeAttributeCrossReference_1_0 = (CrossReference)cAttributeAssignment_1.eContents().get(0);
		private final RuleCall cAttributeAttributeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cAttributeAttributeCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cStringValuesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cStringValuesSTRINGTerminalRuleCall_3_0_0 = (RuleCall)cStringValuesAssignment_3_0.eContents().get(0);
		private final Assignment cNumberValuesAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cNumberValuesNUMBERParserRuleCall_3_1_0 = (RuleCall)cNumberValuesAssignment_3_1.eContents().get(0);
		private final Assignment cBooleanValuesAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cBooleanValuesBOOLEANParserRuleCall_3_2_0 = (RuleCall)cBooleanValuesAssignment_3_2.eContents().get(0);
		private final Assignment cDatatypeValuesAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final CrossReference cDatatypeValuesIndividualCrossReference_3_3_0 = (CrossReference)cDatatypeValuesAssignment_3_3.eContents().get(0);
		private final RuleCall cDatatypeValuesIndividualQualifiedNameParserRuleCall_3_3_0_1 = (RuleCall)cDatatypeValuesIndividualCrossReference_3_3_0.eContents().get(1);
		private final Assignment cUnnamedValuesAssignment_3_4 = (Assignment)cAlternatives_3.eContents().get(4);
		private final RuleCall cUnnamedValuesUnnamedIndividualParserRuleCall_3_4_0 = (RuleCall)cUnnamedValuesAssignment_3_4.eContents().get(0);
		
		//SingleAttributeAssignment AttributeAssignment:
		//	'att'? attribute=[Attribute|QualifiedName] '=' (stringValues+=STRING
		//	| numberValues+=NUMBER
		//	| booleanValues+=BOOLEAN
		//	| datatypeValues+=[Individual|QualifiedName] | unnamedValues+=UnnamedIndividual);
		@Override public ParserRule getRule() { return rule; }
		
		//'att'? attribute=[Attribute|QualifiedName] '=' (stringValues+=STRING | numberValues+=NUMBER | booleanValues+=BOOLEAN |
		//datatypeValues+=[Individual|QualifiedName] | unnamedValues+=UnnamedIndividual)
		public Group getGroup() { return cGroup; }
		
		//'att'?
		public Keyword getAttKeyword_0() { return cAttKeyword_0; }
		
		//attribute=[Attribute|QualifiedName]
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }
		
		//[Attribute|QualifiedName]
		public CrossReference getAttributeAttributeCrossReference_1_0() { return cAttributeAttributeCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getAttributeAttributeQualifiedNameParserRuleCall_1_0_1() { return cAttributeAttributeQualifiedNameParserRuleCall_1_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//(stringValues+=STRING | numberValues+=NUMBER | booleanValues+=BOOLEAN | datatypeValues+=[Individual|QualifiedName] |
		//unnamedValues+=UnnamedIndividual)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//stringValues+=STRING
		public Assignment getStringValuesAssignment_3_0() { return cStringValuesAssignment_3_0; }
		
		//STRING
		public RuleCall getStringValuesSTRINGTerminalRuleCall_3_0_0() { return cStringValuesSTRINGTerminalRuleCall_3_0_0; }
		
		//numberValues+=NUMBER
		public Assignment getNumberValuesAssignment_3_1() { return cNumberValuesAssignment_3_1; }
		
		//NUMBER
		public RuleCall getNumberValuesNUMBERParserRuleCall_3_1_0() { return cNumberValuesNUMBERParserRuleCall_3_1_0; }
		
		//booleanValues+=BOOLEAN
		public Assignment getBooleanValuesAssignment_3_2() { return cBooleanValuesAssignment_3_2; }
		
		//BOOLEAN
		public RuleCall getBooleanValuesBOOLEANParserRuleCall_3_2_0() { return cBooleanValuesBOOLEANParserRuleCall_3_2_0; }
		
		//datatypeValues+=[Individual|QualifiedName]
		public Assignment getDatatypeValuesAssignment_3_3() { return cDatatypeValuesAssignment_3_3; }
		
		//[Individual|QualifiedName]
		public CrossReference getDatatypeValuesIndividualCrossReference_3_3_0() { return cDatatypeValuesIndividualCrossReference_3_3_0; }
		
		//QualifiedName
		public RuleCall getDatatypeValuesIndividualQualifiedNameParserRuleCall_3_3_0_1() { return cDatatypeValuesIndividualQualifiedNameParserRuleCall_3_3_0_1; }
		
		//unnamedValues+=UnnamedIndividual
		public Assignment getUnnamedValuesAssignment_3_4() { return cUnnamedValuesAssignment_3_4; }
		
		//UnnamedIndividual
		public RuleCall getUnnamedValuesUnnamedIndividualParserRuleCall_3_4_0() { return cUnnamedValuesUnnamedIndividualParserRuleCall_3_4_0; }
	}
	public class MultipleAttributeAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.MultipleAttributeAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAttributeAttributeCrossReference_1_0 = (CrossReference)cAttributeAssignment_1.eContents().get(0);
		private final RuleCall cAttributeAttributeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cAttributeAttributeCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Assignment cStringValuesAssignment_4_0_0 = (Assignment)cAlternatives_4_0.eContents().get(0);
		private final RuleCall cStringValuesSTRINGTerminalRuleCall_4_0_0_0 = (RuleCall)cStringValuesAssignment_4_0_0.eContents().get(0);
		private final Assignment cNumberValuesAssignment_4_0_1 = (Assignment)cAlternatives_4_0.eContents().get(1);
		private final RuleCall cNumberValuesNUMBERParserRuleCall_4_0_1_0 = (RuleCall)cNumberValuesAssignment_4_0_1.eContents().get(0);
		private final Assignment cBooleanValuesAssignment_4_0_2 = (Assignment)cAlternatives_4_0.eContents().get(2);
		private final RuleCall cBooleanValuesBOOLEANParserRuleCall_4_0_2_0 = (RuleCall)cBooleanValuesAssignment_4_0_2.eContents().get(0);
		private final Assignment cDatatypeValuesAssignment_4_0_3 = (Assignment)cAlternatives_4_0.eContents().get(3);
		private final CrossReference cDatatypeValuesIndividualCrossReference_4_0_3_0 = (CrossReference)cDatatypeValuesAssignment_4_0_3.eContents().get(0);
		private final RuleCall cDatatypeValuesIndividualQualifiedNameParserRuleCall_4_0_3_0_1 = (RuleCall)cDatatypeValuesIndividualCrossReference_4_0_3_0.eContents().get(1);
		private final Assignment cUnnamedValuesAssignment_4_0_4 = (Assignment)cAlternatives_4_0.eContents().get(4);
		private final RuleCall cUnnamedValuesUnnamedIndividualParserRuleCall_4_0_4_0 = (RuleCall)cUnnamedValuesAssignment_4_0_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Group cGroup_4_1_0 = (Group)cAlternatives_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_4_1_0_0 = (Keyword)cGroup_4_1_0.eContents().get(0);
		private final Assignment cStringValuesAssignment_4_1_0_1 = (Assignment)cGroup_4_1_0.eContents().get(1);
		private final RuleCall cStringValuesSTRINGTerminalRuleCall_4_1_0_1_0 = (RuleCall)cStringValuesAssignment_4_1_0_1.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cAlternatives_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cNumberValuesAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cNumberValuesNUMBERParserRuleCall_4_1_1_1_0 = (RuleCall)cNumberValuesAssignment_4_1_1_1.eContents().get(0);
		private final Group cGroup_4_1_2 = (Group)cAlternatives_4_1.eContents().get(2);
		private final Keyword cCommaKeyword_4_1_2_0 = (Keyword)cGroup_4_1_2.eContents().get(0);
		private final Assignment cBooleanValuesAssignment_4_1_2_1 = (Assignment)cGroup_4_1_2.eContents().get(1);
		private final RuleCall cBooleanValuesBOOLEANParserRuleCall_4_1_2_1_0 = (RuleCall)cBooleanValuesAssignment_4_1_2_1.eContents().get(0);
		private final Group cGroup_4_1_3 = (Group)cAlternatives_4_1.eContents().get(3);
		private final Keyword cCommaKeyword_4_1_3_0 = (Keyword)cGroup_4_1_3.eContents().get(0);
		private final Assignment cDatatypeValuesAssignment_4_1_3_1 = (Assignment)cGroup_4_1_3.eContents().get(1);
		private final CrossReference cDatatypeValuesIndividualCrossReference_4_1_3_1_0 = (CrossReference)cDatatypeValuesAssignment_4_1_3_1.eContents().get(0);
		private final RuleCall cDatatypeValuesIndividualQualifiedNameParserRuleCall_4_1_3_1_0_1 = (RuleCall)cDatatypeValuesIndividualCrossReference_4_1_3_1_0.eContents().get(1);
		private final Group cGroup_4_1_4 = (Group)cAlternatives_4_1.eContents().get(4);
		private final Keyword cCommaKeyword_4_1_4_0 = (Keyword)cGroup_4_1_4.eContents().get(0);
		private final Assignment cUnnamedValuesAssignment_4_1_4_1 = (Assignment)cGroup_4_1_4.eContents().get(1);
		private final RuleCall cUnnamedValuesUnnamedIndividualParserRuleCall_4_1_4_1_0 = (RuleCall)cUnnamedValuesAssignment_4_1_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MultipleAttributeAssignment AttributeAssignment:
		//	'att'? attribute=[Attribute|QualifiedName] '='
		//	'{' ((stringValues+=STRING
		//	| numberValues+=NUMBER
		//	| booleanValues+=BOOLEAN
		//	| datatypeValues+=[Individual|QualifiedName] | unnamedValues+=UnnamedIndividual) (',' stringValues+=STRING
		//	| ',' numberValues+=NUMBER
		//	| ',' booleanValues+=BOOLEAN
		//	| ',' datatypeValues+=[Individual|QualifiedName] | ',' unnamedValues+=UnnamedIndividual)*)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'att'? attribute=[Attribute|QualifiedName] '=' '{' ((stringValues+=STRING | numberValues+=NUMBER |
		//booleanValues+=BOOLEAN | datatypeValues+=[Individual|QualifiedName] | unnamedValues+=UnnamedIndividual) (','
		//stringValues+=STRING | ',' numberValues+=NUMBER | ',' booleanValues+=BOOLEAN | ','
		//datatypeValues+=[Individual|QualifiedName] | ',' unnamedValues+=UnnamedIndividual)*) '}'
		public Group getGroup() { return cGroup; }
		
		//'att'?
		public Keyword getAttKeyword_0() { return cAttKeyword_0; }
		
		//attribute=[Attribute|QualifiedName]
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }
		
		//[Attribute|QualifiedName]
		public CrossReference getAttributeAttributeCrossReference_1_0() { return cAttributeAttributeCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getAttributeAttributeQualifiedNameParserRuleCall_1_0_1() { return cAttributeAttributeQualifiedNameParserRuleCall_1_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//((stringValues+=STRING | numberValues+=NUMBER | booleanValues+=BOOLEAN | datatypeValues+=[Individual|QualifiedName] |
		//unnamedValues+=UnnamedIndividual) (',' stringValues+=STRING | ',' numberValues+=NUMBER | ',' booleanValues+=BOOLEAN |
		//',' datatypeValues+=[Individual|QualifiedName] | ',' unnamedValues+=UnnamedIndividual)*)
		public Group getGroup_4() { return cGroup_4; }
		
		//(stringValues+=STRING | numberValues+=NUMBER | booleanValues+=BOOLEAN | datatypeValues+=[Individual|QualifiedName] |
		//unnamedValues+=UnnamedIndividual)
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//stringValues+=STRING
		public Assignment getStringValuesAssignment_4_0_0() { return cStringValuesAssignment_4_0_0; }
		
		//STRING
		public RuleCall getStringValuesSTRINGTerminalRuleCall_4_0_0_0() { return cStringValuesSTRINGTerminalRuleCall_4_0_0_0; }
		
		//numberValues+=NUMBER
		public Assignment getNumberValuesAssignment_4_0_1() { return cNumberValuesAssignment_4_0_1; }
		
		//NUMBER
		public RuleCall getNumberValuesNUMBERParserRuleCall_4_0_1_0() { return cNumberValuesNUMBERParserRuleCall_4_0_1_0; }
		
		//booleanValues+=BOOLEAN
		public Assignment getBooleanValuesAssignment_4_0_2() { return cBooleanValuesAssignment_4_0_2; }
		
		//BOOLEAN
		public RuleCall getBooleanValuesBOOLEANParserRuleCall_4_0_2_0() { return cBooleanValuesBOOLEANParserRuleCall_4_0_2_0; }
		
		//datatypeValues+=[Individual|QualifiedName]
		public Assignment getDatatypeValuesAssignment_4_0_3() { return cDatatypeValuesAssignment_4_0_3; }
		
		//[Individual|QualifiedName]
		public CrossReference getDatatypeValuesIndividualCrossReference_4_0_3_0() { return cDatatypeValuesIndividualCrossReference_4_0_3_0; }
		
		//QualifiedName
		public RuleCall getDatatypeValuesIndividualQualifiedNameParserRuleCall_4_0_3_0_1() { return cDatatypeValuesIndividualQualifiedNameParserRuleCall_4_0_3_0_1; }
		
		//unnamedValues+=UnnamedIndividual
		public Assignment getUnnamedValuesAssignment_4_0_4() { return cUnnamedValuesAssignment_4_0_4; }
		
		//UnnamedIndividual
		public RuleCall getUnnamedValuesUnnamedIndividualParserRuleCall_4_0_4_0() { return cUnnamedValuesUnnamedIndividualParserRuleCall_4_0_4_0; }
		
		//(',' stringValues+=STRING | ',' numberValues+=NUMBER | ',' booleanValues+=BOOLEAN | ','
		//datatypeValues+=[Individual|QualifiedName] | ',' unnamedValues+=UnnamedIndividual)*
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//',' stringValues+=STRING
		public Group getGroup_4_1_0() { return cGroup_4_1_0; }
		
		//','
		public Keyword getCommaKeyword_4_1_0_0() { return cCommaKeyword_4_1_0_0; }
		
		//stringValues+=STRING
		public Assignment getStringValuesAssignment_4_1_0_1() { return cStringValuesAssignment_4_1_0_1; }
		
		//STRING
		public RuleCall getStringValuesSTRINGTerminalRuleCall_4_1_0_1_0() { return cStringValuesSTRINGTerminalRuleCall_4_1_0_1_0; }
		
		//',' numberValues+=NUMBER
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }
		
		//numberValues+=NUMBER
		public Assignment getNumberValuesAssignment_4_1_1_1() { return cNumberValuesAssignment_4_1_1_1; }
		
		//NUMBER
		public RuleCall getNumberValuesNUMBERParserRuleCall_4_1_1_1_0() { return cNumberValuesNUMBERParserRuleCall_4_1_1_1_0; }
		
		//',' booleanValues+=BOOLEAN
		public Group getGroup_4_1_2() { return cGroup_4_1_2; }
		
		//','
		public Keyword getCommaKeyword_4_1_2_0() { return cCommaKeyword_4_1_2_0; }
		
		//booleanValues+=BOOLEAN
		public Assignment getBooleanValuesAssignment_4_1_2_1() { return cBooleanValuesAssignment_4_1_2_1; }
		
		//BOOLEAN
		public RuleCall getBooleanValuesBOOLEANParserRuleCall_4_1_2_1_0() { return cBooleanValuesBOOLEANParserRuleCall_4_1_2_1_0; }
		
		//',' datatypeValues+=[Individual|QualifiedName]
		public Group getGroup_4_1_3() { return cGroup_4_1_3; }
		
		//','
		public Keyword getCommaKeyword_4_1_3_0() { return cCommaKeyword_4_1_3_0; }
		
		//datatypeValues+=[Individual|QualifiedName]
		public Assignment getDatatypeValuesAssignment_4_1_3_1() { return cDatatypeValuesAssignment_4_1_3_1; }
		
		//[Individual|QualifiedName]
		public CrossReference getDatatypeValuesIndividualCrossReference_4_1_3_1_0() { return cDatatypeValuesIndividualCrossReference_4_1_3_1_0; }
		
		//QualifiedName
		public RuleCall getDatatypeValuesIndividualQualifiedNameParserRuleCall_4_1_3_1_0_1() { return cDatatypeValuesIndividualQualifiedNameParserRuleCall_4_1_3_1_0_1; }
		
		//',' unnamedValues+=UnnamedIndividual
		public Group getGroup_4_1_4() { return cGroup_4_1_4; }
		
		//','
		public Keyword getCommaKeyword_4_1_4_0() { return cCommaKeyword_4_1_4_0; }
		
		//unnamedValues+=UnnamedIndividual
		public Assignment getUnnamedValuesAssignment_4_1_4_1() { return cUnnamedValuesAssignment_4_1_4_1; }
		
		//UnnamedIndividual
		public RuleCall getUnnamedValuesUnnamedIndividualParserRuleCall_4_1_4_1_0() { return cUnnamedValuesUnnamedIndividualParserRuleCall_4_1_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class BOOLEANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.BOOLEAN");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOLEAN ecore::EBooleanObject:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.NUMBER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//NUMBER ecore::EDoubleObject:
		//	'-'? INT ('.' INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT ('.' INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//('.' INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	public class UnnamedIndividualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.UnnamedIndividual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIndividualAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssignmentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssignmentsSimpleAttributeAssignmentParserRuleCall_2_0 = (RuleCall)cAssignmentsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UnnamedIndividual Individual:
		//	{Individual} '[' assignments+=SimpleAttributeAssignment* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{Individual} '[' assignments+=SimpleAttributeAssignment* ']'
		public Group getGroup() { return cGroup; }
		
		//{Individual}
		public Action getIndividualAction_0() { return cIndividualAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//assignments+=SimpleAttributeAssignment*
		public Assignment getAssignmentsAssignment_2() { return cAssignmentsAssignment_2; }
		
		//SimpleAttributeAssignment
		public RuleCall getAssignmentsSimpleAttributeAssignmentParserRuleCall_2_0() { return cAssignmentsSimpleAttributeAssignmentParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class SimpleAttributeAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.SimpleAttributeAssignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleSimpleAttributeAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultipleSimpleAttributeAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SimpleAttributeAssignment AttributeAssignment:
		//	SingleSimpleAttributeAssignment
		//	| MultipleSimpleAttributeAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//SingleSimpleAttributeAssignment | MultipleSimpleAttributeAssignment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SingleSimpleAttributeAssignment
		public RuleCall getSingleSimpleAttributeAssignmentParserRuleCall_0() { return cSingleSimpleAttributeAssignmentParserRuleCall_0; }
		
		//MultipleSimpleAttributeAssignment
		public RuleCall getMultipleSimpleAttributeAssignmentParserRuleCall_1() { return cMultipleSimpleAttributeAssignmentParserRuleCall_1; }
	}
	public class SingleSimpleAttributeAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.SingleSimpleAttributeAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAttributeAttributeCrossReference_0_0 = (CrossReference)cAttributeAssignment_0.eContents().get(0);
		private final RuleCall cAttributeAttributeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cAttributeAttributeCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cStringValuesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cStringValuesSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cStringValuesAssignment_2_0.eContents().get(0);
		private final Assignment cNumberValuesAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cNumberValuesNUMBERParserRuleCall_2_1_0 = (RuleCall)cNumberValuesAssignment_2_1.eContents().get(0);
		private final Assignment cBooleanValuesAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cBooleanValuesBOOLEANParserRuleCall_2_2_0 = (RuleCall)cBooleanValuesAssignment_2_2.eContents().get(0);
		private final Assignment cDatatypeValuesAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final CrossReference cDatatypeValuesIndividualCrossReference_2_3_0 = (CrossReference)cDatatypeValuesAssignment_2_3.eContents().get(0);
		private final RuleCall cDatatypeValuesIndividualQualifiedNameParserRuleCall_2_3_0_1 = (RuleCall)cDatatypeValuesIndividualCrossReference_2_3_0.eContents().get(1);
		private final Assignment cUnnamedValuesAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cUnnamedValuesUnnamedIndividualParserRuleCall_2_4_0 = (RuleCall)cUnnamedValuesAssignment_2_4.eContents().get(0);
		
		//SingleSimpleAttributeAssignment AttributeAssignment:
		//	attribute=[Attribute|QualifiedName] '=' (stringValues+=STRING
		//	| numberValues+=NUMBER
		//	| booleanValues+=BOOLEAN
		//	| datatypeValues+=[Individual|QualifiedName] | unnamedValues+=UnnamedIndividual);
		@Override public ParserRule getRule() { return rule; }
		
		//attribute=[Attribute|QualifiedName] '=' (stringValues+=STRING | numberValues+=NUMBER | booleanValues+=BOOLEAN |
		//datatypeValues+=[Individual|QualifiedName] | unnamedValues+=UnnamedIndividual)
		public Group getGroup() { return cGroup; }
		
		//attribute=[Attribute|QualifiedName]
		public Assignment getAttributeAssignment_0() { return cAttributeAssignment_0; }
		
		//[Attribute|QualifiedName]
		public CrossReference getAttributeAttributeCrossReference_0_0() { return cAttributeAttributeCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getAttributeAttributeQualifiedNameParserRuleCall_0_0_1() { return cAttributeAttributeQualifiedNameParserRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//(stringValues+=STRING | numberValues+=NUMBER | booleanValues+=BOOLEAN | datatypeValues+=[Individual|QualifiedName] |
		//unnamedValues+=UnnamedIndividual)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//stringValues+=STRING
		public Assignment getStringValuesAssignment_2_0() { return cStringValuesAssignment_2_0; }
		
		//STRING
		public RuleCall getStringValuesSTRINGTerminalRuleCall_2_0_0() { return cStringValuesSTRINGTerminalRuleCall_2_0_0; }
		
		//numberValues+=NUMBER
		public Assignment getNumberValuesAssignment_2_1() { return cNumberValuesAssignment_2_1; }
		
		//NUMBER
		public RuleCall getNumberValuesNUMBERParserRuleCall_2_1_0() { return cNumberValuesNUMBERParserRuleCall_2_1_0; }
		
		//booleanValues+=BOOLEAN
		public Assignment getBooleanValuesAssignment_2_2() { return cBooleanValuesAssignment_2_2; }
		
		//BOOLEAN
		public RuleCall getBooleanValuesBOOLEANParserRuleCall_2_2_0() { return cBooleanValuesBOOLEANParserRuleCall_2_2_0; }
		
		//datatypeValues+=[Individual|QualifiedName]
		public Assignment getDatatypeValuesAssignment_2_3() { return cDatatypeValuesAssignment_2_3; }
		
		//[Individual|QualifiedName]
		public CrossReference getDatatypeValuesIndividualCrossReference_2_3_0() { return cDatatypeValuesIndividualCrossReference_2_3_0; }
		
		//QualifiedName
		public RuleCall getDatatypeValuesIndividualQualifiedNameParserRuleCall_2_3_0_1() { return cDatatypeValuesIndividualQualifiedNameParserRuleCall_2_3_0_1; }
		
		//unnamedValues+=UnnamedIndividual
		public Assignment getUnnamedValuesAssignment_2_4() { return cUnnamedValuesAssignment_2_4; }
		
		//UnnamedIndividual
		public RuleCall getUnnamedValuesUnnamedIndividualParserRuleCall_2_4_0() { return cUnnamedValuesUnnamedIndividualParserRuleCall_2_4_0; }
	}
	public class MultipleSimpleAttributeAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.MultipleSimpleAttributeAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAttributeAttributeCrossReference_0_0 = (CrossReference)cAttributeAssignment_0.eContents().get(0);
		private final RuleCall cAttributeAttributeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cAttributeAttributeCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Assignment cStringValuesAssignment_3_0_0 = (Assignment)cAlternatives_3_0.eContents().get(0);
		private final RuleCall cStringValuesSTRINGTerminalRuleCall_3_0_0_0 = (RuleCall)cStringValuesAssignment_3_0_0.eContents().get(0);
		private final Assignment cNumberValuesAssignment_3_0_1 = (Assignment)cAlternatives_3_0.eContents().get(1);
		private final RuleCall cNumberValuesNUMBERParserRuleCall_3_0_1_0 = (RuleCall)cNumberValuesAssignment_3_0_1.eContents().get(0);
		private final Assignment cBooleanValuesAssignment_3_0_2 = (Assignment)cAlternatives_3_0.eContents().get(2);
		private final RuleCall cBooleanValuesBOOLEANParserRuleCall_3_0_2_0 = (RuleCall)cBooleanValuesAssignment_3_0_2.eContents().get(0);
		private final Assignment cDatatypeValuesAssignment_3_0_3 = (Assignment)cAlternatives_3_0.eContents().get(3);
		private final CrossReference cDatatypeValuesIndividualCrossReference_3_0_3_0 = (CrossReference)cDatatypeValuesAssignment_3_0_3.eContents().get(0);
		private final RuleCall cDatatypeValuesIndividualQualifiedNameParserRuleCall_3_0_3_0_1 = (RuleCall)cDatatypeValuesIndividualCrossReference_3_0_3_0.eContents().get(1);
		private final Assignment cUnnamedValuesAssignment_3_0_4 = (Assignment)cAlternatives_3_0.eContents().get(4);
		private final RuleCall cUnnamedValuesUnnamedIndividualParserRuleCall_3_0_4_0 = (RuleCall)cUnnamedValuesAssignment_3_0_4.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Assignment cStringValuesAssignment_3_1_0_1 = (Assignment)cGroup_3_1_0.eContents().get(1);
		private final RuleCall cStringValuesSTRINGTerminalRuleCall_3_1_0_1_0 = (RuleCall)cStringValuesAssignment_3_1_0_1.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cAlternatives_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cNumberValuesAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cNumberValuesNUMBERParserRuleCall_3_1_1_1_0 = (RuleCall)cNumberValuesAssignment_3_1_1_1.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cAlternatives_3_1.eContents().get(2);
		private final Keyword cCommaKeyword_3_1_2_0 = (Keyword)cGroup_3_1_2.eContents().get(0);
		private final Assignment cBooleanValuesAssignment_3_1_2_1 = (Assignment)cGroup_3_1_2.eContents().get(1);
		private final RuleCall cBooleanValuesBOOLEANParserRuleCall_3_1_2_1_0 = (RuleCall)cBooleanValuesAssignment_3_1_2_1.eContents().get(0);
		private final Group cGroup_3_1_3 = (Group)cAlternatives_3_1.eContents().get(3);
		private final Keyword cCommaKeyword_3_1_3_0 = (Keyword)cGroup_3_1_3.eContents().get(0);
		private final Assignment cDatatypeValuesAssignment_3_1_3_1 = (Assignment)cGroup_3_1_3.eContents().get(1);
		private final CrossReference cDatatypeValuesIndividualCrossReference_3_1_3_1_0 = (CrossReference)cDatatypeValuesAssignment_3_1_3_1.eContents().get(0);
		private final RuleCall cDatatypeValuesIndividualQualifiedNameParserRuleCall_3_1_3_1_0_1 = (RuleCall)cDatatypeValuesIndividualCrossReference_3_1_3_1_0.eContents().get(1);
		private final Group cGroup_3_1_4 = (Group)cAlternatives_3_1.eContents().get(4);
		private final Keyword cCommaKeyword_3_1_4_0 = (Keyword)cGroup_3_1_4.eContents().get(0);
		private final Assignment cUnnamedValuesAssignment_3_1_4_1 = (Assignment)cGroup_3_1_4.eContents().get(1);
		private final RuleCall cUnnamedValuesUnnamedIndividualParserRuleCall_3_1_4_1_0 = (RuleCall)cUnnamedValuesAssignment_3_1_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MultipleSimpleAttributeAssignment AttributeAssignment:
		//	attribute=[Attribute|QualifiedName] '='
		//	'{' ((stringValues+=STRING
		//	| numberValues+=NUMBER
		//	| booleanValues+=BOOLEAN
		//	| datatypeValues+=[Individual|QualifiedName] | unnamedValues+=UnnamedIndividual) (',' stringValues+=STRING
		//	| ',' numberValues+=NUMBER
		//	| ',' booleanValues+=BOOLEAN
		//	| ',' datatypeValues+=[Individual|QualifiedName] | ',' unnamedValues+=UnnamedIndividual)*)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//attribute=[Attribute|QualifiedName] '=' '{' ((stringValues+=STRING | numberValues+=NUMBER | booleanValues+=BOOLEAN |
		//datatypeValues+=[Individual|QualifiedName] | unnamedValues+=UnnamedIndividual) (',' stringValues+=STRING | ','
		//numberValues+=NUMBER | ',' booleanValues+=BOOLEAN | ',' datatypeValues+=[Individual|QualifiedName] | ','
		//unnamedValues+=UnnamedIndividual)*) '}'
		public Group getGroup() { return cGroup; }
		
		//attribute=[Attribute|QualifiedName]
		public Assignment getAttributeAssignment_0() { return cAttributeAssignment_0; }
		
		//[Attribute|QualifiedName]
		public CrossReference getAttributeAttributeCrossReference_0_0() { return cAttributeAttributeCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getAttributeAttributeQualifiedNameParserRuleCall_0_0_1() { return cAttributeAttributeQualifiedNameParserRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//((stringValues+=STRING | numberValues+=NUMBER | booleanValues+=BOOLEAN | datatypeValues+=[Individual|QualifiedName] |
		//unnamedValues+=UnnamedIndividual) (',' stringValues+=STRING | ',' numberValues+=NUMBER | ',' booleanValues+=BOOLEAN |
		//',' datatypeValues+=[Individual|QualifiedName] | ',' unnamedValues+=UnnamedIndividual)*)
		public Group getGroup_3() { return cGroup_3; }
		
		//(stringValues+=STRING | numberValues+=NUMBER | booleanValues+=BOOLEAN | datatypeValues+=[Individual|QualifiedName] |
		//unnamedValues+=UnnamedIndividual)
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//stringValues+=STRING
		public Assignment getStringValuesAssignment_3_0_0() { return cStringValuesAssignment_3_0_0; }
		
		//STRING
		public RuleCall getStringValuesSTRINGTerminalRuleCall_3_0_0_0() { return cStringValuesSTRINGTerminalRuleCall_3_0_0_0; }
		
		//numberValues+=NUMBER
		public Assignment getNumberValuesAssignment_3_0_1() { return cNumberValuesAssignment_3_0_1; }
		
		//NUMBER
		public RuleCall getNumberValuesNUMBERParserRuleCall_3_0_1_0() { return cNumberValuesNUMBERParserRuleCall_3_0_1_0; }
		
		//booleanValues+=BOOLEAN
		public Assignment getBooleanValuesAssignment_3_0_2() { return cBooleanValuesAssignment_3_0_2; }
		
		//BOOLEAN
		public RuleCall getBooleanValuesBOOLEANParserRuleCall_3_0_2_0() { return cBooleanValuesBOOLEANParserRuleCall_3_0_2_0; }
		
		//datatypeValues+=[Individual|QualifiedName]
		public Assignment getDatatypeValuesAssignment_3_0_3() { return cDatatypeValuesAssignment_3_0_3; }
		
		//[Individual|QualifiedName]
		public CrossReference getDatatypeValuesIndividualCrossReference_3_0_3_0() { return cDatatypeValuesIndividualCrossReference_3_0_3_0; }
		
		//QualifiedName
		public RuleCall getDatatypeValuesIndividualQualifiedNameParserRuleCall_3_0_3_0_1() { return cDatatypeValuesIndividualQualifiedNameParserRuleCall_3_0_3_0_1; }
		
		//unnamedValues+=UnnamedIndividual
		public Assignment getUnnamedValuesAssignment_3_0_4() { return cUnnamedValuesAssignment_3_0_4; }
		
		//UnnamedIndividual
		public RuleCall getUnnamedValuesUnnamedIndividualParserRuleCall_3_0_4_0() { return cUnnamedValuesUnnamedIndividualParserRuleCall_3_0_4_0; }
		
		//(',' stringValues+=STRING | ',' numberValues+=NUMBER | ',' booleanValues+=BOOLEAN | ','
		//datatypeValues+=[Individual|QualifiedName] | ',' unnamedValues+=UnnamedIndividual)*
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//',' stringValues+=STRING
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }
		
		//','
		public Keyword getCommaKeyword_3_1_0_0() { return cCommaKeyword_3_1_0_0; }
		
		//stringValues+=STRING
		public Assignment getStringValuesAssignment_3_1_0_1() { return cStringValuesAssignment_3_1_0_1; }
		
		//STRING
		public RuleCall getStringValuesSTRINGTerminalRuleCall_3_1_0_1_0() { return cStringValuesSTRINGTerminalRuleCall_3_1_0_1_0; }
		
		//',' numberValues+=NUMBER
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }
		
		//numberValues+=NUMBER
		public Assignment getNumberValuesAssignment_3_1_1_1() { return cNumberValuesAssignment_3_1_1_1; }
		
		//NUMBER
		public RuleCall getNumberValuesNUMBERParserRuleCall_3_1_1_1_0() { return cNumberValuesNUMBERParserRuleCall_3_1_1_1_0; }
		
		//',' booleanValues+=BOOLEAN
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }
		
		//','
		public Keyword getCommaKeyword_3_1_2_0() { return cCommaKeyword_3_1_2_0; }
		
		//booleanValues+=BOOLEAN
		public Assignment getBooleanValuesAssignment_3_1_2_1() { return cBooleanValuesAssignment_3_1_2_1; }
		
		//BOOLEAN
		public RuleCall getBooleanValuesBOOLEANParserRuleCall_3_1_2_1_0() { return cBooleanValuesBOOLEANParserRuleCall_3_1_2_1_0; }
		
		//',' datatypeValues+=[Individual|QualifiedName]
		public Group getGroup_3_1_3() { return cGroup_3_1_3; }
		
		//','
		public Keyword getCommaKeyword_3_1_3_0() { return cCommaKeyword_3_1_3_0; }
		
		//datatypeValues+=[Individual|QualifiedName]
		public Assignment getDatatypeValuesAssignment_3_1_3_1() { return cDatatypeValuesAssignment_3_1_3_1; }
		
		//[Individual|QualifiedName]
		public CrossReference getDatatypeValuesIndividualCrossReference_3_1_3_1_0() { return cDatatypeValuesIndividualCrossReference_3_1_3_1_0; }
		
		//QualifiedName
		public RuleCall getDatatypeValuesIndividualQualifiedNameParserRuleCall_3_1_3_1_0_1() { return cDatatypeValuesIndividualQualifiedNameParserRuleCall_3_1_3_1_0_1; }
		
		//',' unnamedValues+=UnnamedIndividual
		public Group getGroup_3_1_4() { return cGroup_3_1_4; }
		
		//','
		public Keyword getCommaKeyword_3_1_4_0() { return cCommaKeyword_3_1_4_0; }
		
		//unnamedValues+=UnnamedIndividual
		public Assignment getUnnamedValuesAssignment_3_1_4_1() { return cUnnamedValuesAssignment_3_1_4_1; }
		
		//UnnamedIndividual
		public RuleCall getUnnamedValuesUnnamedIndividualParserRuleCall_3_1_4_1_0() { return cUnnamedValuesUnnamedIndividualParserRuleCall_3_1_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ConstraintDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.ConstraintDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInvariantConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDerivationConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConstraintDeclaration Constraint:
		//	InvariantConstraint | DerivationConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		//InvariantConstraint | DerivationConstraint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InvariantConstraint
		public RuleCall getInvariantConstraintParserRuleCall_0() { return cInvariantConstraintParserRuleCall_0; }
		
		//DerivationConstraint
		public RuleCall getDerivationConstraintParserRuleCall_1() { return cDerivationConstraintParserRuleCall_1; }
	}
	public class InvariantConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.InvariantConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassContextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClassContextClassCrossReference_1_0 = (CrossReference)cClassContextAssignment_1.eContents().get(0);
		private final RuleCall cClassContextClassIDTerminalRuleCall_1_0_1 = (RuleCall)cClassContextClassCrossReference_1_0.eContents().get(1);
		private final Keyword cInvKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInvariantAliasAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInvariantAliasIDTerminalRuleCall_3_0 = (RuleCall)cInvariantAliasAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionOclExpressionParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		
		//InvariantConstraint:
		//	'context' classContext=[Class]
		//	'inv' invariantAlias=ID? ':' expression=OclExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'context' classContext=[Class] 'inv' invariantAlias=ID? ':' expression=OclExpression
		public Group getGroup() { return cGroup; }
		
		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//classContext=[Class]
		public Assignment getClassContextAssignment_1() { return cClassContextAssignment_1; }
		
		//[Class]
		public CrossReference getClassContextClassCrossReference_1_0() { return cClassContextClassCrossReference_1_0; }
		
		//ID
		public RuleCall getClassContextClassIDTerminalRuleCall_1_0_1() { return cClassContextClassIDTerminalRuleCall_1_0_1; }
		
		//'inv'
		public Keyword getInvKeyword_2() { return cInvKeyword_2; }
		
		//invariantAlias=ID?
		public Assignment getInvariantAliasAssignment_3() { return cInvariantAliasAssignment_3; }
		
		//ID
		public RuleCall getInvariantAliasIDTerminalRuleCall_3_0() { return cInvariantAliasIDTerminalRuleCall_3_0; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//expression=OclExpression
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }
		
		//OclExpression
		public RuleCall getExpressionOclExpressionParserRuleCall_5_0() { return cExpressionOclExpressionParserRuleCall_5_0; }
	}
	public class DerivationConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.DerivationConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassContextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClassContextClassCrossReference_1_0 = (CrossReference)cClassContextAssignment_1.eContents().get(0);
		private final RuleCall cClassContextClassIDTerminalRuleCall_1_0_1 = (RuleCall)cClassContextClassCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFeatureContextAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFeatureContextIDTerminalRuleCall_2_1_0 = (RuleCall)cFeatureContextAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cContextTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContextTypeTypeLiteralExpressionParserRuleCall_4_0 = (RuleCall)cContextTypeAssignment_4.eContents().get(0);
		private final Keyword cDeriveKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cExpressionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExpressionOclExpressionParserRuleCall_7_0 = (RuleCall)cExpressionAssignment_7.eContents().get(0);
		
		//DerivationConstraint:
		//	'context' classContext=[Class] ('::' featureContext+=ID)+ ':' contextType=TypeLiteralExpression
		//	'derive' ':' expression=OclExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'context' classContext=[Class] ('::' featureContext+=ID)+ ':' contextType=TypeLiteralExpression 'derive' ':'
		//expression=OclExpression
		public Group getGroup() { return cGroup; }
		
		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//classContext=[Class]
		public Assignment getClassContextAssignment_1() { return cClassContextAssignment_1; }
		
		//[Class]
		public CrossReference getClassContextClassCrossReference_1_0() { return cClassContextClassCrossReference_1_0; }
		
		//ID
		public RuleCall getClassContextClassIDTerminalRuleCall_1_0_1() { return cClassContextClassIDTerminalRuleCall_1_0_1; }
		
		//('::' featureContext+=ID)+
		public Group getGroup_2() { return cGroup_2; }
		
		//'::'
		public Keyword getColonColonKeyword_2_0() { return cColonColonKeyword_2_0; }
		
		//featureContext+=ID
		public Assignment getFeatureContextAssignment_2_1() { return cFeatureContextAssignment_2_1; }
		
		//ID
		public RuleCall getFeatureContextIDTerminalRuleCall_2_1_0() { return cFeatureContextIDTerminalRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//contextType=TypeLiteralExpression
		public Assignment getContextTypeAssignment_4() { return cContextTypeAssignment_4; }
		
		//TypeLiteralExpression
		public RuleCall getContextTypeTypeLiteralExpressionParserRuleCall_4_0() { return cContextTypeTypeLiteralExpressionParserRuleCall_4_0; }
		
		//'derive'
		public Keyword getDeriveKeyword_5() { return cDeriveKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//expression=OclExpression
		public Assignment getExpressionAssignment_7() { return cExpressionAssignment_7; }
		
		//OclExpression
		public RuleCall getExpressionOclExpressionParserRuleCall_7_0() { return cExpressionOclExpressionParserRuleCall_7_0; }
	}
	public class OclExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.OclExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLetExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImpliesExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OclExpression:
		//	LetExpression | IfExpression | ImpliesExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//LetExpression | IfExpression | ImpliesExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LetExpression
		public RuleCall getLetExpressionParserRuleCall_0() { return cLetExpressionParserRuleCall_0; }
		
		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_1() { return cIfExpressionParserRuleCall_1; }
		
		//ImpliesExpression
		public RuleCall getImpliesExpressionParserRuleCall_2() { return cImpliesExpressionParserRuleCall_2; }
	}
	public class LetExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.LetExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInExpressionOclExpressionParserRuleCall_4_0 = (RuleCall)cInExpressionAssignment_4.eContents().get(0);
		
		//LetExpression:
		//	'let' variables+=VariableDeclaration (',' variables+=VariableDeclaration)*
		//	'in' inExpression=OclExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'let' variables+=VariableDeclaration (',' variables+=VariableDeclaration)* 'in' inExpression=OclExpression
		public Group getGroup() { return cGroup; }
		
		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//variables+=VariableDeclaration
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }
		
		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_1_0() { return cVariablesVariableDeclarationParserRuleCall_1_0; }
		
		//(',' variables+=VariableDeclaration)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//variables+=VariableDeclaration
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }
		
		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_2_1_0() { return cVariablesVariableDeclarationParserRuleCall_2_1_0; }
		
		//'in'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//inExpression=OclExpression
		public Assignment getInExpressionAssignment_4() { return cInExpressionAssignment_4; }
		
		//OclExpression
		public RuleCall getInExpressionOclExpressionParserRuleCall_4_0() { return cInExpressionOclExpressionParserRuleCall_4_0; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableNameIDTerminalRuleCall_0_0 = (RuleCall)cVariableNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableTypeTypeLiteralExpressionParserRuleCall_2_0 = (RuleCall)cVariableTypeAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInitialValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInitialValueImpliesExpressionParserRuleCall_4_0 = (RuleCall)cInitialValueAssignment_4.eContents().get(0);
		
		//VariableDeclaration:
		//	variableName=ID ':' variableType=TypeLiteralExpression '=' initialValue=ImpliesExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//variableName=ID ':' variableType=TypeLiteralExpression '=' initialValue=ImpliesExpression
		public Group getGroup() { return cGroup; }
		
		//variableName=ID
		public Assignment getVariableNameAssignment_0() { return cVariableNameAssignment_0; }
		
		//ID
		public RuleCall getVariableNameIDTerminalRuleCall_0_0() { return cVariableNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//variableType=TypeLiteralExpression
		public Assignment getVariableTypeAssignment_2() { return cVariableTypeAssignment_2; }
		
		//TypeLiteralExpression
		public RuleCall getVariableTypeTypeLiteralExpressionParserRuleCall_2_0() { return cVariableTypeTypeLiteralExpressionParserRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//initialValue=ImpliesExpression
		public Assignment getInitialValueAssignment_4() { return cInitialValueAssignment_4; }
		
		//ImpliesExpression
		public RuleCall getInitialValueImpliesExpressionParserRuleCall_4_0() { return cInitialValueImpliesExpressionParserRuleCall_4_0; }
	}
	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionOclExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExpressionOclExpressionParserRuleCall_3_0 = (RuleCall)cThenExpressionAssignment_3.eContents().get(0);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElseExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseExpressionOclExpressionParserRuleCall_5_0 = (RuleCall)cElseExpressionAssignment_5.eContents().get(0);
		private final Keyword cEndifKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfExpression:
		//	'if' condition=OclExpression 'then'
		//	thenExpression=OclExpression
		//	'else'
		//	elseExpression=OclExpression
		//	'endif';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=OclExpression 'then' thenExpression=OclExpression 'else' elseExpression=OclExpression 'endif'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=OclExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//OclExpression
		public RuleCall getConditionOclExpressionParserRuleCall_1_0() { return cConditionOclExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//thenExpression=OclExpression
		public Assignment getThenExpressionAssignment_3() { return cThenExpressionAssignment_3; }
		
		//OclExpression
		public RuleCall getThenExpressionOclExpressionParserRuleCall_3_0() { return cThenExpressionOclExpressionParserRuleCall_3_0; }
		
		//'else'
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }
		
		//elseExpression=OclExpression
		public Assignment getElseExpressionAssignment_5() { return cElseExpressionAssignment_5; }
		
		//OclExpression
		public RuleCall getElseExpressionOclExpressionParserRuleCall_5_0() { return cElseExpressionOclExpressionParserRuleCall_5_0; }
		
		//'endif'
		public Keyword getEndifKeyword_6() { return cEndifKeyword_6; }
	}
	public class ImpliesExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.ImpliesExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftXorExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cImpliesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightXorExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ImpliesExpression:
		//	left=XorExpression ('implies' right+=XorExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//left=XorExpression ('implies' right+=XorExpression)*
		public Group getGroup() { return cGroup; }
		
		//left=XorExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//XorExpression
		public RuleCall getLeftXorExpressionParserRuleCall_0_0() { return cLeftXorExpressionParserRuleCall_0_0; }
		
		//('implies' right+=XorExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'implies'
		public Keyword getImpliesKeyword_1_0() { return cImpliesKeyword_1_0; }
		
		//right+=XorExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//XorExpression
		public RuleCall getRightXorExpressionParserRuleCall_1_1_0() { return cRightXorExpressionParserRuleCall_1_1_0; }
	}
	public class XorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.XorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOrExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cXorKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOrExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//XorExpression:
		//	left=OrExpression ('xor' right+=OrExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//left=OrExpression ('xor' right+=OrExpression)*
		public Group getGroup() { return cGroup; }
		
		//left=OrExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//OrExpression
		public RuleCall getLeftOrExpressionParserRuleCall_0_0() { return cLeftOrExpressionParserRuleCall_0_0; }
		
		//('xor' right+=OrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'xor'
		public Keyword getXorKeyword_1_0() { return cXorKeyword_1_0; }
		
		//right+=OrExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//OrExpression
		public RuleCall getRightOrExpressionParserRuleCall_1_1_0() { return cRightOrExpressionParserRuleCall_1_1_0; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftAndExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//OrExpression:
		//	left=AndExpression ('or' right+=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//left=AndExpression ('or' right+=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//left=AndExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//AndExpression
		public RuleCall getLeftAndExpressionParserRuleCall_0_0() { return cLeftAndExpressionParserRuleCall_0_0; }
		
		//('or' right+=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'or'
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }
		
		//right+=AndExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_1_0() { return cRightAndExpressionParserRuleCall_1_1_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftComparisonExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightComparisonExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndExpression:
		//	left=ComparisonExpression ('and' right+=ComparisonExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//left=ComparisonExpression ('and' right+=ComparisonExpression)*
		public Group getGroup() { return cGroup; }
		
		//left=ComparisonExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//ComparisonExpression
		public RuleCall getLeftComparisonExpressionParserRuleCall_0_0() { return cLeftComparisonExpressionParserRuleCall_0_0; }
		
		//('and' right+=ComparisonExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'and'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//right+=ComparisonExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//ComparisonExpression
		public RuleCall getRightComparisonExpressionParserRuleCall_1_1_0() { return cRightComparisonExpressionParserRuleCall_1_1_0; }
	}
	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.ComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftRelationalExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightComparisonOperationParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//ComparisonExpression:
		//	left=RelationalExpression right+=ComparisonOperation*;
		@Override public ParserRule getRule() { return rule; }
		
		//left=RelationalExpression right+=ComparisonOperation*
		public Group getGroup() { return cGroup; }
		
		//left=RelationalExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//RelationalExpression
		public RuleCall getLeftRelationalExpressionParserRuleCall_0_0() { return cLeftRelationalExpressionParserRuleCall_0_0; }
		
		//right+=ComparisonOperation*
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//ComparisonOperation
		public RuleCall getRightComparisonOperationParserRuleCall_1_0() { return cRightComparisonOperationParserRuleCall_1_0; }
	}
	public class ComparisonOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.ComparisonOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorComparisonOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightRelationalExpressionParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//ComparisonOperation:
		//	operator=ComparisonOperator right=RelationalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//operator=ComparisonOperator right=RelationalExpression
		public Group getGroup() { return cGroup; }
		
		//operator=ComparisonOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//ComparisonOperator
		public RuleCall getOperatorComparisonOperatorEnumRuleCall_0_0() { return cOperatorComparisonOperatorEnumRuleCall_0_0; }
		
		//right=RelationalExpression
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//RelationalExpression
		public RuleCall getRightRelationalExpressionParserRuleCall_1_0() { return cRightRelationalExpressionParserRuleCall_1_0; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftAdditionExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightRelationalOperationParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//RelationalExpression:
		//	left=AdditionExpression right+=RelationalOperation*;
		@Override public ParserRule getRule() { return rule; }
		
		//left=AdditionExpression right+=RelationalOperation*
		public Group getGroup() { return cGroup; }
		
		//left=AdditionExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//AdditionExpression
		public RuleCall getLeftAdditionExpressionParserRuleCall_0_0() { return cLeftAdditionExpressionParserRuleCall_0_0; }
		
		//right+=RelationalOperation*
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//RelationalOperation
		public RuleCall getRightRelationalOperationParserRuleCall_1_0() { return cRightRelationalOperationParserRuleCall_1_0; }
	}
	public class RelationalOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.RelationalOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorRelationalOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightAdditionExpressionParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//RelationalOperation:
		//	operator=RelationalOperator right=AdditionExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//operator=RelationalOperator right=AdditionExpression
		public Group getGroup() { return cGroup; }
		
		//operator=RelationalOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorEnumRuleCall_0_0() { return cOperatorRelationalOperatorEnumRuleCall_0_0; }
		
		//right=AdditionExpression
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//AdditionExpression
		public RuleCall getRightAdditionExpressionParserRuleCall_1_0() { return cRightAdditionExpressionParserRuleCall_1_0; }
	}
	public class AdditionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.AdditionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftMultiplicationExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightAdditionOperationParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//AdditionExpression:
		//	left=MultiplicationExpression right+=AdditionOperation*;
		@Override public ParserRule getRule() { return rule; }
		
		//left=MultiplicationExpression right+=AdditionOperation*
		public Group getGroup() { return cGroup; }
		
		//left=MultiplicationExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//MultiplicationExpression
		public RuleCall getLeftMultiplicationExpressionParserRuleCall_0_0() { return cLeftMultiplicationExpressionParserRuleCall_0_0; }
		
		//right+=AdditionOperation*
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//AdditionOperation
		public RuleCall getRightAdditionOperationParserRuleCall_1_0() { return cRightAdditionOperationParserRuleCall_1_0; }
	}
	public class AdditionOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.AdditionOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorAdditionOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightMultiplicationExpressionParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//AdditionOperation:
		//	operator=AdditionOperator right=MultiplicationExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//operator=AdditionOperator right=MultiplicationExpression
		public Group getGroup() { return cGroup; }
		
		//operator=AdditionOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//AdditionOperator
		public RuleCall getOperatorAdditionOperatorEnumRuleCall_0_0() { return cOperatorAdditionOperatorEnumRuleCall_0_0; }
		
		//right=MultiplicationExpression
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//MultiplicationExpression
		public RuleCall getRightMultiplicationExpressionParserRuleCall_1_0() { return cRightMultiplicationExpressionParserRuleCall_1_0; }
	}
	public class MultiplicationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.MultiplicationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftUnaryExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightMultiplicationOperationParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//MultiplicationExpression:
		//	left=UnaryExpression right+=MultiplicationOperation*;
		@Override public ParserRule getRule() { return rule; }
		
		//left=UnaryExpression right+=MultiplicationOperation*
		public Group getGroup() { return cGroup; }
		
		//left=UnaryExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//UnaryExpression
		public RuleCall getLeftUnaryExpressionParserRuleCall_0_0() { return cLeftUnaryExpressionParserRuleCall_0_0; }
		
		//right+=MultiplicationOperation*
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//MultiplicationOperation
		public RuleCall getRightMultiplicationOperationParserRuleCall_1_0() { return cRightMultiplicationOperationParserRuleCall_1_0; }
	}
	public class MultiplicationOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.MultiplicationOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorMultiplicationOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightUnaryExpressionParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//MultiplicationOperation:
		//	operator=MultiplicationOperator right=UnaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//operator=MultiplicationOperator right=UnaryExpression
		public Group getGroup() { return cGroup; }
		
		//operator=MultiplicationOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//MultiplicationOperator
		public RuleCall getOperatorMultiplicationOperatorEnumRuleCall_0_0() { return cOperatorMultiplicationOperatorEnumRuleCall_0_0; }
		
		//right=UnaryExpression
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//UnaryExpression
		public RuleCall getRightUnaryExpressionParserRuleCall_1_0() { return cRightUnaryExpressionParserRuleCall_1_0; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.UnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorUnaryOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightTermExpressionParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//UnaryExpression:
		//	operator=UnaryOperator? right=TermExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//operator=UnaryOperator? right=TermExpression
		public Group getGroup() { return cGroup; }
		
		//operator=UnaryOperator?
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//UnaryOperator
		public RuleCall getOperatorUnaryOperatorEnumRuleCall_0_0() { return cOperatorUnaryOperatorEnumRuleCall_0_0; }
		
		//right=TermExpression
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//TermExpression
		public RuleCall getRightTermExpressionParserRuleCall_1_0() { return cRightTermExpressionParserRuleCall_1_0; }
	}
	public class TermExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.TermExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCallExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cOclExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//TermExpression:
		//	=> CallExpression | LiteralExpression | '(' OclExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//=> CallExpression | LiteralExpression | '(' OclExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> CallExpression
		public RuleCall getCallExpressionParserRuleCall_0() { return cCallExpressionParserRuleCall_0; }
		
		//LiteralExpression
		public RuleCall getLiteralExpressionParserRuleCall_1() { return cLiteralExpressionParserRuleCall_1; }
		
		//'(' OclExpression ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//OclExpression
		public RuleCall getOclExpressionParserRuleCall_2_1() { return cOclExpressionParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class CallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.CallExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftNavigationSourceParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightCallOperationParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//CallExpression:
		//	left=NavigationSource right+=CallOperation*;
		@Override public ParserRule getRule() { return rule; }
		
		//left=NavigationSource right+=CallOperation*
		public Group getGroup() { return cGroup; }
		
		//left=NavigationSource
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//NavigationSource
		public RuleCall getLeftNavigationSourceParserRuleCall_0_0() { return cLeftNavigationSourceParserRuleCall_0_0; }
		
		//right+=CallOperation*
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//CallOperation
		public RuleCall getRightCallOperationParserRuleCall_1_0() { return cRightCallOperationParserRuleCall_1_0; }
	}
	public class NavigationSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.NavigationSource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cSourceAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSourceTypeLiteralExpressionParserRuleCall_0_0_0 = (RuleCall)cSourceAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cAllInstancesKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cSourceAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSourceVariableExpressionParserRuleCall_1_0 = (RuleCall)cSourceAssignment_1.eContents().get(0);
		
		//NavigationSource:
		//	source=TypeLiteralExpression '.' 'allInstances' '(' ')' | source=VariableExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//source=TypeLiteralExpression '.' 'allInstances' '(' ')' | source=VariableExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//source=TypeLiteralExpression '.' 'allInstances' '(' ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//source=TypeLiteralExpression
		public Assignment getSourceAssignment_0_0() { return cSourceAssignment_0_0; }
		
		//TypeLiteralExpression
		public RuleCall getSourceTypeLiteralExpressionParserRuleCall_0_0_0() { return cSourceTypeLiteralExpressionParserRuleCall_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//'allInstances'
		public Keyword getAllInstancesKeyword_0_2() { return cAllInstancesKeyword_0_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_3() { return cLeftParenthesisKeyword_0_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//source=VariableExpression
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//VariableExpression
		public RuleCall getSourceVariableExpressionParserRuleCall_1_0() { return cSourceVariableExpressionParserRuleCall_1_0; }
	}
	public class CallOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.CallOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cDotOperationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cArrowOperationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//CallOperation:
		//	'.' DotOperation | '->' ArrowOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' DotOperation | '->' ArrowOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'.' DotOperation
		public Group getGroup_0() { return cGroup_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//DotOperation
		public RuleCall getDotOperationParserRuleCall_0_1() { return cDotOperationParserRuleCall_0_1; }
		
		//'->' ArrowOperation
		public Group getGroup_1() { return cGroup_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0() { return cHyphenMinusGreaterThanSignKeyword_1_0; }
		
		//ArrowOperation
		public RuleCall getArrowOperationParserRuleCall_1_1() { return cArrowOperationParserRuleCall_1_1; }
	}
	public class DotOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.DotOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryNumberOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBinaryNumberOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//DotOperation:
		//	UnaryNumberOperation | BinaryNumberOperation | TypeOperation | VariableExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryNumberOperation | BinaryNumberOperation | TypeOperation | VariableExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnaryNumberOperation
		public RuleCall getUnaryNumberOperationParserRuleCall_0() { return cUnaryNumberOperationParserRuleCall_0; }
		
		//BinaryNumberOperation
		public RuleCall getBinaryNumberOperationParserRuleCall_1() { return cBinaryNumberOperationParserRuleCall_1; }
		
		//TypeOperation
		public RuleCall getTypeOperationParserRuleCall_2() { return cTypeOperationParserRuleCall_2; }
		
		//VariableExpression
		public RuleCall getVariableExpressionParserRuleCall_3() { return cVariableExpressionParserRuleCall_3; }
	}
	public class UnaryNumberOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.UnaryNumberOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorUnaryNumberOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//UnaryNumberOperation:
		//	operator=UnaryNumberOperator '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//operator=UnaryNumberOperator '(' ')'
		public Group getGroup() { return cGroup; }
		
		//operator=UnaryNumberOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//UnaryNumberOperator
		public RuleCall getOperatorUnaryNumberOperatorEnumRuleCall_0_0() { return cOperatorUnaryNumberOperatorEnumRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class BinaryNumberOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.BinaryNumberOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorBinaryNumberOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentOclExpressionParserRuleCall_2_0 = (RuleCall)cArgumentAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BinaryNumberOperation:
		//	operator=BinaryNumberOperator '(' argument=OclExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//operator=BinaryNumberOperator '(' argument=OclExpression ')'
		public Group getGroup() { return cGroup; }
		
		//operator=BinaryNumberOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//BinaryNumberOperator
		public RuleCall getOperatorBinaryNumberOperatorEnumRuleCall_0_0() { return cOperatorBinaryNumberOperatorEnumRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//argument=OclExpression
		public Assignment getArgumentAssignment_2() { return cArgumentAssignment_2; }
		
		//OclExpression
		public RuleCall getArgumentOclExpressionParserRuleCall_2_0() { return cArgumentOclExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ArrowOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.ArrowOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnarySetOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBinarySetOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnaryIterationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMultiaryIterationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTypeOperationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ArrowOperation:
		//	UnarySetOperation | BinarySetOperation | UnaryIteration | MultiaryIteration | TypeOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//UnarySetOperation | BinarySetOperation | UnaryIteration | MultiaryIteration | TypeOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnarySetOperation
		public RuleCall getUnarySetOperationParserRuleCall_0() { return cUnarySetOperationParserRuleCall_0; }
		
		//BinarySetOperation
		public RuleCall getBinarySetOperationParserRuleCall_1() { return cBinarySetOperationParserRuleCall_1; }
		
		//UnaryIteration
		public RuleCall getUnaryIterationParserRuleCall_2() { return cUnaryIterationParserRuleCall_2; }
		
		//MultiaryIteration
		public RuleCall getMultiaryIterationParserRuleCall_3() { return cMultiaryIterationParserRuleCall_3; }
		
		//TypeOperation
		public RuleCall getTypeOperationParserRuleCall_4() { return cTypeOperationParserRuleCall_4; }
	}
	public class UnarySetOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.UnarySetOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorUnarySetOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//UnarySetOperation:
		//	operator=UnarySetOperator '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//operator=UnarySetOperator '(' ')'
		public Group getGroup() { return cGroup; }
		
		//operator=UnarySetOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//UnarySetOperator
		public RuleCall getOperatorUnarySetOperatorEnumRuleCall_0_0() { return cOperatorUnarySetOperatorEnumRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class BinarySetOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.BinarySetOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorBinarySetOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentOclExpressionParserRuleCall_2_0 = (RuleCall)cArgumentAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BinarySetOperation:
		//	operator=BinarySetOperator '(' argument=OclExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//operator=BinarySetOperator '(' argument=OclExpression ')'
		public Group getGroup() { return cGroup; }
		
		//operator=BinarySetOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//BinarySetOperator
		public RuleCall getOperatorBinarySetOperatorEnumRuleCall_0_0() { return cOperatorBinarySetOperatorEnumRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//argument=OclExpression
		public Assignment getArgumentAssignment_2() { return cArgumentAssignment_2; }
		
		//OclExpression
		public RuleCall getArgumentOclExpressionParserRuleCall_2_0() { return cArgumentOclExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class UnaryIterationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.UnaryIteration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIteratorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIteratorUnaryIteratorEnumRuleCall_0_0 = (RuleCall)cIteratorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVariableIDTerminalRuleCall_2_0_0 = (RuleCall)cVariableAssignment_2_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyOclExpressionParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UnaryIteration:
		//	iterator=UnaryIterator '(' (variable=ID '|')? body=OclExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//iterator=UnaryIterator '(' (variable=ID '|')? body=OclExpression ')'
		public Group getGroup() { return cGroup; }
		
		//iterator=UnaryIterator
		public Assignment getIteratorAssignment_0() { return cIteratorAssignment_0; }
		
		//UnaryIterator
		public RuleCall getIteratorUnaryIteratorEnumRuleCall_0_0() { return cIteratorUnaryIteratorEnumRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(variable=ID '|')?
		public Group getGroup_2() { return cGroup_2; }
		
		//variable=ID
		public Assignment getVariableAssignment_2_0() { return cVariableAssignment_2_0; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_2_0_0() { return cVariableIDTerminalRuleCall_2_0_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_2_1() { return cVerticalLineKeyword_2_1; }
		
		//body=OclExpression
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//OclExpression
		public RuleCall getBodyOclExpressionParserRuleCall_3_0() { return cBodyOclExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class MultiaryIterationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.MultiaryIteration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIteratorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIteratorMultiaryIteratorEnumRuleCall_0_0 = (RuleCall)cIteratorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVariablesIDTerminalRuleCall_2_0_0 = (RuleCall)cVariablesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cVariablesIDTerminalRuleCall_2_1_1_0 = (RuleCall)cVariablesAssignment_2_1_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyOclExpressionParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MultiaryIteration:
		//	iterator=MultiaryIterator '(' (variables+=ID (',' variables+=ID)+ '|')? body=OclExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//iterator=MultiaryIterator '(' (variables+=ID (',' variables+=ID)+ '|')? body=OclExpression ')'
		public Group getGroup() { return cGroup; }
		
		//iterator=MultiaryIterator
		public Assignment getIteratorAssignment_0() { return cIteratorAssignment_0; }
		
		//MultiaryIterator
		public RuleCall getIteratorMultiaryIteratorEnumRuleCall_0_0() { return cIteratorMultiaryIteratorEnumRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(variables+=ID (',' variables+=ID)+ '|')?
		public Group getGroup_2() { return cGroup_2; }
		
		//variables+=ID
		public Assignment getVariablesAssignment_2_0() { return cVariablesAssignment_2_0; }
		
		//ID
		public RuleCall getVariablesIDTerminalRuleCall_2_0_0() { return cVariablesIDTerminalRuleCall_2_0_0; }
		
		//(',' variables+=ID)+
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//variables+=ID
		public Assignment getVariablesAssignment_2_1_1() { return cVariablesAssignment_2_1_1; }
		
		//ID
		public RuleCall getVariablesIDTerminalRuleCall_2_1_1_0() { return cVariablesIDTerminalRuleCall_2_1_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_2_2() { return cVerticalLineKeyword_2_2; }
		
		//body=OclExpression
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//OclExpression
		public RuleCall getBodyOclExpressionParserRuleCall_3_0() { return cBodyOclExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class TypeOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.TypeOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorTypeOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cReferredTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cReferredTypeTypeLiteralExpressionParserRuleCall_2_0_0 = (RuleCall)cReferredTypeAssignment_2_0.eContents().get(0);
		private final Keyword cSelfKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TypeOperation:
		//	operator=TypeOperator '(' (referredType=TypeLiteralExpression | 'self') ')';
		@Override public ParserRule getRule() { return rule; }
		
		//operator=TypeOperator '(' (referredType=TypeLiteralExpression | 'self') ')'
		public Group getGroup() { return cGroup; }
		
		//operator=TypeOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//TypeOperator
		public RuleCall getOperatorTypeOperatorEnumRuleCall_0_0() { return cOperatorTypeOperatorEnumRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(referredType=TypeLiteralExpression | 'self')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//referredType=TypeLiteralExpression
		public Assignment getReferredTypeAssignment_2_0() { return cReferredTypeAssignment_2_0; }
		
		//TypeLiteralExpression
		public RuleCall getReferredTypeTypeLiteralExpressionParserRuleCall_2_0_0() { return cReferredTypeTypeLiteralExpressionParserRuleCall_2_0_0; }
		
		//'self'
		public Keyword getSelfKeyword_2_1() { return cSelfKeyword_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.LiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveLiteralExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSetLiteralExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeLiteralExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LiteralExpression:
		//	PrimitiveLiteralExpression | SetLiteralExpression | TypeLiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveLiteralExpression | SetLiteralExpression | TypeLiteralExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveLiteralExpression
		public RuleCall getPrimitiveLiteralExpressionParserRuleCall_0() { return cPrimitiveLiteralExpressionParserRuleCall_0; }
		
		//SetLiteralExpression
		public RuleCall getSetLiteralExpressionParserRuleCall_1() { return cSetLiteralExpressionParserRuleCall_1; }
		
		//TypeLiteralExpression
		public RuleCall getTypeLiteralExpressionParserRuleCall_2() { return cTypeLiteralExpressionParserRuleCall_2; }
	}
	public class PrimitiveLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.PrimitiveLiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanLiteralExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberLiteralExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLiteralExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNullLiteralExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrimitiveLiteralExpression:
		//	BooleanLiteralExpression | NumberLiteralExpression | StringLiteralExpression | NullLiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanLiteralExpression | NumberLiteralExpression | StringLiteralExpression | NullLiteralExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanLiteralExpression
		public RuleCall getBooleanLiteralExpressionParserRuleCall_0() { return cBooleanLiteralExpressionParserRuleCall_0; }
		
		//NumberLiteralExpression
		public RuleCall getNumberLiteralExpressionParserRuleCall_1() { return cNumberLiteralExpressionParserRuleCall_1; }
		
		//StringLiteralExpression
		public RuleCall getStringLiteralExpressionParserRuleCall_2() { return cStringLiteralExpressionParserRuleCall_2; }
		
		//NullLiteralExpression
		public RuleCall getNullLiteralExpressionParserRuleCall_3() { return cNullLiteralExpressionParserRuleCall_3; }
	}
	public class BooleanLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.BooleanLiteralExpression");
		private final Assignment cBooleanSymbolAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBooleanSymbolBOOLEAN_LITERALParserRuleCall_0 = (RuleCall)cBooleanSymbolAssignment.eContents().get(0);
		
		//BooleanLiteralExpression:
		//	booleanSymbol=BOOLEAN_LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		//booleanSymbol=BOOLEAN_LITERAL
		public Assignment getBooleanSymbolAssignment() { return cBooleanSymbolAssignment; }
		
		//BOOLEAN_LITERAL
		public RuleCall getBooleanSymbolBOOLEAN_LITERALParserRuleCall_0() { return cBooleanSymbolBOOLEAN_LITERALParserRuleCall_0; }
	}
	public class NumberLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.NumberLiteralExpression");
		private final Assignment cNumberSymbolAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNumberSymbolNUMBER_LITERALParserRuleCall_0 = (RuleCall)cNumberSymbolAssignment.eContents().get(0);
		
		//NumberLiteralExpression:
		//	numberSymbol=NUMBER_LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		//numberSymbol=NUMBER_LITERAL
		public Assignment getNumberSymbolAssignment() { return cNumberSymbolAssignment; }
		
		//NUMBER_LITERAL
		public RuleCall getNumberSymbolNUMBER_LITERALParserRuleCall_0() { return cNumberSymbolNUMBER_LITERALParserRuleCall_0; }
	}
	public class StringLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.StringLiteralExpression");
		private final Assignment cStringSymbolAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStringSymbolSTRINGTerminalRuleCall_0 = (RuleCall)cStringSymbolAssignment.eContents().get(0);
		
		//StringLiteralExpression:
		//	stringSymbol=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//stringSymbol=STRING
		public Assignment getStringSymbolAssignment() { return cStringSymbolAssignment; }
		
		//STRING
		public RuleCall getStringSymbolSTRINGTerminalRuleCall_0() { return cStringSymbolSTRINGTerminalRuleCall_0; }
	}
	public class NullLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.NullLiteralExpression");
		private final Assignment cNullSymbolAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNullSymbolNullKeyword_0 = (Keyword)cNullSymbolAssignment.eContents().get(0);
		
		//NullLiteralExpression:
		//	nullSymbol='null';
		@Override public ParserRule getRule() { return rule; }
		
		//nullSymbol='null'
		public Assignment getNullSymbolAssignment() { return cNullSymbolAssignment; }
		
		//'null'
		public Keyword getNullSymbolNullKeyword_0() { return cNullSymbolNullKeyword_0; }
	}
	public class SetLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.SetLiteralExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetLiteralExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cPartsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cPartsPrimitiveLiteralExpressionParserRuleCall_3_0_0 = (RuleCall)cPartsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cPartsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cPartsPrimitiveLiteralExpressionParserRuleCall_3_1_1_0 = (RuleCall)cPartsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SetLiteralExpression:
		//	{SetLiteralExpression} 'Set' '{' (parts+=PrimitiveLiteralExpression (',' parts+=PrimitiveLiteralExpression)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SetLiteralExpression} 'Set' '{' (parts+=PrimitiveLiteralExpression (',' parts+=PrimitiveLiteralExpression)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{SetLiteralExpression}
		public Action getSetLiteralExpressionAction_0() { return cSetLiteralExpressionAction_0; }
		
		//'Set'
		public Keyword getSetKeyword_1() { return cSetKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(parts+=PrimitiveLiteralExpression (',' parts+=PrimitiveLiteralExpression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parts+=PrimitiveLiteralExpression
		public Assignment getPartsAssignment_3_0() { return cPartsAssignment_3_0; }
		
		//PrimitiveLiteralExpression
		public RuleCall getPartsPrimitiveLiteralExpressionParserRuleCall_3_0_0() { return cPartsPrimitiveLiteralExpressionParserRuleCall_3_0_0; }
		
		//(',' parts+=PrimitiveLiteralExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parts+=PrimitiveLiteralExpression
		public Assignment getPartsAssignment_3_1_1() { return cPartsAssignment_3_1_1; }
		
		//PrimitiveLiteralExpression
		public RuleCall getPartsPrimitiveLiteralExpressionParserRuleCall_3_1_1_0() { return cPartsPrimitiveLiteralExpressionParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TypeLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.TypeLiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSetTypeLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUserDefinedTypeLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TypeLiteralExpression:
		//	PrimitiveTypeLiteral | SetTypeLiteral | UserDefinedTypeLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveTypeLiteral | SetTypeLiteral | UserDefinedTypeLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveTypeLiteral
		public RuleCall getPrimitiveTypeLiteralParserRuleCall_0() { return cPrimitiveTypeLiteralParserRuleCall_0; }
		
		//SetTypeLiteral
		public RuleCall getSetTypeLiteralParserRuleCall_1() { return cSetTypeLiteralParserRuleCall_1; }
		
		//UserDefinedTypeLiteral
		public RuleCall getUserDefinedTypeLiteralParserRuleCall_2() { return cUserDefinedTypeLiteralParserRuleCall_2; }
	}
	public class VariableExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.VariableExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cReferringVariableAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cReferringVariableSelfKeyword_0_0 = (Keyword)cReferringVariableAssignment_0.eContents().get(0);
		private final Assignment cReferringVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cReferringVariableIDTerminalRuleCall_1_0 = (RuleCall)cReferringVariableAssignment_1.eContents().get(0);
		
		//VariableExpression:
		//	referringVariable='self' | referringVariable=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//referringVariable='self' | referringVariable=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//referringVariable='self'
		public Assignment getReferringVariableAssignment_0() { return cReferringVariableAssignment_0; }
		
		//'self'
		public Keyword getReferringVariableSelfKeyword_0_0() { return cReferringVariableSelfKeyword_0_0; }
		
		//referringVariable=ID
		public Assignment getReferringVariableAssignment_1() { return cReferringVariableAssignment_1; }
		
		//ID
		public RuleCall getReferringVariableIDTerminalRuleCall_1_0() { return cReferringVariableIDTerminalRuleCall_1_0; }
	}
	public class PrimitiveTypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.PrimitiveTypeLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTypeNameBooleanKeyword_0_0 = (Keyword)cTypeNameAssignment_0.eContents().get(0);
		private final Assignment cTypeNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTypeNameNumberKeyword_1_0 = (Keyword)cTypeNameAssignment_1.eContents().get(0);
		private final Assignment cTypeNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cTypeNameStringKeyword_2_0 = (Keyword)cTypeNameAssignment_2.eContents().get(0);
		
		//PrimitiveTypeLiteral:
		//	typeName='Boolean' | typeName='Number' | typeName='String';
		@Override public ParserRule getRule() { return rule; }
		
		//typeName='Boolean' | typeName='Number' | typeName='String'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//typeName='Boolean'
		public Assignment getTypeNameAssignment_0() { return cTypeNameAssignment_0; }
		
		//'Boolean'
		public Keyword getTypeNameBooleanKeyword_0_0() { return cTypeNameBooleanKeyword_0_0; }
		
		//typeName='Number'
		public Assignment getTypeNameAssignment_1() { return cTypeNameAssignment_1; }
		
		//'Number'
		public Keyword getTypeNameNumberKeyword_1_0() { return cTypeNameNumberKeyword_1_0; }
		
		//typeName='String'
		public Assignment getTypeNameAssignment_2() { return cTypeNameAssignment_2; }
		
		//'String'
		public Keyword getTypeNameStringKeyword_2_0() { return cTypeNameStringKeyword_2_0; }
	}
	public class SetTypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.SetTypeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeNameSetKeyword_0_0 = (Keyword)cTypeNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSetTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSetTypeTypeLiteralExpressionParserRuleCall_2_0 = (RuleCall)cSetTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetTypeLiteral:
		//	typeName='Set' '(' setType=TypeLiteralExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//typeName='Set' '(' setType=TypeLiteralExpression ')'
		public Group getGroup() { return cGroup; }
		
		//typeName='Set'
		public Assignment getTypeNameAssignment_0() { return cTypeNameAssignment_0; }
		
		//'Set'
		public Keyword getTypeNameSetKeyword_0_0() { return cTypeNameSetKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//setType=TypeLiteralExpression
		public Assignment getSetTypeAssignment_2() { return cSetTypeAssignment_2; }
		
		//TypeLiteralExpression
		public RuleCall getSetTypeTypeLiteralExpressionParserRuleCall_2_0() { return cSetTypeTypeLiteralExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class UserDefinedTypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.UserDefinedTypeLiteral");
		private final Assignment cTypeNameAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeNameClassCrossReference_0 = (CrossReference)cTypeNameAssignment.eContents().get(0);
		private final RuleCall cTypeNameClassIDTerminalRuleCall_0_1 = (RuleCall)cTypeNameClassCrossReference_0.eContents().get(1);
		
		//UserDefinedTypeLiteral:
		//	typeName=[Class];
		@Override public ParserRule getRule() { return rule; }
		
		//typeName=[Class]
		public Assignment getTypeNameAssignment() { return cTypeNameAssignment; }
		
		//[Class]
		public CrossReference getTypeNameClassCrossReference_0() { return cTypeNameClassCrossReference_0; }
		
		//ID
		public RuleCall getTypeNameClassIDTerminalRuleCall_0_1() { return cTypeNameClassIDTerminalRuleCall_0_1; }
	}
	public class BOOLEAN_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.BOOLEAN_LITERAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOLEAN_LITERAL ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class NUMBER_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.NUMBER_LITERAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//NUMBER_LITERAL ecore::EDouble:
		//	INT ('.' INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT)?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	
	public class CategorizationTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.CategorizationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCATEGORIZEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCATEGORIZERCategorizesKeyword_0_0 = (Keyword)cCATEGORIZEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPLETE_CATEGORIZEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCOMPLETE_CATEGORIZERCompleteCategorizesKeyword_1_0 = (Keyword)cCOMPLETE_CATEGORIZEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDISJOINT_CATEGORIZEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDISJOINT_CATEGORIZERDisjointCategorizesKeyword_2_0 = (Keyword)cDISJOINT_CATEGORIZEREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPARTITIONEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPARTITIONERPartitionsKeyword_3_0 = (Keyword)cPARTITIONEREnumLiteralDeclaration_3.eContents().get(0);
		
		//enum CategorizationType:
		//	CATEGORIZER='categorizes'
		//	| COMPLETE_CATEGORIZER='completeCategorizes'
		//	| DISJOINT_CATEGORIZER='disjointCategorizes'
		//	| PARTITIONER='partitions';
		public EnumRule getRule() { return rule; }
		
		//CATEGORIZER='categorizes' | COMPLETE_CATEGORIZER='completeCategorizes' | DISJOINT_CATEGORIZER='disjointCategorizes' |
		//PARTITIONER='partitions'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CATEGORIZER='categorizes'
		public EnumLiteralDeclaration getCATEGORIZEREnumLiteralDeclaration_0() { return cCATEGORIZEREnumLiteralDeclaration_0; }
		
		//'categorizes'
		public Keyword getCATEGORIZERCategorizesKeyword_0_0() { return cCATEGORIZERCategorizesKeyword_0_0; }
		
		//COMPLETE_CATEGORIZER='completeCategorizes'
		public EnumLiteralDeclaration getCOMPLETE_CATEGORIZEREnumLiteralDeclaration_1() { return cCOMPLETE_CATEGORIZEREnumLiteralDeclaration_1; }
		
		//'completeCategorizes'
		public Keyword getCOMPLETE_CATEGORIZERCompleteCategorizesKeyword_1_0() { return cCOMPLETE_CATEGORIZERCompleteCategorizesKeyword_1_0; }
		
		//DISJOINT_CATEGORIZER='disjointCategorizes'
		public EnumLiteralDeclaration getDISJOINT_CATEGORIZEREnumLiteralDeclaration_2() { return cDISJOINT_CATEGORIZEREnumLiteralDeclaration_2; }
		
		//'disjointCategorizes'
		public Keyword getDISJOINT_CATEGORIZERDisjointCategorizesKeyword_2_0() { return cDISJOINT_CATEGORIZERDisjointCategorizesKeyword_2_0; }
		
		//PARTITIONER='partitions'
		public EnumLiteralDeclaration getPARTITIONEREnumLiteralDeclaration_3() { return cPARTITIONEREnumLiteralDeclaration_3; }
		
		//'partitions'
		public Keyword getPARTITIONERPartitionsKeyword_3_0() { return cPARTITIONERPartitionsKeyword_3_0; }
	}
	public class PrimitiveTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTRINGStringKeyword_0_0 = (Keyword)cSTRINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNUMBEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNUMBERNumberKeyword_1_0 = (Keyword)cNUMBEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBOOLEANBooleanKeyword_2_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum PrimitiveType:
		//	STRING='String'
		//	| NUMBER='Number'
		//	| BOOLEAN='Boolean';
		public EnumRule getRule() { return rule; }
		
		//STRING='String' | NUMBER='Number' | BOOLEAN='Boolean'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING='String'
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_0() { return cSTRINGEnumLiteralDeclaration_0; }
		
		//'String'
		public Keyword getSTRINGStringKeyword_0_0() { return cSTRINGStringKeyword_0_0; }
		
		//NUMBER='Number'
		public EnumLiteralDeclaration getNUMBEREnumLiteralDeclaration_1() { return cNUMBEREnumLiteralDeclaration_1; }
		
		//'Number'
		public Keyword getNUMBERNumberKeyword_1_0() { return cNUMBERNumberKeyword_1_0; }
		
		//BOOLEAN='Boolean'
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_2() { return cBOOLEANEnumLiteralDeclaration_2; }
		
		//'Boolean'
		public Keyword getBOOLEANBooleanKeyword_2_0() { return cBOOLEANBooleanKeyword_2_0; }
	}
	public class RegularityFeatureTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.RegularityFeatureType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDETERMINES_MAX_VALUEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDETERMINES_MAX_VALUEDeterminesMaxValueKeyword_0_0 = (Keyword)cDETERMINES_MAX_VALUEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDETERMINES_MIN_VALUEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDETERMINES_MIN_VALUEDeterminesMinValueKeyword_1_0 = (Keyword)cDETERMINES_MIN_VALUEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDETERMINES_VALUEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDETERMINES_VALUEDeterminesValueKeyword_2_0 = (Keyword)cDETERMINES_VALUEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDETERMINES_ALLOWED_VALUESEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDETERMINES_ALLOWED_VALUESDeterminesAllowedValuesKeyword_3_0 = (Keyword)cDETERMINES_ALLOWED_VALUESEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDETERMINES_TYPEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDETERMINES_TYPEDeterminesTypeKeyword_4_0 = (Keyword)cDETERMINES_TYPEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDETERMINES_ALLOWED_TYPESEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDETERMINES_ALLOWED_TYPESDeterminesAllowedTypesKeyword_5_0 = (Keyword)cDETERMINES_ALLOWED_TYPESEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum RegularityFeatureType:
		//	DETERMINES_MAX_VALUE="determinesMaxValue"
		//	| DETERMINES_MIN_VALUE="determinesMinValue"
		//	| DETERMINES_VALUE="determinesValue"
		//	| DETERMINES_ALLOWED_VALUES="determinesAllowedValues"
		//	| DETERMINES_TYPE="determinesType"
		//	| DETERMINES_ALLOWED_TYPES="determinesAllowedTypes";
		public EnumRule getRule() { return rule; }
		
		//DETERMINES_MAX_VALUE="determinesMaxValue" | DETERMINES_MIN_VALUE="determinesMinValue" |
		//DETERMINES_VALUE="determinesValue" | DETERMINES_ALLOWED_VALUES="determinesAllowedValues" |
		//DETERMINES_TYPE="determinesType" | DETERMINES_ALLOWED_TYPES="determinesAllowedTypes"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DETERMINES_MAX_VALUE="determinesMaxValue"
		public EnumLiteralDeclaration getDETERMINES_MAX_VALUEEnumLiteralDeclaration_0() { return cDETERMINES_MAX_VALUEEnumLiteralDeclaration_0; }
		
		//"determinesMaxValue"
		public Keyword getDETERMINES_MAX_VALUEDeterminesMaxValueKeyword_0_0() { return cDETERMINES_MAX_VALUEDeterminesMaxValueKeyword_0_0; }
		
		//DETERMINES_MIN_VALUE="determinesMinValue"
		public EnumLiteralDeclaration getDETERMINES_MIN_VALUEEnumLiteralDeclaration_1() { return cDETERMINES_MIN_VALUEEnumLiteralDeclaration_1; }
		
		//"determinesMinValue"
		public Keyword getDETERMINES_MIN_VALUEDeterminesMinValueKeyword_1_0() { return cDETERMINES_MIN_VALUEDeterminesMinValueKeyword_1_0; }
		
		//DETERMINES_VALUE="determinesValue"
		public EnumLiteralDeclaration getDETERMINES_VALUEEnumLiteralDeclaration_2() { return cDETERMINES_VALUEEnumLiteralDeclaration_2; }
		
		//"determinesValue"
		public Keyword getDETERMINES_VALUEDeterminesValueKeyword_2_0() { return cDETERMINES_VALUEDeterminesValueKeyword_2_0; }
		
		//DETERMINES_ALLOWED_VALUES="determinesAllowedValues"
		public EnumLiteralDeclaration getDETERMINES_ALLOWED_VALUESEnumLiteralDeclaration_3() { return cDETERMINES_ALLOWED_VALUESEnumLiteralDeclaration_3; }
		
		//"determinesAllowedValues"
		public Keyword getDETERMINES_ALLOWED_VALUESDeterminesAllowedValuesKeyword_3_0() { return cDETERMINES_ALLOWED_VALUESDeterminesAllowedValuesKeyword_3_0; }
		
		//DETERMINES_TYPE="determinesType"
		public EnumLiteralDeclaration getDETERMINES_TYPEEnumLiteralDeclaration_4() { return cDETERMINES_TYPEEnumLiteralDeclaration_4; }
		
		//"determinesType"
		public Keyword getDETERMINES_TYPEDeterminesTypeKeyword_4_0() { return cDETERMINES_TYPEDeterminesTypeKeyword_4_0; }
		
		//DETERMINES_ALLOWED_TYPES="determinesAllowedTypes"
		public EnumLiteralDeclaration getDETERMINES_ALLOWED_TYPESEnumLiteralDeclaration_5() { return cDETERMINES_ALLOWED_TYPESEnumLiteralDeclaration_5; }
		
		//"determinesAllowedTypes"
		public Keyword getDETERMINES_ALLOWED_TYPESDeterminesAllowedTypesKeyword_5_0() { return cDETERMINES_ALLOWED_TYPESDeterminesAllowedTypesKeyword_5_0; }
	}
	public class ComparisonOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualsSignKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOT_EQUALLessThanSignGreaterThanSignKeyword_1_0 = (Keyword)cNOT_EQUALEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ComparisonOperator:
		//	EQUAL='=' | NOT_EQUAL='<>';
		public EnumRule getRule() { return rule; }
		
		//EQUAL='=' | NOT_EQUAL='<>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUAL='='
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getEQUALEqualsSignKeyword_0_0() { return cEQUALEqualsSignKeyword_0_0; }
		
		//NOT_EQUAL='<>'
		public EnumLiteralDeclaration getNOT_EQUALEnumLiteralDeclaration_1() { return cNOT_EQUALEnumLiteralDeclaration_1; }
		
		//'<>'
		public Keyword getNOT_EQUALLessThanSignGreaterThanSignKeyword_1_0() { return cNOT_EQUALLessThanSignGreaterThanSignKeyword_1_0; }
	}
	public class RelationalOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGREATERGreaterThanSignKeyword_0_0 = (Keyword)cGREATEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLESSLessThanSignKeyword_1_0 = (Keyword)cLESSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_EQUALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGREATER_EQUALGreaterThanSignEqualsSignKeyword_2_0 = (Keyword)cGREATER_EQUALEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_EQUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLESS_EQUALLessThanSignEqualsSignKeyword_3_0 = (Keyword)cLESS_EQUALEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum RelationalOperator:
		//	GREATER='>' | LESS='<' | GREATER_EQUAL='>=' | LESS_EQUAL='<=';
		public EnumRule getRule() { return rule; }
		
		//GREATER='>' | LESS='<' | GREATER_EQUAL='>=' | LESS_EQUAL='<='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GREATER='>'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_0() { return cGREATEREnumLiteralDeclaration_0; }
		
		//'>'
		public Keyword getGREATERGreaterThanSignKeyword_0_0() { return cGREATERGreaterThanSignKeyword_0_0; }
		
		//LESS='<'
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_1() { return cLESSEnumLiteralDeclaration_1; }
		
		//'<'
		public Keyword getLESSLessThanSignKeyword_1_0() { return cLESSLessThanSignKeyword_1_0; }
		
		//GREATER_EQUAL='>='
		public EnumLiteralDeclaration getGREATER_EQUALEnumLiteralDeclaration_2() { return cGREATER_EQUALEnumLiteralDeclaration_2; }
		
		//'>='
		public Keyword getGREATER_EQUALGreaterThanSignEqualsSignKeyword_2_0() { return cGREATER_EQUALGreaterThanSignEqualsSignKeyword_2_0; }
		
		//LESS_EQUAL='<='
		public EnumLiteralDeclaration getLESS_EQUALEnumLiteralDeclaration_3() { return cLESS_EQUALEnumLiteralDeclaration_3; }
		
		//'<='
		public Keyword getLESS_EQUALLessThanSignEqualsSignKeyword_3_0() { return cLESS_EQUALLessThanSignEqualsSignKeyword_3_0; }
	}
	public class AdditionOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.AdditionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPLUSPlusSignKeyword_0_0 = (Keyword)cPLUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUSHyphenMinusKeyword_1_0 = (Keyword)cMINUSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditionOperator:
		//	PLUS='+' | MINUS='-';
		public EnumRule getRule() { return rule; }
		
		//PLUS='+' | MINUS='-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PLUS='+'
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_0() { return cPLUSEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getPLUSPlusSignKeyword_0_0() { return cPLUSPlusSignKeyword_0_0; }
		
		//MINUS='-'
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_1() { return cMINUSEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getMINUSHyphenMinusKeyword_1_0() { return cMINUSHyphenMinusKeyword_1_0; }
	}
	public class MultiplicationOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.MultiplicationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTIMESEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTIMESAsteriskKeyword_0_0 = (Keyword)cTIMESEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOVEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOVERSolidusKeyword_1_0 = (Keyword)cOVEREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MultiplicationOperator:
		//	TIMES='*' | OVER='/';
		public EnumRule getRule() { return rule; }
		
		//TIMES='*' | OVER='/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TIMES='*'
		public EnumLiteralDeclaration getTIMESEnumLiteralDeclaration_0() { return cTIMESEnumLiteralDeclaration_0; }
		
		//'*'
		public Keyword getTIMESAsteriskKeyword_0_0() { return cTIMESAsteriskKeyword_0_0; }
		
		//OVER='/'
		public EnumLiteralDeclaration getOVEREnumLiteralDeclaration_1() { return cOVEREnumLiteralDeclaration_1; }
		
		//'/'
		public Keyword getOVERSolidusKeyword_1_0() { return cOVERSolidusKeyword_1_0; }
	}
	public class UnaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENONEKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOTNotKeyword_1_0 = (Keyword)cNOTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMINUSHyphenMinusKeyword_2_0 = (Keyword)cMINUSEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum UnaryOperator:
		//	NONE | NOT='not' | MINUS='-';
		public EnumRule getRule() { return rule; }
		
		//NONE | NOT='not' | MINUS='-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NONE
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }
		
		//"NONE"
		public Keyword getNONENONEKeyword_0_0() { return cNONENONEKeyword_0_0; }
		
		//NOT='not'
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_1() { return cNOTEnumLiteralDeclaration_1; }
		
		//'not'
		public Keyword getNOTNotKeyword_1_0() { return cNOTNotKeyword_1_0; }
		
		//MINUS='-'
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_2() { return cMINUSEnumLiteralDeclaration_2; }
		
		//'-'
		public Keyword getMINUSHyphenMinusKeyword_2_0() { return cMINUSHyphenMinusKeyword_2_0; }
	}
	public class UnaryNumberOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.UnaryNumberOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cABSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cABSAbsKeyword_0_0 = (Keyword)cABSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFLOOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFLOORFloorKeyword_1_0 = (Keyword)cFLOOREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cROUNDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cROUNDRoundKeyword_2_0 = (Keyword)cROUNDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOCL_IS_UNDEFINEDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOCL_IS_UNDEFINEDOclIsUndefinedKeyword_3_0 = (Keyword)cOCL_IS_UNDEFINEDEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum UnaryNumberOperator:
		//	ABS='abs' | FLOOR='floor' | ROUND='round' | OCL_IS_UNDEFINED='oclIsUndefined';
		public EnumRule getRule() { return rule; }
		
		//ABS='abs' | FLOOR='floor' | ROUND='round' | OCL_IS_UNDEFINED='oclIsUndefined'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ABS='abs'
		public EnumLiteralDeclaration getABSEnumLiteralDeclaration_0() { return cABSEnumLiteralDeclaration_0; }
		
		//'abs'
		public Keyword getABSAbsKeyword_0_0() { return cABSAbsKeyword_0_0; }
		
		//FLOOR='floor'
		public EnumLiteralDeclaration getFLOOREnumLiteralDeclaration_1() { return cFLOOREnumLiteralDeclaration_1; }
		
		//'floor'
		public Keyword getFLOORFloorKeyword_1_0() { return cFLOORFloorKeyword_1_0; }
		
		//ROUND='round'
		public EnumLiteralDeclaration getROUNDEnumLiteralDeclaration_2() { return cROUNDEnumLiteralDeclaration_2; }
		
		//'round'
		public Keyword getROUNDRoundKeyword_2_0() { return cROUNDRoundKeyword_2_0; }
		
		//OCL_IS_UNDEFINED='oclIsUndefined'
		public EnumLiteralDeclaration getOCL_IS_UNDEFINEDEnumLiteralDeclaration_3() { return cOCL_IS_UNDEFINEDEnumLiteralDeclaration_3; }
		
		//'oclIsUndefined'
		public Keyword getOCL_IS_UNDEFINEDOclIsUndefinedKeyword_3_0() { return cOCL_IS_UNDEFINEDOclIsUndefinedKeyword_3_0; }
	}
	public class BinaryNumberOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.BinaryNumberOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMINEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMINMinKeyword_0_0 = (Keyword)cMINEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMAXEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMAXMaxKeyword_1_0 = (Keyword)cMAXEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDIVDivKeyword_2_0 = (Keyword)cDIVEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum BinaryNumberOperator:
		//	MIN='min' | MAX='max' | DIV='div';
		public EnumRule getRule() { return rule; }
		
		//MIN='min' | MAX='max' | DIV='div'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MIN='min'
		public EnumLiteralDeclaration getMINEnumLiteralDeclaration_0() { return cMINEnumLiteralDeclaration_0; }
		
		//'min'
		public Keyword getMINMinKeyword_0_0() { return cMINMinKeyword_0_0; }
		
		//MAX='max'
		public EnumLiteralDeclaration getMAXEnumLiteralDeclaration_1() { return cMAXEnumLiteralDeclaration_1; }
		
		//'max'
		public Keyword getMAXMaxKeyword_1_0() { return cMAXMaxKeyword_1_0; }
		
		//DIV='div'
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_2() { return cDIVEnumLiteralDeclaration_2; }
		
		//'div'
		public Keyword getDIVDivKeyword_2_0() { return cDIVDivKeyword_2_0; }
	}
	public class UnarySetOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.UnarySetOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSIZEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSIZESizeKeyword_0_0 = (Keyword)cSIZEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIS_EMPTYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIS_EMPTYIsEmptyKeyword_1_0 = (Keyword)cIS_EMPTYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EMPTYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNOT_EMPTYNotEmptyKeyword_2_0 = (Keyword)cNOT_EMPTYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSUMEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSUMSumKeyword_3_0 = (Keyword)cSUMEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMINEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMINMinKeyword_4_0 = (Keyword)cMINEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cMAXEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cMAXMaxKeyword_5_0 = (Keyword)cMAXEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cAS_SETEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cAS_SETAsSetKeyword_6_0 = (Keyword)cAS_SETEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cFLATTENEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cFLATTENFlattenKeyword_7_0 = (Keyword)cFLATTENEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum UnarySetOperator:
		//	SIZE='size' | IS_EMPTY='isEmpty' | NOT_EMPTY='notEmpty' | SUM='sum' | MIN='min' | MAX='max' |
		//	AS_SET='asSet' | FLATTEN='flatten';
		public EnumRule getRule() { return rule; }
		
		//SIZE='size' | IS_EMPTY='isEmpty' | NOT_EMPTY='notEmpty' | SUM='sum' | MIN='min' | MAX='max' | AS_SET='asSet' |
		//FLATTEN='flatten'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SIZE='size'
		public EnumLiteralDeclaration getSIZEEnumLiteralDeclaration_0() { return cSIZEEnumLiteralDeclaration_0; }
		
		//'size'
		public Keyword getSIZESizeKeyword_0_0() { return cSIZESizeKeyword_0_0; }
		
		//IS_EMPTY='isEmpty'
		public EnumLiteralDeclaration getIS_EMPTYEnumLiteralDeclaration_1() { return cIS_EMPTYEnumLiteralDeclaration_1; }
		
		//'isEmpty'
		public Keyword getIS_EMPTYIsEmptyKeyword_1_0() { return cIS_EMPTYIsEmptyKeyword_1_0; }
		
		//NOT_EMPTY='notEmpty'
		public EnumLiteralDeclaration getNOT_EMPTYEnumLiteralDeclaration_2() { return cNOT_EMPTYEnumLiteralDeclaration_2; }
		
		//'notEmpty'
		public Keyword getNOT_EMPTYNotEmptyKeyword_2_0() { return cNOT_EMPTYNotEmptyKeyword_2_0; }
		
		//SUM='sum'
		public EnumLiteralDeclaration getSUMEnumLiteralDeclaration_3() { return cSUMEnumLiteralDeclaration_3; }
		
		//'sum'
		public Keyword getSUMSumKeyword_3_0() { return cSUMSumKeyword_3_0; }
		
		//MIN='min'
		public EnumLiteralDeclaration getMINEnumLiteralDeclaration_4() { return cMINEnumLiteralDeclaration_4; }
		
		//'min'
		public Keyword getMINMinKeyword_4_0() { return cMINMinKeyword_4_0; }
		
		//MAX='max'
		public EnumLiteralDeclaration getMAXEnumLiteralDeclaration_5() { return cMAXEnumLiteralDeclaration_5; }
		
		//'max'
		public Keyword getMAXMaxKeyword_5_0() { return cMAXMaxKeyword_5_0; }
		
		//AS_SET='asSet'
		public EnumLiteralDeclaration getAS_SETEnumLiteralDeclaration_6() { return cAS_SETEnumLiteralDeclaration_6; }
		
		//'asSet'
		public Keyword getAS_SETAsSetKeyword_6_0() { return cAS_SETAsSetKeyword_6_0; }
		
		//FLATTEN='flatten'
		public EnumLiteralDeclaration getFLATTENEnumLiteralDeclaration_7() { return cFLATTENEnumLiteralDeclaration_7; }
		
		//'flatten'
		public Keyword getFLATTENFlattenKeyword_7_0() { return cFLATTENFlattenKeyword_7_0; }
	}
	public class BinarySetOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.BinarySetOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINCLUDESEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINCLUDESIncludesKeyword_0_0 = (Keyword)cINCLUDESEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINCLUDES_ALLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINCLUDES_ALLIncludesAllKeyword_1_0 = (Keyword)cINCLUDES_ALLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEXCLUDESEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEXCLUDESExcludesKeyword_2_0 = (Keyword)cEXCLUDESEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEXCLUDES_ALLEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEXCLUDES_ALLExcludesAllKeyword_3_0 = (Keyword)cEXCLUDES_ALLEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cINCLUDINGEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cINCLUDINGIncludingKeyword_4_0 = (Keyword)cINCLUDINGEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cEXCLUDINGEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cEXCLUDINGExcludingKeyword_5_0 = (Keyword)cEXCLUDINGEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cCOUNTEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cCOUNTCountKeyword_6_0 = (Keyword)cCOUNTEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cUNIONEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cUNIONUnionKeyword_7_0 = (Keyword)cUNIONEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cINTERSECTIONEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cINTERSECTIONIntersectionKeyword_8_0 = (Keyword)cINTERSECTIONEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cSYMMETRIC_DIFFERENCEEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cSYMMETRIC_DIFFERENCESymmetricDifferenceKeyword_9_0 = (Keyword)cSYMMETRIC_DIFFERENCEEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum BinarySetOperator:
		//	INCLUDES='includes' | INCLUDES_ALL='includesAll' | EXCLUDES='excludes' | EXCLUDES_ALL='excludesAll' |
		//	INCLUDING='including' | EXCLUDING='excluding' | COUNT='count' | UNION='union' | INTERSECTION='intersection' |
		//	SYMMETRIC_DIFFERENCE='symmetricDifference';
		public EnumRule getRule() { return rule; }
		
		//INCLUDES='includes' | INCLUDES_ALL='includesAll' | EXCLUDES='excludes' | EXCLUDES_ALL='excludesAll' |
		//INCLUDING='including' | EXCLUDING='excluding' | COUNT='count' | UNION='union' | INTERSECTION='intersection' |
		//SYMMETRIC_DIFFERENCE='symmetricDifference'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INCLUDES='includes'
		public EnumLiteralDeclaration getINCLUDESEnumLiteralDeclaration_0() { return cINCLUDESEnumLiteralDeclaration_0; }
		
		//'includes'
		public Keyword getINCLUDESIncludesKeyword_0_0() { return cINCLUDESIncludesKeyword_0_0; }
		
		//INCLUDES_ALL='includesAll'
		public EnumLiteralDeclaration getINCLUDES_ALLEnumLiteralDeclaration_1() { return cINCLUDES_ALLEnumLiteralDeclaration_1; }
		
		//'includesAll'
		public Keyword getINCLUDES_ALLIncludesAllKeyword_1_0() { return cINCLUDES_ALLIncludesAllKeyword_1_0; }
		
		//EXCLUDES='excludes'
		public EnumLiteralDeclaration getEXCLUDESEnumLiteralDeclaration_2() { return cEXCLUDESEnumLiteralDeclaration_2; }
		
		//'excludes'
		public Keyword getEXCLUDESExcludesKeyword_2_0() { return cEXCLUDESExcludesKeyword_2_0; }
		
		//EXCLUDES_ALL='excludesAll'
		public EnumLiteralDeclaration getEXCLUDES_ALLEnumLiteralDeclaration_3() { return cEXCLUDES_ALLEnumLiteralDeclaration_3; }
		
		//'excludesAll'
		public Keyword getEXCLUDES_ALLExcludesAllKeyword_3_0() { return cEXCLUDES_ALLExcludesAllKeyword_3_0; }
		
		//INCLUDING='including'
		public EnumLiteralDeclaration getINCLUDINGEnumLiteralDeclaration_4() { return cINCLUDINGEnumLiteralDeclaration_4; }
		
		//'including'
		public Keyword getINCLUDINGIncludingKeyword_4_0() { return cINCLUDINGIncludingKeyword_4_0; }
		
		//EXCLUDING='excluding'
		public EnumLiteralDeclaration getEXCLUDINGEnumLiteralDeclaration_5() { return cEXCLUDINGEnumLiteralDeclaration_5; }
		
		//'excluding'
		public Keyword getEXCLUDINGExcludingKeyword_5_0() { return cEXCLUDINGExcludingKeyword_5_0; }
		
		//COUNT='count'
		public EnumLiteralDeclaration getCOUNTEnumLiteralDeclaration_6() { return cCOUNTEnumLiteralDeclaration_6; }
		
		//'count'
		public Keyword getCOUNTCountKeyword_6_0() { return cCOUNTCountKeyword_6_0; }
		
		//UNION='union'
		public EnumLiteralDeclaration getUNIONEnumLiteralDeclaration_7() { return cUNIONEnumLiteralDeclaration_7; }
		
		//'union'
		public Keyword getUNIONUnionKeyword_7_0() { return cUNIONUnionKeyword_7_0; }
		
		//INTERSECTION='intersection'
		public EnumLiteralDeclaration getINTERSECTIONEnumLiteralDeclaration_8() { return cINTERSECTIONEnumLiteralDeclaration_8; }
		
		//'intersection'
		public Keyword getINTERSECTIONIntersectionKeyword_8_0() { return cINTERSECTIONIntersectionKeyword_8_0; }
		
		//SYMMETRIC_DIFFERENCE='symmetricDifference'
		public EnumLiteralDeclaration getSYMMETRIC_DIFFERENCEEnumLiteralDeclaration_9() { return cSYMMETRIC_DIFFERENCEEnumLiteralDeclaration_9; }
		
		//'symmetricDifference'
		public Keyword getSYMMETRIC_DIFFERENCESymmetricDifferenceKeyword_9_0() { return cSYMMETRIC_DIFFERENCESymmetricDifferenceKeyword_9_0; }
	}
	public class UnaryIteratorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.UnaryIterator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSELECTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSELECTSelectKeyword_0_0 = (Keyword)cSELECTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cREJECTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cREJECTRejectKeyword_1_0 = (Keyword)cREJECTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCOLLECTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCOLLECTCollectKeyword_2_0 = (Keyword)cCOLLECTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cANYEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cANYAnyKeyword_3_0 = (Keyword)cANYEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cONEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cONEOneKeyword_4_0 = (Keyword)cONEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cIS_UNIQUEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cIS_UNIQUEIsUniqueKeyword_5_0 = (Keyword)cIS_UNIQUEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cCLOSUREEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cCLOSUREClosureKeyword_6_0 = (Keyword)cCLOSUREEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum UnaryIterator:
		//	SELECT='select' | REJECT='reject' | COLLECT='collect' | ANY='any' | ONE='one' |
		//	IS_UNIQUE='isUnique' | CLOSURE='closure';
		public EnumRule getRule() { return rule; }
		
		//SELECT='select' | REJECT='reject' | COLLECT='collect' | ANY='any' | ONE='one' | IS_UNIQUE='isUnique' | CLOSURE='closure'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SELECT='select'
		public EnumLiteralDeclaration getSELECTEnumLiteralDeclaration_0() { return cSELECTEnumLiteralDeclaration_0; }
		
		//'select'
		public Keyword getSELECTSelectKeyword_0_0() { return cSELECTSelectKeyword_0_0; }
		
		//REJECT='reject'
		public EnumLiteralDeclaration getREJECTEnumLiteralDeclaration_1() { return cREJECTEnumLiteralDeclaration_1; }
		
		//'reject'
		public Keyword getREJECTRejectKeyword_1_0() { return cREJECTRejectKeyword_1_0; }
		
		//COLLECT='collect'
		public EnumLiteralDeclaration getCOLLECTEnumLiteralDeclaration_2() { return cCOLLECTEnumLiteralDeclaration_2; }
		
		//'collect'
		public Keyword getCOLLECTCollectKeyword_2_0() { return cCOLLECTCollectKeyword_2_0; }
		
		//ANY='any'
		public EnumLiteralDeclaration getANYEnumLiteralDeclaration_3() { return cANYEnumLiteralDeclaration_3; }
		
		//'any'
		public Keyword getANYAnyKeyword_3_0() { return cANYAnyKeyword_3_0; }
		
		//ONE='one'
		public EnumLiteralDeclaration getONEEnumLiteralDeclaration_4() { return cONEEnumLiteralDeclaration_4; }
		
		//'one'
		public Keyword getONEOneKeyword_4_0() { return cONEOneKeyword_4_0; }
		
		//IS_UNIQUE='isUnique'
		public EnumLiteralDeclaration getIS_UNIQUEEnumLiteralDeclaration_5() { return cIS_UNIQUEEnumLiteralDeclaration_5; }
		
		//'isUnique'
		public Keyword getIS_UNIQUEIsUniqueKeyword_5_0() { return cIS_UNIQUEIsUniqueKeyword_5_0; }
		
		//CLOSURE='closure'
		public EnumLiteralDeclaration getCLOSUREEnumLiteralDeclaration_6() { return cCLOSUREEnumLiteralDeclaration_6; }
		
		//'closure'
		public Keyword getCLOSUREClosureKeyword_6_0() { return cCLOSUREClosureKeyword_6_0; }
	}
	public class MultiaryIteratorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.MultiaryIterator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEXISTSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEXISTSExistsKeyword_0_0 = (Keyword)cEXISTSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFOR_ALLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFOR_ALLForAllKeyword_1_0 = (Keyword)cFOR_ALLEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MultiaryIterator:
		//	EXISTS='exists' | FOR_ALL='forAll';
		public EnumRule getRule() { return rule; }
		
		//EXISTS='exists' | FOR_ALL='forAll'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EXISTS='exists'
		public EnumLiteralDeclaration getEXISTSEnumLiteralDeclaration_0() { return cEXISTSEnumLiteralDeclaration_0; }
		
		//'exists'
		public Keyword getEXISTSExistsKeyword_0_0() { return cEXISTSExistsKeyword_0_0; }
		
		//FOR_ALL='forAll'
		public EnumLiteralDeclaration getFOR_ALLEnumLiteralDeclaration_1() { return cFOR_ALLEnumLiteralDeclaration_1; }
		
		//'forAll'
		public Keyword getFOR_ALLForAllKeyword_1_0() { return cFOR_ALLForAllKeyword_1_0; }
	}
	public class TypeOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.nemo.ml2.ML2.TypeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOCL_AS_TYPEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOCL_AS_TYPEOclAsTypeKeyword_0_0 = (Keyword)cOCL_AS_TYPEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOCL_IS_KIND_OFEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOCL_IS_KIND_OFOclIsKindOfKeyword_1_0 = (Keyword)cOCL_IS_KIND_OFEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOCL_IS_TYPE_OFEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOCL_IS_TYPE_OFOclIsTypeOfKeyword_2_0 = (Keyword)cOCL_IS_TYPE_OFEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TypeOperator:
		//	OCL_AS_TYPE='oclAsType' | OCL_IS_KIND_OF='oclIsKindOf' | OCL_IS_TYPE_OF='oclIsTypeOf';
		public EnumRule getRule() { return rule; }
		
		//OCL_AS_TYPE='oclAsType' | OCL_IS_KIND_OF='oclIsKindOf' | OCL_IS_TYPE_OF='oclIsTypeOf'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OCL_AS_TYPE='oclAsType'
		public EnumLiteralDeclaration getOCL_AS_TYPEEnumLiteralDeclaration_0() { return cOCL_AS_TYPEEnumLiteralDeclaration_0; }
		
		//'oclAsType'
		public Keyword getOCL_AS_TYPEOclAsTypeKeyword_0_0() { return cOCL_AS_TYPEOclAsTypeKeyword_0_0; }
		
		//OCL_IS_KIND_OF='oclIsKindOf'
		public EnumLiteralDeclaration getOCL_IS_KIND_OFEnumLiteralDeclaration_1() { return cOCL_IS_KIND_OFEnumLiteralDeclaration_1; }
		
		//'oclIsKindOf'
		public Keyword getOCL_IS_KIND_OFOclIsKindOfKeyword_1_0() { return cOCL_IS_KIND_OFOclIsKindOfKeyword_1_0; }
		
		//OCL_IS_TYPE_OF='oclIsTypeOf'
		public EnumLiteralDeclaration getOCL_IS_TYPE_OFEnumLiteralDeclaration_2() { return cOCL_IS_TYPE_OFEnumLiteralDeclaration_2; }
		
		//'oclIsTypeOf'
		public Keyword getOCL_IS_TYPE_OFOclIsTypeOfKeyword_2_0() { return cOCL_IS_TYPE_OFOclIsTypeOfKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final ImportElements pImport;
	private final ModelElementElements pModelElement;
	private final AllModelElementsElements pAllModelElements;
	private final EntityDeclarationElements pEntityDeclaration;
	private final ClassElements pClass;
	private final FirstOrderClassOrDataTypeElements pFirstOrderClassOrDataType;
	private final HigherOrderClassElements pHigherOrderClass;
	private final IndividualElements pIndividual;
	private final ClassIntoOrderedOrOrderlessElements pClassIntoOrderedOrOrderless;
	private final OrderedClassElements pOrderedClass;
	private final FirstOrderClassElements pFirstOrderClass;
	private final DataTypeElements pDataType;
	private final HighOrderClassElements pHighOrderClass;
	private final OrderlessClassElements pOrderlessClass;
	private final CategorizationTypeElements eCategorizationType;
	private final GeneralizationSetElements pGeneralizationSet;
	private final FeatureElements pFeature;
	private final AttributeElements pAttribute;
	private final RegularityAttributeElements pRegularityAttribute;
	private final ReferenceElements pReference;
	private final RegularityReferenceElements pRegularityReference;
	private final FeatureIntoRegularityFeatureElements pFeatureIntoRegularityFeature;
	private final RegularityFeatureElements pRegularityFeature;
	private final CARDINALITYElements pCARDINALITY;
	private final PrimitiveTypeElements ePrimitiveType;
	private final RegularityFeatureTypeElements eRegularityFeatureType;
	private final FeatureAssignmentElements pFeatureAssignment;
	private final SingleReferenceAssignmentElements pSingleReferenceAssignment;
	private final MultipleReferenceAssignmentElements pMultipleReferenceAssignment;
	private final SingleAttributeAssignmentElements pSingleAttributeAssignment;
	private final MultipleAttributeAssignmentElements pMultipleAttributeAssignment;
	private final BOOLEANElements pBOOLEAN;
	private final NUMBERElements pNUMBER;
	private final UnnamedIndividualElements pUnnamedIndividual;
	private final SimpleAttributeAssignmentElements pSimpleAttributeAssignment;
	private final SingleSimpleAttributeAssignmentElements pSingleSimpleAttributeAssignment;
	private final MultipleSimpleAttributeAssignmentElements pMultipleSimpleAttributeAssignment;
	private final ConstraintDeclarationElements pConstraintDeclaration;
	private final InvariantConstraintElements pInvariantConstraint;
	private final DerivationConstraintElements pDerivationConstraint;
	private final OclExpressionElements pOclExpression;
	private final LetExpressionElements pLetExpression;
	private final VariableDeclarationElements pVariableDeclaration;
	private final IfExpressionElements pIfExpression;
	private final ImpliesExpressionElements pImpliesExpression;
	private final XorExpressionElements pXorExpression;
	private final OrExpressionElements pOrExpression;
	private final AndExpressionElements pAndExpression;
	private final ComparisonExpressionElements pComparisonExpression;
	private final ComparisonOperationElements pComparisonOperation;
	private final ComparisonOperatorElements eComparisonOperator;
	private final RelationalExpressionElements pRelationalExpression;
	private final RelationalOperationElements pRelationalOperation;
	private final RelationalOperatorElements eRelationalOperator;
	private final AdditionExpressionElements pAdditionExpression;
	private final AdditionOperationElements pAdditionOperation;
	private final AdditionOperatorElements eAdditionOperator;
	private final MultiplicationExpressionElements pMultiplicationExpression;
	private final MultiplicationOperationElements pMultiplicationOperation;
	private final MultiplicationOperatorElements eMultiplicationOperator;
	private final UnaryExpressionElements pUnaryExpression;
	private final UnaryOperatorElements eUnaryOperator;
	private final TermExpressionElements pTermExpression;
	private final CallExpressionElements pCallExpression;
	private final NavigationSourceElements pNavigationSource;
	private final CallOperationElements pCallOperation;
	private final DotOperationElements pDotOperation;
	private final UnaryNumberOperationElements pUnaryNumberOperation;
	private final UnaryNumberOperatorElements eUnaryNumberOperator;
	private final BinaryNumberOperationElements pBinaryNumberOperation;
	private final BinaryNumberOperatorElements eBinaryNumberOperator;
	private final ArrowOperationElements pArrowOperation;
	private final UnarySetOperationElements pUnarySetOperation;
	private final UnarySetOperatorElements eUnarySetOperator;
	private final BinarySetOperationElements pBinarySetOperation;
	private final BinarySetOperatorElements eBinarySetOperator;
	private final UnaryIterationElements pUnaryIteration;
	private final UnaryIteratorElements eUnaryIterator;
	private final MultiaryIterationElements pMultiaryIteration;
	private final MultiaryIteratorElements eMultiaryIterator;
	private final TypeOperationElements pTypeOperation;
	private final TypeOperatorElements eTypeOperator;
	private final LiteralExpressionElements pLiteralExpression;
	private final PrimitiveLiteralExpressionElements pPrimitiveLiteralExpression;
	private final BooleanLiteralExpressionElements pBooleanLiteralExpression;
	private final NumberLiteralExpressionElements pNumberLiteralExpression;
	private final StringLiteralExpressionElements pStringLiteralExpression;
	private final NullLiteralExpressionElements pNullLiteralExpression;
	private final SetLiteralExpressionElements pSetLiteralExpression;
	private final TypeLiteralExpressionElements pTypeLiteralExpression;
	private final VariableExpressionElements pVariableExpression;
	private final PrimitiveTypeLiteralElements pPrimitiveTypeLiteral;
	private final SetTypeLiteralElements pSetTypeLiteral;
	private final UserDefinedTypeLiteralElements pUserDefinedTypeLiteral;
	private final BOOLEAN_LITERALElements pBOOLEAN_LITERAL;
	private final NUMBER_LITERALElements pNUMBER_LITERAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ML2GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pImport = new ImportElements();
		this.pModelElement = new ModelElementElements();
		this.pAllModelElements = new AllModelElementsElements();
		this.pEntityDeclaration = new EntityDeclarationElements();
		this.pClass = new ClassElements();
		this.pFirstOrderClassOrDataType = new FirstOrderClassOrDataTypeElements();
		this.pHigherOrderClass = new HigherOrderClassElements();
		this.pIndividual = new IndividualElements();
		this.pClassIntoOrderedOrOrderless = new ClassIntoOrderedOrOrderlessElements();
		this.pOrderedClass = new OrderedClassElements();
		this.pFirstOrderClass = new FirstOrderClassElements();
		this.pDataType = new DataTypeElements();
		this.pHighOrderClass = new HighOrderClassElements();
		this.pOrderlessClass = new OrderlessClassElements();
		this.eCategorizationType = new CategorizationTypeElements();
		this.pGeneralizationSet = new GeneralizationSetElements();
		this.pFeature = new FeatureElements();
		this.pAttribute = new AttributeElements();
		this.pRegularityAttribute = new RegularityAttributeElements();
		this.pReference = new ReferenceElements();
		this.pRegularityReference = new RegularityReferenceElements();
		this.pFeatureIntoRegularityFeature = new FeatureIntoRegularityFeatureElements();
		this.pRegularityFeature = new RegularityFeatureElements();
		this.pCARDINALITY = new CARDINALITYElements();
		this.ePrimitiveType = new PrimitiveTypeElements();
		this.eRegularityFeatureType = new RegularityFeatureTypeElements();
		this.pFeatureAssignment = new FeatureAssignmentElements();
		this.pSingleReferenceAssignment = new SingleReferenceAssignmentElements();
		this.pMultipleReferenceAssignment = new MultipleReferenceAssignmentElements();
		this.pSingleAttributeAssignment = new SingleAttributeAssignmentElements();
		this.pMultipleAttributeAssignment = new MultipleAttributeAssignmentElements();
		this.pBOOLEAN = new BOOLEANElements();
		this.pNUMBER = new NUMBERElements();
		this.pUnnamedIndividual = new UnnamedIndividualElements();
		this.pSimpleAttributeAssignment = new SimpleAttributeAssignmentElements();
		this.pSingleSimpleAttributeAssignment = new SingleSimpleAttributeAssignmentElements();
		this.pMultipleSimpleAttributeAssignment = new MultipleSimpleAttributeAssignmentElements();
		this.pConstraintDeclaration = new ConstraintDeclarationElements();
		this.pInvariantConstraint = new InvariantConstraintElements();
		this.pDerivationConstraint = new DerivationConstraintElements();
		this.pOclExpression = new OclExpressionElements();
		this.pLetExpression = new LetExpressionElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pIfExpression = new IfExpressionElements();
		this.pImpliesExpression = new ImpliesExpressionElements();
		this.pXorExpression = new XorExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pComparisonExpression = new ComparisonExpressionElements();
		this.pComparisonOperation = new ComparisonOperationElements();
		this.eComparisonOperator = new ComparisonOperatorElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pRelationalOperation = new RelationalOperationElements();
		this.eRelationalOperator = new RelationalOperatorElements();
		this.pAdditionExpression = new AdditionExpressionElements();
		this.pAdditionOperation = new AdditionOperationElements();
		this.eAdditionOperator = new AdditionOperatorElements();
		this.pMultiplicationExpression = new MultiplicationExpressionElements();
		this.pMultiplicationOperation = new MultiplicationOperationElements();
		this.eMultiplicationOperator = new MultiplicationOperatorElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.eUnaryOperator = new UnaryOperatorElements();
		this.pTermExpression = new TermExpressionElements();
		this.pCallExpression = new CallExpressionElements();
		this.pNavigationSource = new NavigationSourceElements();
		this.pCallOperation = new CallOperationElements();
		this.pDotOperation = new DotOperationElements();
		this.pUnaryNumberOperation = new UnaryNumberOperationElements();
		this.eUnaryNumberOperator = new UnaryNumberOperatorElements();
		this.pBinaryNumberOperation = new BinaryNumberOperationElements();
		this.eBinaryNumberOperator = new BinaryNumberOperatorElements();
		this.pArrowOperation = new ArrowOperationElements();
		this.pUnarySetOperation = new UnarySetOperationElements();
		this.eUnarySetOperator = new UnarySetOperatorElements();
		this.pBinarySetOperation = new BinarySetOperationElements();
		this.eBinarySetOperator = new BinarySetOperatorElements();
		this.pUnaryIteration = new UnaryIterationElements();
		this.eUnaryIterator = new UnaryIteratorElements();
		this.pMultiaryIteration = new MultiaryIterationElements();
		this.eMultiaryIterator = new MultiaryIteratorElements();
		this.pTypeOperation = new TypeOperationElements();
		this.eTypeOperator = new TypeOperatorElements();
		this.pLiteralExpression = new LiteralExpressionElements();
		this.pPrimitiveLiteralExpression = new PrimitiveLiteralExpressionElements();
		this.pBooleanLiteralExpression = new BooleanLiteralExpressionElements();
		this.pNumberLiteralExpression = new NumberLiteralExpressionElements();
		this.pStringLiteralExpression = new StringLiteralExpressionElements();
		this.pNullLiteralExpression = new NullLiteralExpressionElements();
		this.pSetLiteralExpression = new SetLiteralExpressionElements();
		this.pTypeLiteralExpression = new TypeLiteralExpressionElements();
		this.pVariableExpression = new VariableExpressionElements();
		this.pPrimitiveTypeLiteral = new PrimitiveTypeLiteralElements();
		this.pSetTypeLiteral = new SetTypeLiteralElements();
		this.pUserDefinedTypeLiteral = new UserDefinedTypeLiteralElements();
		this.pBOOLEAN_LITERAL = new BOOLEAN_LITERALElements();
		this.pNUMBER_LITERAL = new NUMBER_LITERALElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.ufes.inf.nemo.ml2.ML2".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	'module' name=QualifiedName
	//	'{' ('include' includes+=[Model|QualifiedName] ';' | elements+=ModelElement)*
	//	'}';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//Import:
	//	'import' importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//ModelElement:
	//	(Import | EntityDeclaration | GeneralizationSet | ConstraintDeclaration) ';';
	public ModelElementElements getModelElementAccess() {
		return pModelElement;
	}
	
	public ParserRule getModelElementRule() {
		return getModelElementAccess().getRule();
	}
	
	//AllModelElements ModelElement:
	//	Import | EntityDeclaration | GeneralizationSet | Feature | FeatureAssignment;
	public AllModelElementsElements getAllModelElementsAccess() {
		return pAllModelElements;
	}
	
	public ParserRule getAllModelElementsRule() {
		return getAllModelElementsAccess().getRule();
	}
	
	//EntityDeclaration:
	//	Class | Individual;
	public EntityDeclarationElements getEntityDeclarationAccess() {
		return pEntityDeclaration;
	}
	
	public ParserRule getEntityDeclarationRule() {
		return getEntityDeclarationAccess().getRule();
	}
	
	//Class:
	//	FirstOrderClassOrDataType | HigherOrderClass;
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//FirstOrderClassOrDataType FirstOrderClass:
	//	FirstOrderClass | DataType;
	public FirstOrderClassOrDataTypeElements getFirstOrderClassOrDataTypeAccess() {
		return pFirstOrderClassOrDataType;
	}
	
	public ParserRule getFirstOrderClassOrDataTypeRule() {
		return getFirstOrderClassOrDataTypeAccess().getRule();
	}
	
	//HigherOrderClass:
	//	HighOrderClass | OrderlessClass;
	public HigherOrderClassElements getHigherOrderClassAccess() {
		return pHigherOrderClass;
	}
	
	public ParserRule getHigherOrderClassRule() {
		return getHigherOrderClassAccess().getRule();
	}
	
	//Individual:
	//	'individual' name=ID
	//	':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])* ('{' assignments+=FeatureAssignment*
	//	'}')?;
	public IndividualElements getIndividualAccess() {
		return pIndividual;
	}
	
	public ParserRule getIndividualRule() {
		return getIndividualAccess().getRule();
	}
	
	//// ParserRule used to enforce specialization only
	//ClassIntoOrderedOrOrderless Class:
	//	OrderlessClass | OrderedClass;
	public ClassIntoOrderedOrOrderlessElements getClassIntoOrderedOrOrderlessAccess() {
		return pClassIntoOrderedOrOrderless;
	}
	
	public ParserRule getClassIntoOrderedOrOrderlessRule() {
		return getClassIntoOrderedOrOrderlessAccess().getRule();
	}
	
	//// ParserRule used to enforce specialization only
	//OrderedClass:
	//	HighOrderClass | FirstOrderClass;
	public OrderedClassElements getOrderedClassAccess() {
		return pOrderedClass;
	}
	
	public ParserRule getOrderedClassRule() {
		return getOrderedClassAccess().getRule();
	}
	
	//FirstOrderClass:
	//	'class' name=ID (':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])*)? ('specializes'
	//	superClasses+=[Class|QualifiedName] (',' superClasses+=[Class|QualifiedName])*)? ('{' (assignments+=FeatureAssignment
	//	| features+=Feature)* '}')?;
	public FirstOrderClassElements getFirstOrderClassAccess() {
		return pFirstOrderClass;
	}
	
	public ParserRule getFirstOrderClassRule() {
		return getFirstOrderClassAccess().getRule();
	}
	
	//DataType:
	//	'datatype' name=ID (':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])*)? ('specializes'
	//	superClasses+=[Class|QualifiedName] (',' superClasses+=[Class|QualifiedName])*)? ('{' (assignments+=FeatureAssignment
	//	| features+=Feature)* '}')?;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//HighOrderClass:
	//	'order' order=INT 'class' name=ID (':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])*)?
	//	('specializes' superClasses+=[Class|QualifiedName] (',' superClasses+=[Class|QualifiedName])*)? ('subordinatedTo'
	//	subordinators+=[HigherOrderClass|QualifiedName] (',' subordinators+=[HigherOrderClass|QualifiedName])*)?
	//	(categorizationType=CategorizationType categorizedClass=[Class|QualifiedName] | 'isPowertypeOf'
	//	powertypeOf=[Class|QualifiedName])? ('{' (assignments+=FeatureAssignment | features+=Feature)* '}')?;
	public HighOrderClassElements getHighOrderClassAccess() {
		return pHighOrderClass;
	}
	
	public ParserRule getHighOrderClassRule() {
		return getHighOrderClassAccess().getRule();
	}
	
	//OrderlessClass:
	//	'orderless' 'class' name=ID (':' classifiers+=[Class|QualifiedName] (',' classifiers+=[Class|QualifiedName])*)?
	//	('specializes' superClasses+=[Class|QualifiedName] (',' superClasses+=[Class|QualifiedName])*)? ('subordinatedTo'
	//	subordinators+=[HigherOrderClass|QualifiedName] (',' subordinators+=[HigherOrderClass|QualifiedName])*)?
	//	(categorizationType=CategorizationType categorizedClass=[Class|QualifiedName] | 'isPowertypeOf'
	//	powertypeOf=[Class|QualifiedName])? ('{' (assignments+=FeatureAssignment | features+=Feature)* '}')?;
	public OrderlessClassElements getOrderlessClassAccess() {
		return pOrderlessClass;
	}
	
	public ParserRule getOrderlessClassRule() {
		return getOrderlessClassAccess().getRule();
	}
	
	//enum CategorizationType:
	//	CATEGORIZER='categorizes'
	//	| COMPLETE_CATEGORIZER='completeCategorizes'
	//	| DISJOINT_CATEGORIZER='disjointCategorizes'
	//	| PARTITIONER='partitions';
	public CategorizationTypeElements getCategorizationTypeAccess() {
		return eCategorizationType;
	}
	
	public EnumRule getCategorizationTypeRule() {
		return getCategorizationTypeAccess().getRule();
	}
	
	//GeneralizationSet:
	//	(isDisjoint?='disjoint'? & isComplete?='complete'?) 'genset' name=ID?
	//	'general' general=[Class|QualifiedName] ('categorizer' categorizer=[HigherOrderClass|QualifiedName])?
	//	'specifics' specifics+=[Class|QualifiedName] (',' specifics+=[Class|QualifiedName])+;
	public GeneralizationSetElements getGeneralizationSetAccess() {
		return pGeneralizationSet;
	}
	
	public ParserRule getGeneralizationSetRule() {
		return getGeneralizationSetAccess().getRule();
	}
	
	//Feature:
	//	Attribute | Reference;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//Attribute:
	//	RegularityAttribute |
	//	'att'? name=ID ':' ('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')? (primitiveType=PrimitiveType |
	//	_type=[DataType|QualifiedName]) ('subsets' subsetOf+=[Attribute|QualifiedName] (','
	//	subsetOf+=[Attribute|QualifiedName])*)?;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//RegularityAttribute:
	//	'regularity'? 'att'? name=ID ':' ('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')?
	//	(primitiveType=PrimitiveType | _type=[DataType|QualifiedName]) ('subsets' subsetOf+=[Attribute|QualifiedName] (','
	//	subsetOf+=[Attribute|QualifiedName])*)?
	//	regularityType=RegularityFeatureType regulates=[Attribute|QualifiedName];
	public RegularityAttributeElements getRegularityAttributeAccess() {
		return pRegularityAttribute;
	}
	
	public ParserRule getRegularityAttributeRule() {
		return getRegularityAttributeAccess().getRule();
	}
	
	//Reference:
	//	RegularityReference |
	//	'ref' name=ID ':' ('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')?
	//	_type=[Class|QualifiedName] ('subsets' subsetOf+=[Reference|QualifiedName] (','
	//	subsetOf+=[Reference|QualifiedName])*)? ('isOppositeTo' oppositeTo=[Reference|QualifiedName])?;
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}
	
	//RegularityReference:
	//	'regularity'? 'ref' name=ID ':' ('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')?
	//	_type=[Class|QualifiedName] ('subsets' subsetOf+=[Reference|QualifiedName] (','
	//	subsetOf+=[Reference|QualifiedName])*)? ('isOppositeTo' oppositeTo=[Reference|QualifiedName])?
	//	regularityType=RegularityFeatureType regulates=[Reference|QualifiedName];
	public RegularityReferenceElements getRegularityReferenceAccess() {
		return pRegularityReference;
	}
	
	public ParserRule getRegularityReferenceRule() {
		return getRegularityReferenceAccess().getRule();
	}
	
	//// ParserRule used to enforce specialization only
	//FeatureIntoRegularityFeature Feature:
	//	RegularityFeature;
	public FeatureIntoRegularityFeatureElements getFeatureIntoRegularityFeatureAccess() {
		return pFeatureIntoRegularityFeature;
	}
	
	public ParserRule getFeatureIntoRegularityFeatureRule() {
		return getFeatureIntoRegularityFeatureAccess().getRule();
	}
	
	//// ParserRule used to enforce specialization only
	//RegularityFeature:
	//	RegularityAttribute | RegularityReference;
	public RegularityFeatureElements getRegularityFeatureAccess() {
		return pRegularityFeature;
	}
	
	public ParserRule getRegularityFeatureRule() {
		return getRegularityFeatureAccess().getRule();
	}
	
	//CARDINALITY ecore::EInt:
	//	'*' | INT;
	public CARDINALITYElements getCARDINALITYAccess() {
		return pCARDINALITY;
	}
	
	public ParserRule getCARDINALITYRule() {
		return getCARDINALITYAccess().getRule();
	}
	
	//enum PrimitiveType:
	//	STRING='String'
	//	| NUMBER='Number'
	//	| BOOLEAN='Boolean';
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return ePrimitiveType;
	}
	
	public EnumRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}
	
	//enum RegularityFeatureType:
	//	DETERMINES_MAX_VALUE="determinesMaxValue"
	//	| DETERMINES_MIN_VALUE="determinesMinValue"
	//	| DETERMINES_VALUE="determinesValue"
	//	| DETERMINES_ALLOWED_VALUES="determinesAllowedValues"
	//	| DETERMINES_TYPE="determinesType"
	//	| DETERMINES_ALLOWED_TYPES="determinesAllowedTypes";
	public RegularityFeatureTypeElements getRegularityFeatureTypeAccess() {
		return eRegularityFeatureType;
	}
	
	public EnumRule getRegularityFeatureTypeRule() {
		return getRegularityFeatureTypeAccess().getRule();
	}
	
	//FeatureAssignment:
	//	SingleReferenceAssignment
	//	| MultipleReferenceAssignment
	//	| SingleAttributeAssignment
	//	| MultipleAttributeAssignment;
	public FeatureAssignmentElements getFeatureAssignmentAccess() {
		return pFeatureAssignment;
	}
	
	public ParserRule getFeatureAssignmentRule() {
		return getFeatureAssignmentAccess().getRule();
	}
	
	//SingleReferenceAssignment ReferenceAssignment:
	//	'ref' reference=[Reference|QualifiedName] '=' values+=[EntityDeclaration|QualifiedName];
	public SingleReferenceAssignmentElements getSingleReferenceAssignmentAccess() {
		return pSingleReferenceAssignment;
	}
	
	public ParserRule getSingleReferenceAssignmentRule() {
		return getSingleReferenceAssignmentAccess().getRule();
	}
	
	//MultipleReferenceAssignment ReferenceAssignment:
	//	'ref' reference=[Reference|QualifiedName] '='
	//	'{'
	//	values+=[EntityDeclaration|QualifiedName] (',' values+=[EntityDeclaration|QualifiedName])*
	//	'}';
	public MultipleReferenceAssignmentElements getMultipleReferenceAssignmentAccess() {
		return pMultipleReferenceAssignment;
	}
	
	public ParserRule getMultipleReferenceAssignmentRule() {
		return getMultipleReferenceAssignmentAccess().getRule();
	}
	
	//SingleAttributeAssignment AttributeAssignment:
	//	'att'? attribute=[Attribute|QualifiedName] '=' (stringValues+=STRING
	//	| numberValues+=NUMBER
	//	| booleanValues+=BOOLEAN
	//	| datatypeValues+=[Individual|QualifiedName] | unnamedValues+=UnnamedIndividual);
	public SingleAttributeAssignmentElements getSingleAttributeAssignmentAccess() {
		return pSingleAttributeAssignment;
	}
	
	public ParserRule getSingleAttributeAssignmentRule() {
		return getSingleAttributeAssignmentAccess().getRule();
	}
	
	//MultipleAttributeAssignment AttributeAssignment:
	//	'att'? attribute=[Attribute|QualifiedName] '='
	//	'{' ((stringValues+=STRING
	//	| numberValues+=NUMBER
	//	| booleanValues+=BOOLEAN
	//	| datatypeValues+=[Individual|QualifiedName] | unnamedValues+=UnnamedIndividual) (',' stringValues+=STRING
	//	| ',' numberValues+=NUMBER
	//	| ',' booleanValues+=BOOLEAN
	//	| ',' datatypeValues+=[Individual|QualifiedName] | ',' unnamedValues+=UnnamedIndividual)*)
	//	'}';
	public MultipleAttributeAssignmentElements getMultipleAttributeAssignmentAccess() {
		return pMultipleAttributeAssignment;
	}
	
	public ParserRule getMultipleAttributeAssignmentRule() {
		return getMultipleAttributeAssignmentAccess().getRule();
	}
	
	//BOOLEAN ecore::EBooleanObject:
	//	'true' | 'false';
	public BOOLEANElements getBOOLEANAccess() {
		return pBOOLEAN;
	}
	
	public ParserRule getBOOLEANRule() {
		return getBOOLEANAccess().getRule();
	}
	
	//NUMBER ecore::EDoubleObject:
	//	'-'? INT ('.' INT)?;
	public NUMBERElements getNUMBERAccess() {
		return pNUMBER;
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}
	
	//UnnamedIndividual Individual:
	//	{Individual} '[' assignments+=SimpleAttributeAssignment* ']';
	public UnnamedIndividualElements getUnnamedIndividualAccess() {
		return pUnnamedIndividual;
	}
	
	public ParserRule getUnnamedIndividualRule() {
		return getUnnamedIndividualAccess().getRule();
	}
	
	//SimpleAttributeAssignment AttributeAssignment:
	//	SingleSimpleAttributeAssignment
	//	| MultipleSimpleAttributeAssignment;
	public SimpleAttributeAssignmentElements getSimpleAttributeAssignmentAccess() {
		return pSimpleAttributeAssignment;
	}
	
	public ParserRule getSimpleAttributeAssignmentRule() {
		return getSimpleAttributeAssignmentAccess().getRule();
	}
	
	//SingleSimpleAttributeAssignment AttributeAssignment:
	//	attribute=[Attribute|QualifiedName] '=' (stringValues+=STRING
	//	| numberValues+=NUMBER
	//	| booleanValues+=BOOLEAN
	//	| datatypeValues+=[Individual|QualifiedName] | unnamedValues+=UnnamedIndividual);
	public SingleSimpleAttributeAssignmentElements getSingleSimpleAttributeAssignmentAccess() {
		return pSingleSimpleAttributeAssignment;
	}
	
	public ParserRule getSingleSimpleAttributeAssignmentRule() {
		return getSingleSimpleAttributeAssignmentAccess().getRule();
	}
	
	//MultipleSimpleAttributeAssignment AttributeAssignment:
	//	attribute=[Attribute|QualifiedName] '='
	//	'{' ((stringValues+=STRING
	//	| numberValues+=NUMBER
	//	| booleanValues+=BOOLEAN
	//	| datatypeValues+=[Individual|QualifiedName] | unnamedValues+=UnnamedIndividual) (',' stringValues+=STRING
	//	| ',' numberValues+=NUMBER
	//	| ',' booleanValues+=BOOLEAN
	//	| ',' datatypeValues+=[Individual|QualifiedName] | ',' unnamedValues+=UnnamedIndividual)*)
	//	'}';
	public MultipleSimpleAttributeAssignmentElements getMultipleSimpleAttributeAssignmentAccess() {
		return pMultipleSimpleAttributeAssignment;
	}
	
	public ParserRule getMultipleSimpleAttributeAssignmentRule() {
		return getMultipleSimpleAttributeAssignmentAccess().getRule();
	}
	
	//ConstraintDeclaration Constraint:
	//	InvariantConstraint | DerivationConstraint;
	public ConstraintDeclarationElements getConstraintDeclarationAccess() {
		return pConstraintDeclaration;
	}
	
	public ParserRule getConstraintDeclarationRule() {
		return getConstraintDeclarationAccess().getRule();
	}
	
	//InvariantConstraint:
	//	'context' classContext=[Class]
	//	'inv' invariantAlias=ID? ':' expression=OclExpression;
	public InvariantConstraintElements getInvariantConstraintAccess() {
		return pInvariantConstraint;
	}
	
	public ParserRule getInvariantConstraintRule() {
		return getInvariantConstraintAccess().getRule();
	}
	
	//DerivationConstraint:
	//	'context' classContext=[Class] ('::' featureContext+=ID)+ ':' contextType=TypeLiteralExpression
	//	'derive' ':' expression=OclExpression;
	public DerivationConstraintElements getDerivationConstraintAccess() {
		return pDerivationConstraint;
	}
	
	public ParserRule getDerivationConstraintRule() {
		return getDerivationConstraintAccess().getRule();
	}
	
	//OclExpression:
	//	LetExpression | IfExpression | ImpliesExpression;
	public OclExpressionElements getOclExpressionAccess() {
		return pOclExpression;
	}
	
	public ParserRule getOclExpressionRule() {
		return getOclExpressionAccess().getRule();
	}
	
	//LetExpression:
	//	'let' variables+=VariableDeclaration (',' variables+=VariableDeclaration)*
	//	'in' inExpression=OclExpression;
	public LetExpressionElements getLetExpressionAccess() {
		return pLetExpression;
	}
	
	public ParserRule getLetExpressionRule() {
		return getLetExpressionAccess().getRule();
	}
	
	//VariableDeclaration:
	//	variableName=ID ':' variableType=TypeLiteralExpression '=' initialValue=ImpliesExpression;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//IfExpression:
	//	'if' condition=OclExpression 'then'
	//	thenExpression=OclExpression
	//	'else'
	//	elseExpression=OclExpression
	//	'endif';
	public IfExpressionElements getIfExpressionAccess() {
		return pIfExpression;
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}
	
	//ImpliesExpression:
	//	left=XorExpression ('implies' right+=XorExpression)*;
	public ImpliesExpressionElements getImpliesExpressionAccess() {
		return pImpliesExpression;
	}
	
	public ParserRule getImpliesExpressionRule() {
		return getImpliesExpressionAccess().getRule();
	}
	
	//XorExpression:
	//	left=OrExpression ('xor' right+=OrExpression)*;
	public XorExpressionElements getXorExpressionAccess() {
		return pXorExpression;
	}
	
	public ParserRule getXorExpressionRule() {
		return getXorExpressionAccess().getRule();
	}
	
	//OrExpression:
	//	left=AndExpression ('or' right+=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//AndExpression:
	//	left=ComparisonExpression ('and' right+=ComparisonExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//ComparisonExpression:
	//	left=RelationalExpression right+=ComparisonOperation*;
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return pComparisonExpression;
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}
	
	//ComparisonOperation:
	//	operator=ComparisonOperator right=RelationalExpression;
	public ComparisonOperationElements getComparisonOperationAccess() {
		return pComparisonOperation;
	}
	
	public ParserRule getComparisonOperationRule() {
		return getComparisonOperationAccess().getRule();
	}
	
	//enum ComparisonOperator:
	//	EQUAL='=' | NOT_EQUAL='<>';
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return eComparisonOperator;
	}
	
	public EnumRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}
	
	//RelationalExpression:
	//	left=AdditionExpression right+=RelationalOperation*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//RelationalOperation:
	//	operator=RelationalOperator right=AdditionExpression;
	public RelationalOperationElements getRelationalOperationAccess() {
		return pRelationalOperation;
	}
	
	public ParserRule getRelationalOperationRule() {
		return getRelationalOperationAccess().getRule();
	}
	
	//enum RelationalOperator:
	//	GREATER='>' | LESS='<' | GREATER_EQUAL='>=' | LESS_EQUAL='<=';
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return eRelationalOperator;
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}
	
	//AdditionExpression:
	//	left=MultiplicationExpression right+=AdditionOperation*;
	public AdditionExpressionElements getAdditionExpressionAccess() {
		return pAdditionExpression;
	}
	
	public ParserRule getAdditionExpressionRule() {
		return getAdditionExpressionAccess().getRule();
	}
	
	//AdditionOperation:
	//	operator=AdditionOperator right=MultiplicationExpression;
	public AdditionOperationElements getAdditionOperationAccess() {
		return pAdditionOperation;
	}
	
	public ParserRule getAdditionOperationRule() {
		return getAdditionOperationAccess().getRule();
	}
	
	//enum AdditionOperator:
	//	PLUS='+' | MINUS='-';
	public AdditionOperatorElements getAdditionOperatorAccess() {
		return eAdditionOperator;
	}
	
	public EnumRule getAdditionOperatorRule() {
		return getAdditionOperatorAccess().getRule();
	}
	
	//MultiplicationExpression:
	//	left=UnaryExpression right+=MultiplicationOperation*;
	public MultiplicationExpressionElements getMultiplicationExpressionAccess() {
		return pMultiplicationExpression;
	}
	
	public ParserRule getMultiplicationExpressionRule() {
		return getMultiplicationExpressionAccess().getRule();
	}
	
	//MultiplicationOperation:
	//	operator=MultiplicationOperator right=UnaryExpression;
	public MultiplicationOperationElements getMultiplicationOperationAccess() {
		return pMultiplicationOperation;
	}
	
	public ParserRule getMultiplicationOperationRule() {
		return getMultiplicationOperationAccess().getRule();
	}
	
	//enum MultiplicationOperator:
	//	TIMES='*' | OVER='/';
	public MultiplicationOperatorElements getMultiplicationOperatorAccess() {
		return eMultiplicationOperator;
	}
	
	public EnumRule getMultiplicationOperatorRule() {
		return getMultiplicationOperatorAccess().getRule();
	}
	
	//UnaryExpression:
	//	operator=UnaryOperator? right=TermExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//enum UnaryOperator:
	//	NONE | NOT='not' | MINUS='-';
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return eUnaryOperator;
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//TermExpression:
	//	=> CallExpression | LiteralExpression | '(' OclExpression ')';
	public TermExpressionElements getTermExpressionAccess() {
		return pTermExpression;
	}
	
	public ParserRule getTermExpressionRule() {
		return getTermExpressionAccess().getRule();
	}
	
	//CallExpression:
	//	left=NavigationSource right+=CallOperation*;
	public CallExpressionElements getCallExpressionAccess() {
		return pCallExpression;
	}
	
	public ParserRule getCallExpressionRule() {
		return getCallExpressionAccess().getRule();
	}
	
	//NavigationSource:
	//	source=TypeLiteralExpression '.' 'allInstances' '(' ')' | source=VariableExpression;
	public NavigationSourceElements getNavigationSourceAccess() {
		return pNavigationSource;
	}
	
	public ParserRule getNavigationSourceRule() {
		return getNavigationSourceAccess().getRule();
	}
	
	//CallOperation:
	//	'.' DotOperation | '->' ArrowOperation;
	public CallOperationElements getCallOperationAccess() {
		return pCallOperation;
	}
	
	public ParserRule getCallOperationRule() {
		return getCallOperationAccess().getRule();
	}
	
	//DotOperation:
	//	UnaryNumberOperation | BinaryNumberOperation | TypeOperation | VariableExpression;
	public DotOperationElements getDotOperationAccess() {
		return pDotOperation;
	}
	
	public ParserRule getDotOperationRule() {
		return getDotOperationAccess().getRule();
	}
	
	//UnaryNumberOperation:
	//	operator=UnaryNumberOperator '(' ')';
	public UnaryNumberOperationElements getUnaryNumberOperationAccess() {
		return pUnaryNumberOperation;
	}
	
	public ParserRule getUnaryNumberOperationRule() {
		return getUnaryNumberOperationAccess().getRule();
	}
	
	//enum UnaryNumberOperator:
	//	ABS='abs' | FLOOR='floor' | ROUND='round' | OCL_IS_UNDEFINED='oclIsUndefined';
	public UnaryNumberOperatorElements getUnaryNumberOperatorAccess() {
		return eUnaryNumberOperator;
	}
	
	public EnumRule getUnaryNumberOperatorRule() {
		return getUnaryNumberOperatorAccess().getRule();
	}
	
	//BinaryNumberOperation:
	//	operator=BinaryNumberOperator '(' argument=OclExpression ')';
	public BinaryNumberOperationElements getBinaryNumberOperationAccess() {
		return pBinaryNumberOperation;
	}
	
	public ParserRule getBinaryNumberOperationRule() {
		return getBinaryNumberOperationAccess().getRule();
	}
	
	//enum BinaryNumberOperator:
	//	MIN='min' | MAX='max' | DIV='div';
	public BinaryNumberOperatorElements getBinaryNumberOperatorAccess() {
		return eBinaryNumberOperator;
	}
	
	public EnumRule getBinaryNumberOperatorRule() {
		return getBinaryNumberOperatorAccess().getRule();
	}
	
	//ArrowOperation:
	//	UnarySetOperation | BinarySetOperation | UnaryIteration | MultiaryIteration | TypeOperation;
	public ArrowOperationElements getArrowOperationAccess() {
		return pArrowOperation;
	}
	
	public ParserRule getArrowOperationRule() {
		return getArrowOperationAccess().getRule();
	}
	
	//UnarySetOperation:
	//	operator=UnarySetOperator '(' ')';
	public UnarySetOperationElements getUnarySetOperationAccess() {
		return pUnarySetOperation;
	}
	
	public ParserRule getUnarySetOperationRule() {
		return getUnarySetOperationAccess().getRule();
	}
	
	//enum UnarySetOperator:
	//	SIZE='size' | IS_EMPTY='isEmpty' | NOT_EMPTY='notEmpty' | SUM='sum' | MIN='min' | MAX='max' |
	//	AS_SET='asSet' | FLATTEN='flatten';
	public UnarySetOperatorElements getUnarySetOperatorAccess() {
		return eUnarySetOperator;
	}
	
	public EnumRule getUnarySetOperatorRule() {
		return getUnarySetOperatorAccess().getRule();
	}
	
	//BinarySetOperation:
	//	operator=BinarySetOperator '(' argument=OclExpression ')';
	public BinarySetOperationElements getBinarySetOperationAccess() {
		return pBinarySetOperation;
	}
	
	public ParserRule getBinarySetOperationRule() {
		return getBinarySetOperationAccess().getRule();
	}
	
	//enum BinarySetOperator:
	//	INCLUDES='includes' | INCLUDES_ALL='includesAll' | EXCLUDES='excludes' | EXCLUDES_ALL='excludesAll' |
	//	INCLUDING='including' | EXCLUDING='excluding' | COUNT='count' | UNION='union' | INTERSECTION='intersection' |
	//	SYMMETRIC_DIFFERENCE='symmetricDifference';
	public BinarySetOperatorElements getBinarySetOperatorAccess() {
		return eBinarySetOperator;
	}
	
	public EnumRule getBinarySetOperatorRule() {
		return getBinarySetOperatorAccess().getRule();
	}
	
	//UnaryIteration:
	//	iterator=UnaryIterator '(' (variable=ID '|')? body=OclExpression ')';
	public UnaryIterationElements getUnaryIterationAccess() {
		return pUnaryIteration;
	}
	
	public ParserRule getUnaryIterationRule() {
		return getUnaryIterationAccess().getRule();
	}
	
	//enum UnaryIterator:
	//	SELECT='select' | REJECT='reject' | COLLECT='collect' | ANY='any' | ONE='one' |
	//	IS_UNIQUE='isUnique' | CLOSURE='closure';
	public UnaryIteratorElements getUnaryIteratorAccess() {
		return eUnaryIterator;
	}
	
	public EnumRule getUnaryIteratorRule() {
		return getUnaryIteratorAccess().getRule();
	}
	
	//MultiaryIteration:
	//	iterator=MultiaryIterator '(' (variables+=ID (',' variables+=ID)+ '|')? body=OclExpression ')';
	public MultiaryIterationElements getMultiaryIterationAccess() {
		return pMultiaryIteration;
	}
	
	public ParserRule getMultiaryIterationRule() {
		return getMultiaryIterationAccess().getRule();
	}
	
	//enum MultiaryIterator:
	//	EXISTS='exists' | FOR_ALL='forAll';
	public MultiaryIteratorElements getMultiaryIteratorAccess() {
		return eMultiaryIterator;
	}
	
	public EnumRule getMultiaryIteratorRule() {
		return getMultiaryIteratorAccess().getRule();
	}
	
	//TypeOperation:
	//	operator=TypeOperator '(' (referredType=TypeLiteralExpression | 'self') ')';
	public TypeOperationElements getTypeOperationAccess() {
		return pTypeOperation;
	}
	
	public ParserRule getTypeOperationRule() {
		return getTypeOperationAccess().getRule();
	}
	
	//enum TypeOperator:
	//	OCL_AS_TYPE='oclAsType' | OCL_IS_KIND_OF='oclIsKindOf' | OCL_IS_TYPE_OF='oclIsTypeOf';
	public TypeOperatorElements getTypeOperatorAccess() {
		return eTypeOperator;
	}
	
	public EnumRule getTypeOperatorRule() {
		return getTypeOperatorAccess().getRule();
	}
	
	//LiteralExpression:
	//	PrimitiveLiteralExpression | SetLiteralExpression | TypeLiteralExpression;
	public LiteralExpressionElements getLiteralExpressionAccess() {
		return pLiteralExpression;
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//PrimitiveLiteralExpression:
	//	BooleanLiteralExpression | NumberLiteralExpression | StringLiteralExpression | NullLiteralExpression;
	public PrimitiveLiteralExpressionElements getPrimitiveLiteralExpressionAccess() {
		return pPrimitiveLiteralExpression;
	}
	
	public ParserRule getPrimitiveLiteralExpressionRule() {
		return getPrimitiveLiteralExpressionAccess().getRule();
	}
	
	//BooleanLiteralExpression:
	//	booleanSymbol=BOOLEAN_LITERAL;
	public BooleanLiteralExpressionElements getBooleanLiteralExpressionAccess() {
		return pBooleanLiteralExpression;
	}
	
	public ParserRule getBooleanLiteralExpressionRule() {
		return getBooleanLiteralExpressionAccess().getRule();
	}
	
	//NumberLiteralExpression:
	//	numberSymbol=NUMBER_LITERAL;
	public NumberLiteralExpressionElements getNumberLiteralExpressionAccess() {
		return pNumberLiteralExpression;
	}
	
	public ParserRule getNumberLiteralExpressionRule() {
		return getNumberLiteralExpressionAccess().getRule();
	}
	
	//StringLiteralExpression:
	//	stringSymbol=STRING;
	public StringLiteralExpressionElements getStringLiteralExpressionAccess() {
		return pStringLiteralExpression;
	}
	
	public ParserRule getStringLiteralExpressionRule() {
		return getStringLiteralExpressionAccess().getRule();
	}
	
	//NullLiteralExpression:
	//	nullSymbol='null';
	public NullLiteralExpressionElements getNullLiteralExpressionAccess() {
		return pNullLiteralExpression;
	}
	
	public ParserRule getNullLiteralExpressionRule() {
		return getNullLiteralExpressionAccess().getRule();
	}
	
	//SetLiteralExpression:
	//	{SetLiteralExpression} 'Set' '{' (parts+=PrimitiveLiteralExpression (',' parts+=PrimitiveLiteralExpression)*)? '}';
	public SetLiteralExpressionElements getSetLiteralExpressionAccess() {
		return pSetLiteralExpression;
	}
	
	public ParserRule getSetLiteralExpressionRule() {
		return getSetLiteralExpressionAccess().getRule();
	}
	
	//TypeLiteralExpression:
	//	PrimitiveTypeLiteral | SetTypeLiteral | UserDefinedTypeLiteral;
	public TypeLiteralExpressionElements getTypeLiteralExpressionAccess() {
		return pTypeLiteralExpression;
	}
	
	public ParserRule getTypeLiteralExpressionRule() {
		return getTypeLiteralExpressionAccess().getRule();
	}
	
	//VariableExpression:
	//	referringVariable='self' | referringVariable=ID;
	public VariableExpressionElements getVariableExpressionAccess() {
		return pVariableExpression;
	}
	
	public ParserRule getVariableExpressionRule() {
		return getVariableExpressionAccess().getRule();
	}
	
	//PrimitiveTypeLiteral:
	//	typeName='Boolean' | typeName='Number' | typeName='String';
	public PrimitiveTypeLiteralElements getPrimitiveTypeLiteralAccess() {
		return pPrimitiveTypeLiteral;
	}
	
	public ParserRule getPrimitiveTypeLiteralRule() {
		return getPrimitiveTypeLiteralAccess().getRule();
	}
	
	//SetTypeLiteral:
	//	typeName='Set' '(' setType=TypeLiteralExpression ')';
	public SetTypeLiteralElements getSetTypeLiteralAccess() {
		return pSetTypeLiteral;
	}
	
	public ParserRule getSetTypeLiteralRule() {
		return getSetTypeLiteralAccess().getRule();
	}
	
	//UserDefinedTypeLiteral:
	//	typeName=[Class];
	public UserDefinedTypeLiteralElements getUserDefinedTypeLiteralAccess() {
		return pUserDefinedTypeLiteral;
	}
	
	public ParserRule getUserDefinedTypeLiteralRule() {
		return getUserDefinedTypeLiteralAccess().getRule();
	}
	
	//BOOLEAN_LITERAL ecore::EBoolean:
	//	'true' | 'false';
	public BOOLEAN_LITERALElements getBOOLEAN_LITERALAccess() {
		return pBOOLEAN_LITERAL;
	}
	
	public ParserRule getBOOLEAN_LITERALRule() {
		return getBOOLEAN_LITERALAccess().getRule();
	}
	
	//NUMBER_LITERAL ecore::EDouble:
	//	INT ('.' INT)?;
	public NUMBER_LITERALElements getNUMBER_LITERALAccess() {
		return pNUMBER_LITERAL;
	}
	
	public ParserRule getNUMBER_LITERALRule() {
		return getNUMBER_LITERALAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
