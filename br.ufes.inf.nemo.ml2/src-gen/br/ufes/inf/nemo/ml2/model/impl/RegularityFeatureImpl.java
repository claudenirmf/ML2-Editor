/**
 * generated by Xtext 2.21.0
 */
package br.ufes.inf.nemo.ml2.model.impl;

import br.ufes.inf.nemo.ml2.model.ModelPackage;
import br.ufes.inf.nemo.ml2.model.RegularityFeature;
import br.ufes.inf.nemo.ml2.model.RegularityFeatureType;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Regularity Feature</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link br.ufes.inf.nemo.ml2.model.impl.RegularityFeatureImpl#getRegularityType <em>Regularity Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RegularityFeatureImpl extends FeatureImpl implements RegularityFeature
{
  /**
   * The default value of the '{@link #getRegularityType() <em>Regularity Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRegularityType()
   * @generated
   * @ordered
   */
  protected static final RegularityFeatureType REGULARITY_TYPE_EDEFAULT = RegularityFeatureType.DETERMINES_MAX_VALUE;

  /**
   * The cached value of the '{@link #getRegularityType() <em>Regularity Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRegularityType()
   * @generated
   * @ordered
   */
  protected RegularityFeatureType regularityType = REGULARITY_TYPE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RegularityFeatureImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ModelPackage.Literals.REGULARITY_FEATURE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegularityFeatureType getRegularityType()
  {
    return regularityType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRegularityType(RegularityFeatureType newRegularityType)
  {
    RegularityFeatureType oldRegularityType = regularityType;
    regularityType = newRegularityType == null ? REGULARITY_TYPE_EDEFAULT : newRegularityType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelPackage.REGULARITY_FEATURE__REGULARITY_TYPE, oldRegularityType, regularityType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ModelPackage.REGULARITY_FEATURE__REGULARITY_TYPE:
        return getRegularityType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ModelPackage.REGULARITY_FEATURE__REGULARITY_TYPE:
        setRegularityType((RegularityFeatureType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ModelPackage.REGULARITY_FEATURE__REGULARITY_TYPE:
        setRegularityType(REGULARITY_TYPE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ModelPackage.REGULARITY_FEATURE__REGULARITY_TYPE:
        return regularityType != REGULARITY_TYPE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (regularityType: ");
    result.append(regularityType);
    result.append(')');
    return result.toString();
  }

} //RegularityFeatureImpl
