/**
 * generated by Xtext 2.21.0
 */
package br.ufes.inf.nemo.ml2.model.impl;

import br.ufes.inf.nemo.ml2.model.DerivationConstraint;
import br.ufes.inf.nemo.ml2.model.Feature;
import br.ufes.inf.nemo.ml2.model.ModelPackage;
import br.ufes.inf.nemo.ml2.model.TypeLiteralExpression;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Derivation Constraint</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link br.ufes.inf.nemo.ml2.model.impl.DerivationConstraintImpl#getFeatureContext <em>Feature Context</em>}</li>
 *   <li>{@link br.ufes.inf.nemo.ml2.model.impl.DerivationConstraintImpl#getTypename <em>Typename</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DerivationConstraintImpl extends ConstraintImpl implements DerivationConstraint
{
  /**
   * The cached value of the '{@link #getFeatureContext() <em>Feature Context</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFeatureContext()
   * @generated
   * @ordered
   */
  protected Feature featureContext;

  /**
   * The cached value of the '{@link #getTypename() <em>Typename</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypename()
   * @generated
   * @ordered
   */
  protected TypeLiteralExpression typename;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DerivationConstraintImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ModelPackage.Literals.DERIVATION_CONSTRAINT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Feature getFeatureContext()
  {
    if (featureContext != null && featureContext.eIsProxy())
    {
      InternalEObject oldFeatureContext = (InternalEObject)featureContext;
      featureContext = (Feature)eResolveProxy(oldFeatureContext);
      if (featureContext != oldFeatureContext)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ModelPackage.DERIVATION_CONSTRAINT__FEATURE_CONTEXT, oldFeatureContext, featureContext));
      }
    }
    return featureContext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Feature basicGetFeatureContext()
  {
    return featureContext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFeatureContext(Feature newFeatureContext)
  {
    Feature oldFeatureContext = featureContext;
    featureContext = newFeatureContext;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelPackage.DERIVATION_CONSTRAINT__FEATURE_CONTEXT, oldFeatureContext, featureContext));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeLiteralExpression getTypename()
  {
    return typename;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTypename(TypeLiteralExpression newTypename, NotificationChain msgs)
  {
    TypeLiteralExpression oldTypename = typename;
    typename = newTypename;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelPackage.DERIVATION_CONSTRAINT__TYPENAME, oldTypename, newTypename);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTypename(TypeLiteralExpression newTypename)
  {
    if (newTypename != typename)
    {
      NotificationChain msgs = null;
      if (typename != null)
        msgs = ((InternalEObject)typename).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelPackage.DERIVATION_CONSTRAINT__TYPENAME, null, msgs);
      if (newTypename != null)
        msgs = ((InternalEObject)newTypename).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelPackage.DERIVATION_CONSTRAINT__TYPENAME, null, msgs);
      msgs = basicSetTypename(newTypename, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelPackage.DERIVATION_CONSTRAINT__TYPENAME, newTypename, newTypename));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ModelPackage.DERIVATION_CONSTRAINT__TYPENAME:
        return basicSetTypename(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ModelPackage.DERIVATION_CONSTRAINT__FEATURE_CONTEXT:
        if (resolve) return getFeatureContext();
        return basicGetFeatureContext();
      case ModelPackage.DERIVATION_CONSTRAINT__TYPENAME:
        return getTypename();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ModelPackage.DERIVATION_CONSTRAINT__FEATURE_CONTEXT:
        setFeatureContext((Feature)newValue);
        return;
      case ModelPackage.DERIVATION_CONSTRAINT__TYPENAME:
        setTypename((TypeLiteralExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ModelPackage.DERIVATION_CONSTRAINT__FEATURE_CONTEXT:
        setFeatureContext((Feature)null);
        return;
      case ModelPackage.DERIVATION_CONSTRAINT__TYPENAME:
        setTypename((TypeLiteralExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ModelPackage.DERIVATION_CONSTRAINT__FEATURE_CONTEXT:
        return featureContext != null;
      case ModelPackage.DERIVATION_CONSTRAINT__TYPENAME:
        return typename != null;
    }
    return super.eIsSet(featureID);
  }

} //DerivationConstraintImpl
