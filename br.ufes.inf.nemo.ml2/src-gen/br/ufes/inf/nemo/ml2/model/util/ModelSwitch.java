/**
 * generated by Xtext 2.21.0
 */
package br.ufes.inf.nemo.ml2.model.util;

import br.ufes.inf.nemo.ml2.model.AdditionExpression;
import br.ufes.inf.nemo.ml2.model.AdditionOperation;
import br.ufes.inf.nemo.ml2.model.AndExpression;
import br.ufes.inf.nemo.ml2.model.ArrowOperation;
import br.ufes.inf.nemo.ml2.model.Attribute;
import br.ufes.inf.nemo.ml2.model.AttributeAssignment;
import br.ufes.inf.nemo.ml2.model.BinaryNumberOperation;
import br.ufes.inf.nemo.ml2.model.BinarySetOperation;
import br.ufes.inf.nemo.ml2.model.BooleanLiteralExpression;
import br.ufes.inf.nemo.ml2.model.CallExpression;
import br.ufes.inf.nemo.ml2.model.CallOperation;
import br.ufes.inf.nemo.ml2.model.ComparisonExpression;
import br.ufes.inf.nemo.ml2.model.ComparisonOperation;
import br.ufes.inf.nemo.ml2.model.Constraint;
import br.ufes.inf.nemo.ml2.model.DataType;
import br.ufes.inf.nemo.ml2.model.DerivationConstraint;
import br.ufes.inf.nemo.ml2.model.DotOperation;
import br.ufes.inf.nemo.ml2.model.EntityDeclaration;
import br.ufes.inf.nemo.ml2.model.Feature;
import br.ufes.inf.nemo.ml2.model.FeatureAssignment;
import br.ufes.inf.nemo.ml2.model.FirstOrderClass;
import br.ufes.inf.nemo.ml2.model.GeneralizationSet;
import br.ufes.inf.nemo.ml2.model.HighOrderClass;
import br.ufes.inf.nemo.ml2.model.HigherOrderClass;
import br.ufes.inf.nemo.ml2.model.IfExpression;
import br.ufes.inf.nemo.ml2.model.ImpliesExpression;
import br.ufes.inf.nemo.ml2.model.Import;
import br.ufes.inf.nemo.ml2.model.Individual;
import br.ufes.inf.nemo.ml2.model.InvariantConstraint;
import br.ufes.inf.nemo.ml2.model.LetExpression;
import br.ufes.inf.nemo.ml2.model.LiteralExpression;
import br.ufes.inf.nemo.ml2.model.Model;
import br.ufes.inf.nemo.ml2.model.ModelElement;
import br.ufes.inf.nemo.ml2.model.ModelPackage;
import br.ufes.inf.nemo.ml2.model.MultiaryIteration;
import br.ufes.inf.nemo.ml2.model.MultiplicationExpression;
import br.ufes.inf.nemo.ml2.model.MultiplicationOperation;
import br.ufes.inf.nemo.ml2.model.NavigationSource;
import br.ufes.inf.nemo.ml2.model.NullLiteralExpression;
import br.ufes.inf.nemo.ml2.model.NumberLiteralExpression;
import br.ufes.inf.nemo.ml2.model.OclExpression;
import br.ufes.inf.nemo.ml2.model.OrExpression;
import br.ufes.inf.nemo.ml2.model.OrderedClass;
import br.ufes.inf.nemo.ml2.model.OrderlessClass;
import br.ufes.inf.nemo.ml2.model.PrimitiveLiteralExpression;
import br.ufes.inf.nemo.ml2.model.PrimitiveTypeLiteral;
import br.ufes.inf.nemo.ml2.model.Reference;
import br.ufes.inf.nemo.ml2.model.ReferenceAssignment;
import br.ufes.inf.nemo.ml2.model.RegularityAttribute;
import br.ufes.inf.nemo.ml2.model.RegularityFeature;
import br.ufes.inf.nemo.ml2.model.RegularityReference;
import br.ufes.inf.nemo.ml2.model.RelationalExpression;
import br.ufes.inf.nemo.ml2.model.RelationalOperation;
import br.ufes.inf.nemo.ml2.model.SetLiteralExpression;
import br.ufes.inf.nemo.ml2.model.SetTypeLiteral;
import br.ufes.inf.nemo.ml2.model.StringLiteralExpression;
import br.ufes.inf.nemo.ml2.model.TermExpression;
import br.ufes.inf.nemo.ml2.model.TypeLiteralExpression;
import br.ufes.inf.nemo.ml2.model.TypeOperation;
import br.ufes.inf.nemo.ml2.model.UnaryExpression;
import br.ufes.inf.nemo.ml2.model.UnaryIteration;
import br.ufes.inf.nemo.ml2.model.UnaryNumberOperation;
import br.ufes.inf.nemo.ml2.model.UnarySetOperation;
import br.ufes.inf.nemo.ml2.model.UserDefinedTypeLiteral;
import br.ufes.inf.nemo.ml2.model.VariableDeclaration;
import br.ufes.inf.nemo.ml2.model.VariableExpression;
import br.ufes.inf.nemo.ml2.model.XorExpression;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see br.ufes.inf.nemo.ml2.model.ModelPackage
 * @generated
 */
public class ModelSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ModelPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = ModelPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case ModelPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.IMPORT:
      {
        Import import_ = (Import)theEObject;
        T result = caseImport(import_);
        if (result == null) result = caseModelElement(import_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.MODEL_ELEMENT:
      {
        ModelElement modelElement = (ModelElement)theEObject;
        T result = caseModelElement(modelElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.ENTITY_DECLARATION:
      {
        EntityDeclaration entityDeclaration = (EntityDeclaration)theEObject;
        T result = caseEntityDeclaration(entityDeclaration);
        if (result == null) result = caseModelElement(entityDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.CLASS:
      {
        br.ufes.inf.nemo.ml2.model.Class class_ = (br.ufes.inf.nemo.ml2.model.Class)theEObject;
        T result = caseClass(class_);
        if (result == null) result = caseEntityDeclaration(class_);
        if (result == null) result = caseModelElement(class_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.FIRST_ORDER_CLASS:
      {
        FirstOrderClass firstOrderClass = (FirstOrderClass)theEObject;
        T result = caseFirstOrderClass(firstOrderClass);
        if (result == null) result = caseOrderedClass(firstOrderClass);
        if (result == null) result = caseClass(firstOrderClass);
        if (result == null) result = caseEntityDeclaration(firstOrderClass);
        if (result == null) result = caseModelElement(firstOrderClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.HIGHER_ORDER_CLASS:
      {
        HigherOrderClass higherOrderClass = (HigherOrderClass)theEObject;
        T result = caseHigherOrderClass(higherOrderClass);
        if (result == null) result = caseClass(higherOrderClass);
        if (result == null) result = caseEntityDeclaration(higherOrderClass);
        if (result == null) result = caseModelElement(higherOrderClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.INDIVIDUAL:
      {
        Individual individual = (Individual)theEObject;
        T result = caseIndividual(individual);
        if (result == null) result = caseEntityDeclaration(individual);
        if (result == null) result = caseModelElement(individual);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.ORDERED_CLASS:
      {
        OrderedClass orderedClass = (OrderedClass)theEObject;
        T result = caseOrderedClass(orderedClass);
        if (result == null) result = caseClass(orderedClass);
        if (result == null) result = caseEntityDeclaration(orderedClass);
        if (result == null) result = caseModelElement(orderedClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.DATA_TYPE:
      {
        DataType dataType = (DataType)theEObject;
        T result = caseDataType(dataType);
        if (result == null) result = caseFirstOrderClass(dataType);
        if (result == null) result = caseOrderedClass(dataType);
        if (result == null) result = caseClass(dataType);
        if (result == null) result = caseEntityDeclaration(dataType);
        if (result == null) result = caseModelElement(dataType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.HIGH_ORDER_CLASS:
      {
        HighOrderClass highOrderClass = (HighOrderClass)theEObject;
        T result = caseHighOrderClass(highOrderClass);
        if (result == null) result = caseHigherOrderClass(highOrderClass);
        if (result == null) result = caseOrderedClass(highOrderClass);
        if (result == null) result = caseClass(highOrderClass);
        if (result == null) result = caseEntityDeclaration(highOrderClass);
        if (result == null) result = caseModelElement(highOrderClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.ORDERLESS_CLASS:
      {
        OrderlessClass orderlessClass = (OrderlessClass)theEObject;
        T result = caseOrderlessClass(orderlessClass);
        if (result == null) result = caseHigherOrderClass(orderlessClass);
        if (result == null) result = caseClass(orderlessClass);
        if (result == null) result = caseEntityDeclaration(orderlessClass);
        if (result == null) result = caseModelElement(orderlessClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.GENERALIZATION_SET:
      {
        GeneralizationSet generalizationSet = (GeneralizationSet)theEObject;
        T result = caseGeneralizationSet(generalizationSet);
        if (result == null) result = caseModelElement(generalizationSet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.FEATURE:
      {
        Feature feature = (Feature)theEObject;
        T result = caseFeature(feature);
        if (result == null) result = caseModelElement(feature);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.ATTRIBUTE:
      {
        Attribute attribute = (Attribute)theEObject;
        T result = caseAttribute(attribute);
        if (result == null) result = caseFeature(attribute);
        if (result == null) result = caseModelElement(attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.REGULARITY_ATTRIBUTE:
      {
        RegularityAttribute regularityAttribute = (RegularityAttribute)theEObject;
        T result = caseRegularityAttribute(regularityAttribute);
        if (result == null) result = caseAttribute(regularityAttribute);
        if (result == null) result = caseRegularityFeature(regularityAttribute);
        if (result == null) result = caseFeature(regularityAttribute);
        if (result == null) result = caseModelElement(regularityAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.REFERENCE:
      {
        Reference reference = (Reference)theEObject;
        T result = caseReference(reference);
        if (result == null) result = caseFeature(reference);
        if (result == null) result = caseModelElement(reference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.REGULARITY_REFERENCE:
      {
        RegularityReference regularityReference = (RegularityReference)theEObject;
        T result = caseRegularityReference(regularityReference);
        if (result == null) result = caseReference(regularityReference);
        if (result == null) result = caseRegularityFeature(regularityReference);
        if (result == null) result = caseFeature(regularityReference);
        if (result == null) result = caseModelElement(regularityReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.REGULARITY_FEATURE:
      {
        RegularityFeature regularityFeature = (RegularityFeature)theEObject;
        T result = caseRegularityFeature(regularityFeature);
        if (result == null) result = caseFeature(regularityFeature);
        if (result == null) result = caseModelElement(regularityFeature);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.FEATURE_ASSIGNMENT:
      {
        FeatureAssignment featureAssignment = (FeatureAssignment)theEObject;
        T result = caseFeatureAssignment(featureAssignment);
        if (result == null) result = caseModelElement(featureAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.REFERENCE_ASSIGNMENT:
      {
        ReferenceAssignment referenceAssignment = (ReferenceAssignment)theEObject;
        T result = caseReferenceAssignment(referenceAssignment);
        if (result == null) result = caseFeatureAssignment(referenceAssignment);
        if (result == null) result = caseModelElement(referenceAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.ATTRIBUTE_ASSIGNMENT:
      {
        AttributeAssignment attributeAssignment = (AttributeAssignment)theEObject;
        T result = caseAttributeAssignment(attributeAssignment);
        if (result == null) result = caseFeatureAssignment(attributeAssignment);
        if (result == null) result = caseModelElement(attributeAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.CONSTRAINT:
      {
        Constraint constraint = (Constraint)theEObject;
        T result = caseConstraint(constraint);
        if (result == null) result = caseModelElement(constraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.INVARIANT_CONSTRAINT:
      {
        InvariantConstraint invariantConstraint = (InvariantConstraint)theEObject;
        T result = caseInvariantConstraint(invariantConstraint);
        if (result == null) result = caseConstraint(invariantConstraint);
        if (result == null) result = caseModelElement(invariantConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.DERIVATION_CONSTRAINT:
      {
        DerivationConstraint derivationConstraint = (DerivationConstraint)theEObject;
        T result = caseDerivationConstraint(derivationConstraint);
        if (result == null) result = caseConstraint(derivationConstraint);
        if (result == null) result = caseModelElement(derivationConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.OCL_EXPRESSION:
      {
        OclExpression oclExpression = (OclExpression)theEObject;
        T result = caseOclExpression(oclExpression);
        if (result == null) result = caseTermExpression(oclExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.LET_EXPRESSION:
      {
        LetExpression letExpression = (LetExpression)theEObject;
        T result = caseLetExpression(letExpression);
        if (result == null) result = caseOclExpression(letExpression);
        if (result == null) result = caseTermExpression(letExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.VARIABLE_DECLARATION:
      {
        VariableDeclaration variableDeclaration = (VariableDeclaration)theEObject;
        T result = caseVariableDeclaration(variableDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.IF_EXPRESSION:
      {
        IfExpression ifExpression = (IfExpression)theEObject;
        T result = caseIfExpression(ifExpression);
        if (result == null) result = caseOclExpression(ifExpression);
        if (result == null) result = caseTermExpression(ifExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.IMPLIES_EXPRESSION:
      {
        ImpliesExpression impliesExpression = (ImpliesExpression)theEObject;
        T result = caseImpliesExpression(impliesExpression);
        if (result == null) result = caseOclExpression(impliesExpression);
        if (result == null) result = caseTermExpression(impliesExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.XOR_EXPRESSION:
      {
        XorExpression xorExpression = (XorExpression)theEObject;
        T result = caseXorExpression(xorExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.OR_EXPRESSION:
      {
        OrExpression orExpression = (OrExpression)theEObject;
        T result = caseOrExpression(orExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.AND_EXPRESSION:
      {
        AndExpression andExpression = (AndExpression)theEObject;
        T result = caseAndExpression(andExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.COMPARISON_EXPRESSION:
      {
        ComparisonExpression comparisonExpression = (ComparisonExpression)theEObject;
        T result = caseComparisonExpression(comparisonExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.COMPARISON_OPERATION:
      {
        ComparisonOperation comparisonOperation = (ComparisonOperation)theEObject;
        T result = caseComparisonOperation(comparisonOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.RELATIONAL_EXPRESSION:
      {
        RelationalExpression relationalExpression = (RelationalExpression)theEObject;
        T result = caseRelationalExpression(relationalExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.RELATIONAL_OPERATION:
      {
        RelationalOperation relationalOperation = (RelationalOperation)theEObject;
        T result = caseRelationalOperation(relationalOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.ADDITION_EXPRESSION:
      {
        AdditionExpression additionExpression = (AdditionExpression)theEObject;
        T result = caseAdditionExpression(additionExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.ADDITION_OPERATION:
      {
        AdditionOperation additionOperation = (AdditionOperation)theEObject;
        T result = caseAdditionOperation(additionOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.MULTIPLICATION_EXPRESSION:
      {
        MultiplicationExpression multiplicationExpression = (MultiplicationExpression)theEObject;
        T result = caseMultiplicationExpression(multiplicationExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.MULTIPLICATION_OPERATION:
      {
        MultiplicationOperation multiplicationOperation = (MultiplicationOperation)theEObject;
        T result = caseMultiplicationOperation(multiplicationOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.UNARY_EXPRESSION:
      {
        UnaryExpression unaryExpression = (UnaryExpression)theEObject;
        T result = caseUnaryExpression(unaryExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.TERM_EXPRESSION:
      {
        TermExpression termExpression = (TermExpression)theEObject;
        T result = caseTermExpression(termExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.CALL_EXPRESSION:
      {
        CallExpression callExpression = (CallExpression)theEObject;
        T result = caseCallExpression(callExpression);
        if (result == null) result = caseTermExpression(callExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.NAVIGATION_SOURCE:
      {
        NavigationSource navigationSource = (NavigationSource)theEObject;
        T result = caseNavigationSource(navigationSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.CALL_OPERATION:
      {
        CallOperation callOperation = (CallOperation)theEObject;
        T result = caseCallOperation(callOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.DOT_OPERATION:
      {
        DotOperation dotOperation = (DotOperation)theEObject;
        T result = caseDotOperation(dotOperation);
        if (result == null) result = caseCallOperation(dotOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.UNARY_NUMBER_OPERATION:
      {
        UnaryNumberOperation unaryNumberOperation = (UnaryNumberOperation)theEObject;
        T result = caseUnaryNumberOperation(unaryNumberOperation);
        if (result == null) result = caseDotOperation(unaryNumberOperation);
        if (result == null) result = caseCallOperation(unaryNumberOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.BINARY_NUMBER_OPERATION:
      {
        BinaryNumberOperation binaryNumberOperation = (BinaryNumberOperation)theEObject;
        T result = caseBinaryNumberOperation(binaryNumberOperation);
        if (result == null) result = caseDotOperation(binaryNumberOperation);
        if (result == null) result = caseCallOperation(binaryNumberOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.ARROW_OPERATION:
      {
        ArrowOperation arrowOperation = (ArrowOperation)theEObject;
        T result = caseArrowOperation(arrowOperation);
        if (result == null) result = caseCallOperation(arrowOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.UNARY_SET_OPERATION:
      {
        UnarySetOperation unarySetOperation = (UnarySetOperation)theEObject;
        T result = caseUnarySetOperation(unarySetOperation);
        if (result == null) result = caseArrowOperation(unarySetOperation);
        if (result == null) result = caseCallOperation(unarySetOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.BINARY_SET_OPERATION:
      {
        BinarySetOperation binarySetOperation = (BinarySetOperation)theEObject;
        T result = caseBinarySetOperation(binarySetOperation);
        if (result == null) result = caseArrowOperation(binarySetOperation);
        if (result == null) result = caseCallOperation(binarySetOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.UNARY_ITERATION:
      {
        UnaryIteration unaryIteration = (UnaryIteration)theEObject;
        T result = caseUnaryIteration(unaryIteration);
        if (result == null) result = caseArrowOperation(unaryIteration);
        if (result == null) result = caseCallOperation(unaryIteration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.MULTIARY_ITERATION:
      {
        MultiaryIteration multiaryIteration = (MultiaryIteration)theEObject;
        T result = caseMultiaryIteration(multiaryIteration);
        if (result == null) result = caseArrowOperation(multiaryIteration);
        if (result == null) result = caseCallOperation(multiaryIteration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.TYPE_OPERATION:
      {
        TypeOperation typeOperation = (TypeOperation)theEObject;
        T result = caseTypeOperation(typeOperation);
        if (result == null) result = caseDotOperation(typeOperation);
        if (result == null) result = caseArrowOperation(typeOperation);
        if (result == null) result = caseCallOperation(typeOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.LITERAL_EXPRESSION:
      {
        LiteralExpression literalExpression = (LiteralExpression)theEObject;
        T result = caseLiteralExpression(literalExpression);
        if (result == null) result = caseTermExpression(literalExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.PRIMITIVE_LITERAL_EXPRESSION:
      {
        PrimitiveLiteralExpression primitiveLiteralExpression = (PrimitiveLiteralExpression)theEObject;
        T result = casePrimitiveLiteralExpression(primitiveLiteralExpression);
        if (result == null) result = caseLiteralExpression(primitiveLiteralExpression);
        if (result == null) result = caseTermExpression(primitiveLiteralExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.BOOLEAN_LITERAL_EXPRESSION:
      {
        BooleanLiteralExpression booleanLiteralExpression = (BooleanLiteralExpression)theEObject;
        T result = caseBooleanLiteralExpression(booleanLiteralExpression);
        if (result == null) result = casePrimitiveLiteralExpression(booleanLiteralExpression);
        if (result == null) result = caseLiteralExpression(booleanLiteralExpression);
        if (result == null) result = caseTermExpression(booleanLiteralExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.NUMBER_LITERAL_EXPRESSION:
      {
        NumberLiteralExpression numberLiteralExpression = (NumberLiteralExpression)theEObject;
        T result = caseNumberLiteralExpression(numberLiteralExpression);
        if (result == null) result = casePrimitiveLiteralExpression(numberLiteralExpression);
        if (result == null) result = caseLiteralExpression(numberLiteralExpression);
        if (result == null) result = caseTermExpression(numberLiteralExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.STRING_LITERAL_EXPRESSION:
      {
        StringLiteralExpression stringLiteralExpression = (StringLiteralExpression)theEObject;
        T result = caseStringLiteralExpression(stringLiteralExpression);
        if (result == null) result = casePrimitiveLiteralExpression(stringLiteralExpression);
        if (result == null) result = caseLiteralExpression(stringLiteralExpression);
        if (result == null) result = caseTermExpression(stringLiteralExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.NULL_LITERAL_EXPRESSION:
      {
        NullLiteralExpression nullLiteralExpression = (NullLiteralExpression)theEObject;
        T result = caseNullLiteralExpression(nullLiteralExpression);
        if (result == null) result = casePrimitiveLiteralExpression(nullLiteralExpression);
        if (result == null) result = caseLiteralExpression(nullLiteralExpression);
        if (result == null) result = caseTermExpression(nullLiteralExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.SET_LITERAL_EXPRESSION:
      {
        SetLiteralExpression setLiteralExpression = (SetLiteralExpression)theEObject;
        T result = caseSetLiteralExpression(setLiteralExpression);
        if (result == null) result = caseLiteralExpression(setLiteralExpression);
        if (result == null) result = caseTermExpression(setLiteralExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.TYPE_LITERAL_EXPRESSION:
      {
        TypeLiteralExpression typeLiteralExpression = (TypeLiteralExpression)theEObject;
        T result = caseTypeLiteralExpression(typeLiteralExpression);
        if (result == null) result = caseLiteralExpression(typeLiteralExpression);
        if (result == null) result = caseTermExpression(typeLiteralExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.VARIABLE_EXPRESSION:
      {
        VariableExpression variableExpression = (VariableExpression)theEObject;
        T result = caseVariableExpression(variableExpression);
        if (result == null) result = caseDotOperation(variableExpression);
        if (result == null) result = caseCallOperation(variableExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.PRIMITIVE_TYPE_LITERAL:
      {
        PrimitiveTypeLiteral primitiveTypeLiteral = (PrimitiveTypeLiteral)theEObject;
        T result = casePrimitiveTypeLiteral(primitiveTypeLiteral);
        if (result == null) result = caseTypeLiteralExpression(primitiveTypeLiteral);
        if (result == null) result = caseLiteralExpression(primitiveTypeLiteral);
        if (result == null) result = caseTermExpression(primitiveTypeLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.SET_TYPE_LITERAL:
      {
        SetTypeLiteral setTypeLiteral = (SetTypeLiteral)theEObject;
        T result = caseSetTypeLiteral(setTypeLiteral);
        if (result == null) result = caseTypeLiteralExpression(setTypeLiteral);
        if (result == null) result = caseLiteralExpression(setTypeLiteral);
        if (result == null) result = caseTermExpression(setTypeLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.USER_DEFINED_TYPE_LITERAL:
      {
        UserDefinedTypeLiteral userDefinedTypeLiteral = (UserDefinedTypeLiteral)theEObject;
        T result = caseUserDefinedTypeLiteral(userDefinedTypeLiteral);
        if (result == null) result = caseTypeLiteralExpression(userDefinedTypeLiteral);
        if (result == null) result = caseLiteralExpression(userDefinedTypeLiteral);
        if (result == null) result = caseTermExpression(userDefinedTypeLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImport(Import object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModelElement(ModelElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntityDeclaration(EntityDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClass(br.ufes.inf.nemo.ml2.model.Class object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>First Order Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>First Order Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFirstOrderClass(FirstOrderClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Higher Order Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Higher Order Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHigherOrderClass(HigherOrderClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Individual</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Individual</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndividual(Individual object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ordered Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ordered Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrderedClass(OrderedClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataType(DataType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>High Order Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>High Order Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHighOrderClass(HighOrderClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Orderless Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Orderless Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrderlessClass(OrderlessClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Generalization Set</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Generalization Set</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGeneralizationSet(GeneralizationSet object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Feature</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Feature</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFeature(Feature object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttribute(Attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Regularity Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Regularity Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRegularityAttribute(RegularityAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReference(Reference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Regularity Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Regularity Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRegularityReference(RegularityReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Regularity Feature</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Regularity Feature</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRegularityFeature(RegularityFeature object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Feature Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Feature Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFeatureAssignment(FeatureAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reference Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reference Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReferenceAssignment(ReferenceAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttributeAssignment(AttributeAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstraint(Constraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invariant Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invariant Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvariantConstraint(InvariantConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Derivation Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Derivation Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDerivationConstraint(DerivationConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ocl Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ocl Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclExpression(OclExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Let Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Let Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLetExpression(LetExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableDeclaration(VariableDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfExpression(IfExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Implies Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Implies Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImpliesExpression(ImpliesExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xor Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xor Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXorExpression(XorExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Or Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Or Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrExpression(OrExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAndExpression(AndExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comparison Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comparison Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComparisonExpression(ComparisonExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comparison Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comparison Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComparisonOperation(ComparisonOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relational Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relational Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelationalExpression(RelationalExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relational Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relational Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelationalOperation(RelationalOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Addition Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Addition Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAdditionExpression(AdditionExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Addition Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Addition Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAdditionOperation(AdditionOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multiplication Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multiplication Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiplicationExpression(MultiplicationExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multiplication Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multiplication Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiplicationOperation(MultiplicationOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnaryExpression(UnaryExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Term Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Term Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTermExpression(TermExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Call Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Call Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCallExpression(CallExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Navigation Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Navigation Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNavigationSource(NavigationSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Call Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Call Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCallOperation(CallOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dot Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dot Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDotOperation(DotOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary Number Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary Number Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnaryNumberOperation(UnaryNumberOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binary Number Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binary Number Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinaryNumberOperation(BinaryNumberOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arrow Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arrow Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArrowOperation(ArrowOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary Set Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary Set Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnarySetOperation(UnarySetOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binary Set Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binary Set Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinarySetOperation(BinarySetOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary Iteration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary Iteration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnaryIteration(UnaryIteration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multiary Iteration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multiary Iteration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiaryIteration(MultiaryIteration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeOperation(TypeOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteralExpression(LiteralExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Literal Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Literal Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitiveLiteralExpression(PrimitiveLiteralExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Literal Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Literal Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanLiteralExpression(BooleanLiteralExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Number Literal Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Number Literal Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumberLiteralExpression(NumberLiteralExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Literal Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Literal Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringLiteralExpression(StringLiteralExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Null Literal Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Null Literal Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNullLiteralExpression(NullLiteralExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Literal Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Literal Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetLiteralExpression(SetLiteralExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Literal Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Literal Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeLiteralExpression(TypeLiteralExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableExpression(VariableExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Type Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Type Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitiveTypeLiteral(PrimitiveTypeLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Type Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Type Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetTypeLiteral(SetTypeLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>User Defined Type Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>User Defined Type Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUserDefinedTypeLiteral(UserDefinedTypeLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //ModelSwitch
