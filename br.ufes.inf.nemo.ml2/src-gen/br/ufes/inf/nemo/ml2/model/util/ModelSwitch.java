/**
 * generated by Xtext 2.21.0
 */
package br.ufes.inf.nemo.ml2.model.util;

import br.ufes.inf.nemo.ml2.model.Attribute;
import br.ufes.inf.nemo.ml2.model.AttributeAssignment;
import br.ufes.inf.nemo.ml2.model.DataType;
import br.ufes.inf.nemo.ml2.model.EntityDeclaration;
import br.ufes.inf.nemo.ml2.model.Feature;
import br.ufes.inf.nemo.ml2.model.FeatureAssignment;
import br.ufes.inf.nemo.ml2.model.FirstOrderClass;
import br.ufes.inf.nemo.ml2.model.GeneralizationSet;
import br.ufes.inf.nemo.ml2.model.HighOrderClass;
import br.ufes.inf.nemo.ml2.model.HigherOrderClass;
import br.ufes.inf.nemo.ml2.model.Import;
import br.ufes.inf.nemo.ml2.model.Individual;
import br.ufes.inf.nemo.ml2.model.Model;
import br.ufes.inf.nemo.ml2.model.ModelElement;
import br.ufes.inf.nemo.ml2.model.ModelPackage;
import br.ufes.inf.nemo.ml2.model.OrderedClass;
import br.ufes.inf.nemo.ml2.model.OrderlessClass;
import br.ufes.inf.nemo.ml2.model.Reference;
import br.ufes.inf.nemo.ml2.model.ReferenceAssignment;
import br.ufes.inf.nemo.ml2.model.RegularityAttribute;
import br.ufes.inf.nemo.ml2.model.RegularityFeature;
import br.ufes.inf.nemo.ml2.model.RegularityReference;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see br.ufes.inf.nemo.ml2.model.ModelPackage
 * @generated
 */
public class ModelSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ModelPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = ModelPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case ModelPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.IMPORT:
      {
        Import import_ = (Import)theEObject;
        T result = caseImport(import_);
        if (result == null) result = caseModelElement(import_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.MODEL_ELEMENT:
      {
        ModelElement modelElement = (ModelElement)theEObject;
        T result = caseModelElement(modelElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.ENTITY_DECLARATION:
      {
        EntityDeclaration entityDeclaration = (EntityDeclaration)theEObject;
        T result = caseEntityDeclaration(entityDeclaration);
        if (result == null) result = caseModelElement(entityDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.CLASS:
      {
        br.ufes.inf.nemo.ml2.model.Class class_ = (br.ufes.inf.nemo.ml2.model.Class)theEObject;
        T result = caseClass(class_);
        if (result == null) result = caseEntityDeclaration(class_);
        if (result == null) result = caseModelElement(class_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.FIRST_ORDER_CLASS:
      {
        FirstOrderClass firstOrderClass = (FirstOrderClass)theEObject;
        T result = caseFirstOrderClass(firstOrderClass);
        if (result == null) result = caseOrderedClass(firstOrderClass);
        if (result == null) result = caseClass(firstOrderClass);
        if (result == null) result = caseEntityDeclaration(firstOrderClass);
        if (result == null) result = caseModelElement(firstOrderClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.HIGHER_ORDER_CLASS:
      {
        HigherOrderClass higherOrderClass = (HigherOrderClass)theEObject;
        T result = caseHigherOrderClass(higherOrderClass);
        if (result == null) result = caseClass(higherOrderClass);
        if (result == null) result = caseEntityDeclaration(higherOrderClass);
        if (result == null) result = caseModelElement(higherOrderClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.INDIVIDUAL:
      {
        Individual individual = (Individual)theEObject;
        T result = caseIndividual(individual);
        if (result == null) result = caseEntityDeclaration(individual);
        if (result == null) result = caseModelElement(individual);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.ORDERED_CLASS:
      {
        OrderedClass orderedClass = (OrderedClass)theEObject;
        T result = caseOrderedClass(orderedClass);
        if (result == null) result = caseClass(orderedClass);
        if (result == null) result = caseEntityDeclaration(orderedClass);
        if (result == null) result = caseModelElement(orderedClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.DATA_TYPE:
      {
        DataType dataType = (DataType)theEObject;
        T result = caseDataType(dataType);
        if (result == null) result = caseFirstOrderClass(dataType);
        if (result == null) result = caseOrderedClass(dataType);
        if (result == null) result = caseClass(dataType);
        if (result == null) result = caseEntityDeclaration(dataType);
        if (result == null) result = caseModelElement(dataType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.HIGH_ORDER_CLASS:
      {
        HighOrderClass highOrderClass = (HighOrderClass)theEObject;
        T result = caseHighOrderClass(highOrderClass);
        if (result == null) result = caseHigherOrderClass(highOrderClass);
        if (result == null) result = caseOrderedClass(highOrderClass);
        if (result == null) result = caseClass(highOrderClass);
        if (result == null) result = caseEntityDeclaration(highOrderClass);
        if (result == null) result = caseModelElement(highOrderClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.ORDERLESS_CLASS:
      {
        OrderlessClass orderlessClass = (OrderlessClass)theEObject;
        T result = caseOrderlessClass(orderlessClass);
        if (result == null) result = caseHigherOrderClass(orderlessClass);
        if (result == null) result = caseClass(orderlessClass);
        if (result == null) result = caseEntityDeclaration(orderlessClass);
        if (result == null) result = caseModelElement(orderlessClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.GENERALIZATION_SET:
      {
        GeneralizationSet generalizationSet = (GeneralizationSet)theEObject;
        T result = caseGeneralizationSet(generalizationSet);
        if (result == null) result = caseModelElement(generalizationSet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.FEATURE:
      {
        Feature feature = (Feature)theEObject;
        T result = caseFeature(feature);
        if (result == null) result = caseModelElement(feature);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.ATTRIBUTE:
      {
        Attribute attribute = (Attribute)theEObject;
        T result = caseAttribute(attribute);
        if (result == null) result = caseFeature(attribute);
        if (result == null) result = caseModelElement(attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.REGULARITY_ATTRIBUTE:
      {
        RegularityAttribute regularityAttribute = (RegularityAttribute)theEObject;
        T result = caseRegularityAttribute(regularityAttribute);
        if (result == null) result = caseAttribute(regularityAttribute);
        if (result == null) result = caseRegularityFeature(regularityAttribute);
        if (result == null) result = caseFeature(regularityAttribute);
        if (result == null) result = caseModelElement(regularityAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.REFERENCE:
      {
        Reference reference = (Reference)theEObject;
        T result = caseReference(reference);
        if (result == null) result = caseFeature(reference);
        if (result == null) result = caseModelElement(reference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.REGULARITY_REFERENCE:
      {
        RegularityReference regularityReference = (RegularityReference)theEObject;
        T result = caseRegularityReference(regularityReference);
        if (result == null) result = caseReference(regularityReference);
        if (result == null) result = caseRegularityFeature(regularityReference);
        if (result == null) result = caseFeature(regularityReference);
        if (result == null) result = caseModelElement(regularityReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.REGULARITY_FEATURE:
      {
        RegularityFeature regularityFeature = (RegularityFeature)theEObject;
        T result = caseRegularityFeature(regularityFeature);
        if (result == null) result = caseFeature(regularityFeature);
        if (result == null) result = caseModelElement(regularityFeature);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.FEATURE_ASSIGNMENT:
      {
        FeatureAssignment featureAssignment = (FeatureAssignment)theEObject;
        T result = caseFeatureAssignment(featureAssignment);
        if (result == null) result = caseModelElement(featureAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.REFERENCE_ASSIGNMENT:
      {
        ReferenceAssignment referenceAssignment = (ReferenceAssignment)theEObject;
        T result = caseReferenceAssignment(referenceAssignment);
        if (result == null) result = caseFeatureAssignment(referenceAssignment);
        if (result == null) result = caseModelElement(referenceAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelPackage.ATTRIBUTE_ASSIGNMENT:
      {
        AttributeAssignment attributeAssignment = (AttributeAssignment)theEObject;
        T result = caseAttributeAssignment(attributeAssignment);
        if (result == null) result = caseFeatureAssignment(attributeAssignment);
        if (result == null) result = caseModelElement(attributeAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImport(Import object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModelElement(ModelElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntityDeclaration(EntityDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClass(br.ufes.inf.nemo.ml2.model.Class object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>First Order Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>First Order Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFirstOrderClass(FirstOrderClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Higher Order Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Higher Order Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHigherOrderClass(HigherOrderClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Individual</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Individual</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndividual(Individual object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ordered Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ordered Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrderedClass(OrderedClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataType(DataType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>High Order Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>High Order Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHighOrderClass(HighOrderClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Orderless Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Orderless Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrderlessClass(OrderlessClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Generalization Set</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Generalization Set</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGeneralizationSet(GeneralizationSet object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Feature</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Feature</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFeature(Feature object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttribute(Attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Regularity Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Regularity Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRegularityAttribute(RegularityAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReference(Reference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Regularity Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Regularity Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRegularityReference(RegularityReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Regularity Feature</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Regularity Feature</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRegularityFeature(RegularityFeature object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Feature Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Feature Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFeatureAssignment(FeatureAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reference Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reference Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReferenceAssignment(ReferenceAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttributeAssignment(AttributeAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //ModelSwitch
