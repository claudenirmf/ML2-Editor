/**
 * generated by Xtext 2.21.0
 */
package br.ufes.inf.nemo.ml2.model.impl;

import br.ufes.inf.nemo.ml2.model.AdditionExpression;
import br.ufes.inf.nemo.ml2.model.AdditionOperation;
import br.ufes.inf.nemo.ml2.model.AdditionOperator;
import br.ufes.inf.nemo.ml2.model.AndExpression;
import br.ufes.inf.nemo.ml2.model.ArrowOperation;
import br.ufes.inf.nemo.ml2.model.Attribute;
import br.ufes.inf.nemo.ml2.model.AttributeAssignment;
import br.ufes.inf.nemo.ml2.model.BinaryIteration;
import br.ufes.inf.nemo.ml2.model.BinarySetOperation;
import br.ufes.inf.nemo.ml2.model.BinarySetOperator;
import br.ufes.inf.nemo.ml2.model.BooleanLiteralExpression;
import br.ufes.inf.nemo.ml2.model.BuiltInOperation;
import br.ufes.inf.nemo.ml2.model.CallExpression;
import br.ufes.inf.nemo.ml2.model.CallOperation;
import br.ufes.inf.nemo.ml2.model.CategorizationType;
import br.ufes.inf.nemo.ml2.model.CollectionLiteralExpression;
import br.ufes.inf.nemo.ml2.model.CollectionTypeName;
import br.ufes.inf.nemo.ml2.model.ComparisonExpression;
import br.ufes.inf.nemo.ml2.model.ComparisonOperation;
import br.ufes.inf.nemo.ml2.model.ComparisonOperator;
import br.ufes.inf.nemo.ml2.model.Constraint;
import br.ufes.inf.nemo.ml2.model.DataType;
import br.ufes.inf.nemo.ml2.model.DataTypeName;
import br.ufes.inf.nemo.ml2.model.DerivationConstraint;
import br.ufes.inf.nemo.ml2.model.DotOperation;
import br.ufes.inf.nemo.ml2.model.EntityDeclaration;
import br.ufes.inf.nemo.ml2.model.Feature;
import br.ufes.inf.nemo.ml2.model.FeatureAssignment;
import br.ufes.inf.nemo.ml2.model.FirstOrderClass;
import br.ufes.inf.nemo.ml2.model.GeneralizationSet;
import br.ufes.inf.nemo.ml2.model.HighOrderClass;
import br.ufes.inf.nemo.ml2.model.HigherOrderClass;
import br.ufes.inf.nemo.ml2.model.IfExpression;
import br.ufes.inf.nemo.ml2.model.ImpliesExpression;
import br.ufes.inf.nemo.ml2.model.Import;
import br.ufes.inf.nemo.ml2.model.Individual;
import br.ufes.inf.nemo.ml2.model.InvariantConstraint;
import br.ufes.inf.nemo.ml2.model.LetExpression;
import br.ufes.inf.nemo.ml2.model.LiteralExpression;
import br.ufes.inf.nemo.ml2.model.Model;
import br.ufes.inf.nemo.ml2.model.ModelElement;
import br.ufes.inf.nemo.ml2.model.ModelFactory;
import br.ufes.inf.nemo.ml2.model.ModelPackage;
import br.ufes.inf.nemo.ml2.model.MultiplicationExpression;
import br.ufes.inf.nemo.ml2.model.NullLiteralExpression;
import br.ufes.inf.nemo.ml2.model.NumberLiteralExpression;
import br.ufes.inf.nemo.ml2.model.OclExpression;
import br.ufes.inf.nemo.ml2.model.OclTypeName;
import br.ufes.inf.nemo.ml2.model.OrExpression;
import br.ufes.inf.nemo.ml2.model.OrderedClass;
import br.ufes.inf.nemo.ml2.model.OrderlessClass;
import br.ufes.inf.nemo.ml2.model.PrimitiveLiteralExpression;
import br.ufes.inf.nemo.ml2.model.PrimitiveType;
import br.ufes.inf.nemo.ml2.model.PrimitiveTypeName;
import br.ufes.inf.nemo.ml2.model.Reference;
import br.ufes.inf.nemo.ml2.model.ReferenceAssignment;
import br.ufes.inf.nemo.ml2.model.RegularityAttribute;
import br.ufes.inf.nemo.ml2.model.RegularityFeature;
import br.ufes.inf.nemo.ml2.model.RegularityFeatureType;
import br.ufes.inf.nemo.ml2.model.RegularityReference;
import br.ufes.inf.nemo.ml2.model.RelationalExpression;
import br.ufes.inf.nemo.ml2.model.RelationalOperation;
import br.ufes.inf.nemo.ml2.model.RelationalOperator;
import br.ufes.inf.nemo.ml2.model.StringLiteralExpression;
import br.ufes.inf.nemo.ml2.model.TermExpression;
import br.ufes.inf.nemo.ml2.model.TupleLiteralExpression;
import br.ufes.inf.nemo.ml2.model.TupleTypeName;
import br.ufes.inf.nemo.ml2.model.TypeLiteralExpression;
import br.ufes.inf.nemo.ml2.model.UnaryExpression;
import br.ufes.inf.nemo.ml2.model.UnaryIteration;
import br.ufes.inf.nemo.ml2.model.UnaryIterator;
import br.ufes.inf.nemo.ml2.model.UnaryOperator;
import br.ufes.inf.nemo.ml2.model.UnarySetOperation;
import br.ufes.inf.nemo.ml2.model.UnarySetOperator;
import br.ufes.inf.nemo.ml2.model.VariableDeclaration;
import br.ufes.inf.nemo.ml2.model.VariableExpression;
import br.ufes.inf.nemo.ml2.model.XorExpression;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ModelFactoryImpl extends EFactoryImpl implements ModelFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ModelFactory init()
  {
    try
    {
      ModelFactory theModelFactory = (ModelFactory)EPackage.Registry.INSTANCE.getEFactory(ModelPackage.eNS_URI);
      if (theModelFactory != null)
      {
        return theModelFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ModelFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ModelPackage.MODEL: return createModel();
      case ModelPackage.IMPORT: return createImport();
      case ModelPackage.MODEL_ELEMENT: return createModelElement();
      case ModelPackage.ENTITY_DECLARATION: return createEntityDeclaration();
      case ModelPackage.CLASS: return createClass();
      case ModelPackage.FIRST_ORDER_CLASS: return createFirstOrderClass();
      case ModelPackage.HIGHER_ORDER_CLASS: return createHigherOrderClass();
      case ModelPackage.INDIVIDUAL: return createIndividual();
      case ModelPackage.ORDERED_CLASS: return createOrderedClass();
      case ModelPackage.DATA_TYPE: return createDataType();
      case ModelPackage.HIGH_ORDER_CLASS: return createHighOrderClass();
      case ModelPackage.ORDERLESS_CLASS: return createOrderlessClass();
      case ModelPackage.GENERALIZATION_SET: return createGeneralizationSet();
      case ModelPackage.FEATURE: return createFeature();
      case ModelPackage.ATTRIBUTE: return createAttribute();
      case ModelPackage.REGULARITY_ATTRIBUTE: return createRegularityAttribute();
      case ModelPackage.REFERENCE: return createReference();
      case ModelPackage.REGULARITY_REFERENCE: return createRegularityReference();
      case ModelPackage.REGULARITY_FEATURE: return createRegularityFeature();
      case ModelPackage.FEATURE_ASSIGNMENT: return createFeatureAssignment();
      case ModelPackage.REFERENCE_ASSIGNMENT: return createReferenceAssignment();
      case ModelPackage.ATTRIBUTE_ASSIGNMENT: return createAttributeAssignment();
      case ModelPackage.CONSTRAINT: return createConstraint();
      case ModelPackage.INVARIANT_CONSTRAINT: return createInvariantConstraint();
      case ModelPackage.DERIVATION_CONSTRAINT: return createDerivationConstraint();
      case ModelPackage.OCL_EXPRESSION: return createOclExpression();
      case ModelPackage.LET_EXPRESSION: return createLetExpression();
      case ModelPackage.VARIABLE_DECLARATION: return createVariableDeclaration();
      case ModelPackage.IF_EXPRESSION: return createIfExpression();
      case ModelPackage.IMPLIES_EXPRESSION: return createImpliesExpression();
      case ModelPackage.XOR_EXPRESSION: return createXorExpression();
      case ModelPackage.OR_EXPRESSION: return createOrExpression();
      case ModelPackage.AND_EXPRESSION: return createAndExpression();
      case ModelPackage.COMPARISON_EXPRESSION: return createComparisonExpression();
      case ModelPackage.COMPARISON_OPERATION: return createComparisonOperation();
      case ModelPackage.RELATIONAL_EXPRESSION: return createRelationalExpression();
      case ModelPackage.RELATIONAL_OPERATION: return createRelationalOperation();
      case ModelPackage.ADDITION_EXPRESSION: return createAdditionExpression();
      case ModelPackage.ADDITION_OPERATION: return createAdditionOperation();
      case ModelPackage.MULTIPLICATION_EXPRESSION: return createMultiplicationExpression();
      case ModelPackage.UNARY_EXPRESSION: return createUnaryExpression();
      case ModelPackage.TERM_EXPRESSION: return createTermExpression();
      case ModelPackage.CALL_EXPRESSION: return createCallExpression();
      case ModelPackage.CALL_OPERATION: return createCallOperation();
      case ModelPackage.DOT_OPERATION: return createDotOperation();
      case ModelPackage.ARROW_OPERATION: return createArrowOperation();
      case ModelPackage.BUILT_IN_OPERATION: return createBuiltInOperation();
      case ModelPackage.UNARY_SET_OPERATION: return createUnarySetOperation();
      case ModelPackage.BINARY_SET_OPERATION: return createBinarySetOperation();
      case ModelPackage.UNARY_ITERATION: return createUnaryIteration();
      case ModelPackage.BINARY_ITERATION: return createBinaryIteration();
      case ModelPackage.LITERAL_EXPRESSION: return createLiteralExpression();
      case ModelPackage.PRIMITIVE_LITERAL_EXPRESSION: return createPrimitiveLiteralExpression();
      case ModelPackage.NULL_LITERAL_EXPRESSION: return createNullLiteralExpression();
      case ModelPackage.BOOLEAN_LITERAL_EXPRESSION: return createBooleanLiteralExpression();
      case ModelPackage.NUMBER_LITERAL_EXPRESSION: return createNumberLiteralExpression();
      case ModelPackage.STRING_LITERAL_EXPRESSION: return createStringLiteralExpression();
      case ModelPackage.COLLECTION_LITERAL_EXPRESSION: return createCollectionLiteralExpression();
      case ModelPackage.TYPE_LITERAL_EXPRESSION: return createTypeLiteralExpression();
      case ModelPackage.TUPLE_LITERAL_EXPRESSION: return createTupleLiteralExpression();
      case ModelPackage.VARIABLE_EXPRESSION: return createVariableExpression();
      case ModelPackage.PRIMITIVE_TYPE_NAME: return createPrimitiveTypeName();
      case ModelPackage.COLLECTION_TYPE_NAME: return createCollectionTypeName();
      case ModelPackage.TUPLE_TYPE_NAME: return createTupleTypeName();
      case ModelPackage.OCL_TYPE_NAME: return createOclTypeName();
      case ModelPackage.DATA_TYPE_NAME: return createDataTypeName();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case ModelPackage.CATEGORIZATION_TYPE:
        return createCategorizationTypeFromString(eDataType, initialValue);
      case ModelPackage.PRIMITIVE_TYPE:
        return createPrimitiveTypeFromString(eDataType, initialValue);
      case ModelPackage.REGULARITY_FEATURE_TYPE:
        return createRegularityFeatureTypeFromString(eDataType, initialValue);
      case ModelPackage.COMPARISON_OPERATOR:
        return createComparisonOperatorFromString(eDataType, initialValue);
      case ModelPackage.RELATIONAL_OPERATOR:
        return createRelationalOperatorFromString(eDataType, initialValue);
      case ModelPackage.ADDITION_OPERATOR:
        return createAdditionOperatorFromString(eDataType, initialValue);
      case ModelPackage.UNARY_OPERATOR:
        return createUnaryOperatorFromString(eDataType, initialValue);
      case ModelPackage.UNARY_SET_OPERATOR:
        return createUnarySetOperatorFromString(eDataType, initialValue);
      case ModelPackage.BINARY_SET_OPERATOR:
        return createBinarySetOperatorFromString(eDataType, initialValue);
      case ModelPackage.UNARY_ITERATOR:
        return createUnaryIteratorFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case ModelPackage.CATEGORIZATION_TYPE:
        return convertCategorizationTypeToString(eDataType, instanceValue);
      case ModelPackage.PRIMITIVE_TYPE:
        return convertPrimitiveTypeToString(eDataType, instanceValue);
      case ModelPackage.REGULARITY_FEATURE_TYPE:
        return convertRegularityFeatureTypeToString(eDataType, instanceValue);
      case ModelPackage.COMPARISON_OPERATOR:
        return convertComparisonOperatorToString(eDataType, instanceValue);
      case ModelPackage.RELATIONAL_OPERATOR:
        return convertRelationalOperatorToString(eDataType, instanceValue);
      case ModelPackage.ADDITION_OPERATOR:
        return convertAdditionOperatorToString(eDataType, instanceValue);
      case ModelPackage.UNARY_OPERATOR:
        return convertUnaryOperatorToString(eDataType, instanceValue);
      case ModelPackage.UNARY_SET_OPERATOR:
        return convertUnarySetOperatorToString(eDataType, instanceValue);
      case ModelPackage.BINARY_SET_OPERATOR:
        return convertBinarySetOperatorToString(eDataType, instanceValue);
      case ModelPackage.UNARY_ITERATOR:
        return convertUnaryIteratorToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModelElement createModelElement()
  {
    ModelElementImpl modelElement = new ModelElementImpl();
    return modelElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityDeclaration createEntityDeclaration()
  {
    EntityDeclarationImpl entityDeclaration = new EntityDeclarationImpl();
    return entityDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public br.ufes.inf.nemo.ml2.model.Class createClass()
  {
    ClassImpl class_ = new ClassImpl();
    return class_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FirstOrderClass createFirstOrderClass()
  {
    FirstOrderClassImpl firstOrderClass = new FirstOrderClassImpl();
    return firstOrderClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HigherOrderClass createHigherOrderClass()
  {
    HigherOrderClassImpl higherOrderClass = new HigherOrderClassImpl();
    return higherOrderClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Individual createIndividual()
  {
    IndividualImpl individual = new IndividualImpl();
    return individual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrderedClass createOrderedClass()
  {
    OrderedClassImpl orderedClass = new OrderedClassImpl();
    return orderedClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataType createDataType()
  {
    DataTypeImpl dataType = new DataTypeImpl();
    return dataType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HighOrderClass createHighOrderClass()
  {
    HighOrderClassImpl highOrderClass = new HighOrderClassImpl();
    return highOrderClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrderlessClass createOrderlessClass()
  {
    OrderlessClassImpl orderlessClass = new OrderlessClassImpl();
    return orderlessClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GeneralizationSet createGeneralizationSet()
  {
    GeneralizationSetImpl generalizationSet = new GeneralizationSetImpl();
    return generalizationSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Feature createFeature()
  {
    FeatureImpl feature = new FeatureImpl();
    return feature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegularityAttribute createRegularityAttribute()
  {
    RegularityAttributeImpl regularityAttribute = new RegularityAttributeImpl();
    return regularityAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Reference createReference()
  {
    ReferenceImpl reference = new ReferenceImpl();
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegularityReference createRegularityReference()
  {
    RegularityReferenceImpl regularityReference = new RegularityReferenceImpl();
    return regularityReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegularityFeature createRegularityFeature()
  {
    RegularityFeatureImpl regularityFeature = new RegularityFeatureImpl();
    return regularityFeature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FeatureAssignment createFeatureAssignment()
  {
    FeatureAssignmentImpl featureAssignment = new FeatureAssignmentImpl();
    return featureAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReferenceAssignment createReferenceAssignment()
  {
    ReferenceAssignmentImpl referenceAssignment = new ReferenceAssignmentImpl();
    return referenceAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttributeAssignment createAttributeAssignment()
  {
    AttributeAssignmentImpl attributeAssignment = new AttributeAssignmentImpl();
    return attributeAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constraint createConstraint()
  {
    ConstraintImpl constraint = new ConstraintImpl();
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InvariantConstraint createInvariantConstraint()
  {
    InvariantConstraintImpl invariantConstraint = new InvariantConstraintImpl();
    return invariantConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DerivationConstraint createDerivationConstraint()
  {
    DerivationConstraintImpl derivationConstraint = new DerivationConstraintImpl();
    return derivationConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclExpression createOclExpression()
  {
    OclExpressionImpl oclExpression = new OclExpressionImpl();
    return oclExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LetExpression createLetExpression()
  {
    LetExpressionImpl letExpression = new LetExpressionImpl();
    return letExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclaration createVariableDeclaration()
  {
    VariableDeclarationImpl variableDeclaration = new VariableDeclarationImpl();
    return variableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfExpression createIfExpression()
  {
    IfExpressionImpl ifExpression = new IfExpressionImpl();
    return ifExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ImpliesExpression createImpliesExpression()
  {
    ImpliesExpressionImpl impliesExpression = new ImpliesExpressionImpl();
    return impliesExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XorExpression createXorExpression()
  {
    XorExpressionImpl xorExpression = new XorExpressionImpl();
    return xorExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrExpression createOrExpression()
  {
    OrExpressionImpl orExpression = new OrExpressionImpl();
    return orExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AndExpression createAndExpression()
  {
    AndExpressionImpl andExpression = new AndExpressionImpl();
    return andExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComparisonExpression createComparisonExpression()
  {
    ComparisonExpressionImpl comparisonExpression = new ComparisonExpressionImpl();
    return comparisonExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComparisonOperation createComparisonOperation()
  {
    ComparisonOperationImpl comparisonOperation = new ComparisonOperationImpl();
    return comparisonOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationalExpression createRelationalExpression()
  {
    RelationalExpressionImpl relationalExpression = new RelationalExpressionImpl();
    return relationalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationalOperation createRelationalOperation()
  {
    RelationalOperationImpl relationalOperation = new RelationalOperationImpl();
    return relationalOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AdditionExpression createAdditionExpression()
  {
    AdditionExpressionImpl additionExpression = new AdditionExpressionImpl();
    return additionExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AdditionOperation createAdditionOperation()
  {
    AdditionOperationImpl additionOperation = new AdditionOperationImpl();
    return additionOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiplicationExpression createMultiplicationExpression()
  {
    MultiplicationExpressionImpl multiplicationExpression = new MultiplicationExpressionImpl();
    return multiplicationExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnaryExpression createUnaryExpression()
  {
    UnaryExpressionImpl unaryExpression = new UnaryExpressionImpl();
    return unaryExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TermExpression createTermExpression()
  {
    TermExpressionImpl termExpression = new TermExpressionImpl();
    return termExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CallExpression createCallExpression()
  {
    CallExpressionImpl callExpression = new CallExpressionImpl();
    return callExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CallOperation createCallOperation()
  {
    CallOperationImpl callOperation = new CallOperationImpl();
    return callOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DotOperation createDotOperation()
  {
    DotOperationImpl dotOperation = new DotOperationImpl();
    return dotOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrowOperation createArrowOperation()
  {
    ArrowOperationImpl arrowOperation = new ArrowOperationImpl();
    return arrowOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BuiltInOperation createBuiltInOperation()
  {
    BuiltInOperationImpl builtInOperation = new BuiltInOperationImpl();
    return builtInOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnarySetOperation createUnarySetOperation()
  {
    UnarySetOperationImpl unarySetOperation = new UnarySetOperationImpl();
    return unarySetOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BinarySetOperation createBinarySetOperation()
  {
    BinarySetOperationImpl binarySetOperation = new BinarySetOperationImpl();
    return binarySetOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnaryIteration createUnaryIteration()
  {
    UnaryIterationImpl unaryIteration = new UnaryIterationImpl();
    return unaryIteration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BinaryIteration createBinaryIteration()
  {
    BinaryIterationImpl binaryIteration = new BinaryIterationImpl();
    return binaryIteration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LiteralExpression createLiteralExpression()
  {
    LiteralExpressionImpl literalExpression = new LiteralExpressionImpl();
    return literalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimitiveLiteralExpression createPrimitiveLiteralExpression()
  {
    PrimitiveLiteralExpressionImpl primitiveLiteralExpression = new PrimitiveLiteralExpressionImpl();
    return primitiveLiteralExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NullLiteralExpression createNullLiteralExpression()
  {
    NullLiteralExpressionImpl nullLiteralExpression = new NullLiteralExpressionImpl();
    return nullLiteralExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanLiteralExpression createBooleanLiteralExpression()
  {
    BooleanLiteralExpressionImpl booleanLiteralExpression = new BooleanLiteralExpressionImpl();
    return booleanLiteralExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumberLiteralExpression createNumberLiteralExpression()
  {
    NumberLiteralExpressionImpl numberLiteralExpression = new NumberLiteralExpressionImpl();
    return numberLiteralExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringLiteralExpression createStringLiteralExpression()
  {
    StringLiteralExpressionImpl stringLiteralExpression = new StringLiteralExpressionImpl();
    return stringLiteralExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CollectionLiteralExpression createCollectionLiteralExpression()
  {
    CollectionLiteralExpressionImpl collectionLiteralExpression = new CollectionLiteralExpressionImpl();
    return collectionLiteralExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeLiteralExpression createTypeLiteralExpression()
  {
    TypeLiteralExpressionImpl typeLiteralExpression = new TypeLiteralExpressionImpl();
    return typeLiteralExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TupleLiteralExpression createTupleLiteralExpression()
  {
    TupleLiteralExpressionImpl tupleLiteralExpression = new TupleLiteralExpressionImpl();
    return tupleLiteralExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableExpression createVariableExpression()
  {
    VariableExpressionImpl variableExpression = new VariableExpressionImpl();
    return variableExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimitiveTypeName createPrimitiveTypeName()
  {
    PrimitiveTypeNameImpl primitiveTypeName = new PrimitiveTypeNameImpl();
    return primitiveTypeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CollectionTypeName createCollectionTypeName()
  {
    CollectionTypeNameImpl collectionTypeName = new CollectionTypeNameImpl();
    return collectionTypeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TupleTypeName createTupleTypeName()
  {
    TupleTypeNameImpl tupleTypeName = new TupleTypeNameImpl();
    return tupleTypeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclTypeName createOclTypeName()
  {
    OclTypeNameImpl oclTypeName = new OclTypeNameImpl();
    return oclTypeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataTypeName createDataTypeName()
  {
    DataTypeNameImpl dataTypeName = new DataTypeNameImpl();
    return dataTypeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CategorizationType createCategorizationTypeFromString(EDataType eDataType, String initialValue)
  {
    CategorizationType result = CategorizationType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCategorizationTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrimitiveType createPrimitiveTypeFromString(EDataType eDataType, String initialValue)
  {
    PrimitiveType result = PrimitiveType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPrimitiveTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RegularityFeatureType createRegularityFeatureTypeFromString(EDataType eDataType, String initialValue)
  {
    RegularityFeatureType result = RegularityFeatureType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRegularityFeatureTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComparisonOperator createComparisonOperatorFromString(EDataType eDataType, String initialValue)
  {
    ComparisonOperator result = ComparisonOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertComparisonOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RelationalOperator createRelationalOperatorFromString(EDataType eDataType, String initialValue)
  {
    RelationalOperator result = RelationalOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRelationalOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AdditionOperator createAdditionOperatorFromString(EDataType eDataType, String initialValue)
  {
    AdditionOperator result = AdditionOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAdditionOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnaryOperator createUnaryOperatorFromString(EDataType eDataType, String initialValue)
  {
    UnaryOperator result = UnaryOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertUnaryOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnarySetOperator createUnarySetOperatorFromString(EDataType eDataType, String initialValue)
  {
    UnarySetOperator result = UnarySetOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertUnarySetOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BinarySetOperator createBinarySetOperatorFromString(EDataType eDataType, String initialValue)
  {
    BinarySetOperator result = BinarySetOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBinarySetOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnaryIterator createUnaryIteratorFromString(EDataType eDataType, String initialValue)
  {
    UnaryIterator result = UnaryIterator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertUnaryIteratorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModelPackage getModelPackage()
  {
    return (ModelPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ModelPackage getPackage()
  {
    return ModelPackage.eINSTANCE;
  }

} //ModelFactoryImpl
